"use strict";
const logger = require("pomelo-logger").getLogger("pomelo", __filename);
const utils = require("../../util/utils");
const DEFAULT_TIMEOUT = 3000;
const DEFAULT_SIZE = 500;
class TimeoutFilter {
    constructor(timeout, maxSize) {
        this.timeout = timeout;
        this.maxSize = maxSize;
        this.curId = 0;
        this.timeouts = {};
    }
    before(msg, session, next) {
        var count = utils.size(this.timeouts);
        if (count > this.maxSize) {
            logger.warn("timeout filter is out of range, current size is %s, max size is %s", count, this.maxSize);
            next();
            return;
        }
        this.curId++;
        this.timeouts[this.curId] = setTimeout(() => {
            logger.error("request %j timeout.", msg.__route__);
        }, this.timeout);
        session.__timeout__ = this.curId;
        next();
    }
    after(err, msg, session, resp, next) {
        var timeout = this.timeouts[session.__timeout__];
        if (timeout) {
            clearTimeout(timeout);
            delete this.timeouts[session.__timeout__];
        }
        next(err);
    }
}
module.exports = (timeout, maxSize) => {
    return new TimeoutFilter(timeout || DEFAULT_TIMEOUT, maxSize || DEFAULT_SIZE);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZW91dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRpbWVvdXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3hFLDBDQUEyQztBQUczQyxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUM7QUFDN0IsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDO0FBTXpCO0lBR0UsWUFBcUIsT0FBZSxFQUFXLE9BQWU7UUFBekMsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUFXLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFDNUQsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBQ0QsTUFBTSxDQUFDLEdBQVEsRUFBRSxPQUF3QixFQUFFLElBQWM7UUFDdkQsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEMsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLE1BQU0sQ0FBQyxJQUFJLENBQ1Qsb0VBQW9FLEVBQ3BFLEtBQUssRUFDTCxJQUFJLENBQUMsT0FBTyxDQUNiLENBQUM7WUFDRixJQUFJLEVBQUUsQ0FBQztZQUNQLE1BQU0sQ0FBQztRQUNULENBQUM7UUFDRCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQzFDLE1BQU0sQ0FBQyxLQUFLLENBQUMscUJBQXFCLEVBQUUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3JELENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakIsT0FBTyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ2pDLElBQUksRUFBRSxDQUFDO0lBQ1QsQ0FBQztJQUVELEtBQUssQ0FBQyxHQUFRLEVBQUUsR0FBUSxFQUFFLE9BQXdCLEVBQUUsSUFBUyxFQUFFLElBQWM7UUFDM0UsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsV0FBWSxDQUFDLENBQUM7UUFDbEQsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNaLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN0QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFdBQVksQ0FBQyxDQUFDO1FBQzdDLENBQUM7UUFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDWixDQUFDO0NBQ0Y7QUF0Q0QsaUJBQVMsQ0FBQyxPQUFnQixFQUFFLE9BQWdCLEVBQUMsRUFBRTtJQUM3QyxNQUFNLENBQUMsSUFBSSxhQUFhLENBQUMsT0FBTyxJQUFJLGVBQWUsRUFBRSxPQUFPLElBQUksWUFBWSxDQUFDLENBQUM7QUFDaEYsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmlsdGVyIH0gZnJvbSBcIi4uLy4uL2FwcGxpY2F0aW9uXCI7XG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKFwicG9tZWxvLWxvZ2dlclwiKS5nZXRMb2dnZXIoXCJwb21lbG9cIiwgX19maWxlbmFtZSk7XG5pbXBvcnQgdXRpbHMgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC91dGlsc1wiKTtcbmltcG9ydCB7IEZyb250ZW5kU2Vzc2lvbiB9IGZyb20gXCIuLi8uLi9pbmRleFwiO1xuXG5jb25zdCBERUZBVUxUX1RJTUVPVVQgPSAzMDAwO1xuY29uc3QgREVGQVVMVF9TSVpFID0gNTAwO1xuXG5leHBvcnQgPSAodGltZW91dD86IG51bWJlciwgbWF4U2l6ZT86IG51bWJlcik9PiB7XG4gIHJldHVybiBuZXcgVGltZW91dEZpbHRlcih0aW1lb3V0IHx8IERFRkFVTFRfVElNRU9VVCwgbWF4U2l6ZSB8fCBERUZBVUxUX1NJWkUpO1xufVxuXG5jbGFzcyBUaW1lb3V0RmlsdGVyIGltcGxlbWVudHMgRmlsdGVyIHtcbiAgcHJpdmF0ZSBjdXJJZDogbnVtYmVyO1xuICBwcml2YXRlIHRpbWVvdXRzOiBhbnk7XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHRpbWVvdXQ6IG51bWJlciwgcmVhZG9ubHkgbWF4U2l6ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5jdXJJZCA9IDA7XG4gICAgdGhpcy50aW1lb3V0cyA9IHt9O1xuICB9XG4gIGJlZm9yZShtc2c6IGFueSwgc2Vzc2lvbjogRnJvbnRlbmRTZXNzaW9uLCBuZXh0OiBGdW5jdGlvbikge1xuICAgIHZhciBjb3VudCA9IHV0aWxzLnNpemUodGhpcy50aW1lb3V0cyk7XG4gICAgaWYgKGNvdW50ID4gdGhpcy5tYXhTaXplKSB7XG4gICAgICBsb2dnZXIud2FybihcbiAgICAgICAgXCJ0aW1lb3V0IGZpbHRlciBpcyBvdXQgb2YgcmFuZ2UsIGN1cnJlbnQgc2l6ZSBpcyAlcywgbWF4IHNpemUgaXMgJXNcIixcbiAgICAgICAgY291bnQsXG4gICAgICAgIHRoaXMubWF4U2l6ZVxuICAgICAgKTtcbiAgICAgIG5leHQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5jdXJJZCsrO1xuICAgIHRoaXMudGltZW91dHNbdGhpcy5jdXJJZF0gPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGxvZ2dlci5lcnJvcihcInJlcXVlc3QgJWogdGltZW91dC5cIiwgbXNnLl9fcm91dGVfXyk7XG4gICAgfSwgdGhpcy50aW1lb3V0KTtcbiAgICBzZXNzaW9uLl9fdGltZW91dF9fID0gdGhpcy5jdXJJZDtcbiAgICBuZXh0KCk7XG4gIH1cblxuICBhZnRlcihlcnI6IGFueSwgbXNnOiBhbnksIHNlc3Npb246IEZyb250ZW5kU2Vzc2lvbiwgcmVzcDogYW55LCBuZXh0OiBGdW5jdGlvbikge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy50aW1lb3V0c1tzZXNzaW9uLl9fdGltZW91dF9fIV07XG4gICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIGRlbGV0ZSB0aGlzLnRpbWVvdXRzW3Nlc3Npb24uX190aW1lb3V0X18hXTtcbiAgICB9XG4gICAgbmV4dChlcnIpO1xuICB9XG59XG4iXX0=