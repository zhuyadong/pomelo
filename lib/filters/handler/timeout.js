"use strict";
const logger = require("pomelo-logger").getLogger("pomelo", __filename);
const utils = require("../../util/utils");
const DEFAULT_TIMEOUT = 3000;
const DEFAULT_SIZE = 500;
class TimeoutFilter {
    constructor(timeout, maxSize) {
        this.timeout = timeout;
        this.maxSize = maxSize;
        this.curId = 0;
        this.timeouts = {};
    }
    before(msg, session, next) {
        var count = utils.size(this.timeouts);
        if (count > this.maxSize) {
            logger.warn("timeout filter is out of range, current size is %s, max size is %s", count, this.maxSize);
            next();
            return;
        }
        this.curId++;
        this.timeouts[this.curId] = setTimeout(() => {
            logger.error("request %j timeout.", msg.__route__);
        }, this.timeout);
        session.__timeout__ = this.curId;
        next();
    }
    after(err, msg, session, resp, next) {
        var timeout = this.timeouts[session.__timeout__];
        if (timeout) {
            clearTimeout(timeout);
            delete this.timeouts[session.__timeout__];
        }
        next(err);
    }
}
module.exports = (timeout, maxSize) => {
    return new TimeoutFilter(timeout || DEFAULT_TIMEOUT, maxSize || DEFAULT_SIZE);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZW91dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRpbWVvdXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3hFLDBDQUEyQztBQUczQyxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUM7QUFDN0IsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDO0FBTXpCO0lBR0UsWUFBcUIsT0FBZSxFQUFXLE9BQWU7UUFBekMsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUFXLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFDNUQsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBQ0QsTUFBTSxDQUFDLEdBQVEsRUFBRSxPQUF3QixFQUFFLElBQWM7UUFDdkQsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEMsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLE1BQU0sQ0FBQyxJQUFJLENBQ1Qsb0VBQW9FLEVBQ3BFLEtBQUssRUFDTCxJQUFJLENBQUMsT0FBTyxDQUNiLENBQUM7WUFDRixJQUFJLEVBQUUsQ0FBQztZQUNQLE1BQU0sQ0FBQztRQUNULENBQUM7UUFDRCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQzFDLE1BQU0sQ0FBQyxLQUFLLENBQUMscUJBQXFCLEVBQUUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3JELENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakIsT0FBTyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ2pDLElBQUksRUFBRSxDQUFDO0lBQ1QsQ0FBQztJQUVELEtBQUssQ0FBQyxHQUFRLEVBQUUsR0FBUSxFQUFFLE9BQXdCLEVBQUUsSUFBUyxFQUFFLElBQWM7UUFDM0UsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsV0FBWSxDQUFDLENBQUM7UUFDbEQsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNaLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN0QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFdBQVksQ0FBQyxDQUFDO1FBQzdDLENBQUM7UUFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDWixDQUFDO0NBQ0Y7QUF0Q0QsaUJBQVMsQ0FBQyxPQUFnQixFQUFFLE9BQWdCLEVBQUMsRUFBRTtJQUM3QyxNQUFNLENBQUMsSUFBSSxhQUFhLENBQUMsT0FBTyxJQUFJLGVBQWUsRUFBRSxPQUFPLElBQUksWUFBWSxDQUFDLENBQUM7QUFDaEYsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmlsdGVyIH0gZnJvbSBcIi4uLy4uL2FwcGxpY2F0aW9uXCI7XHJcbmNvbnN0IGxvZ2dlciA9IHJlcXVpcmUoXCJwb21lbG8tbG9nZ2VyXCIpLmdldExvZ2dlcihcInBvbWVsb1wiLCBfX2ZpbGVuYW1lKTtcclxuaW1wb3J0IHV0aWxzID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvdXRpbHNcIik7XHJcbmltcG9ydCB7IEZyb250ZW5kU2Vzc2lvbiB9IGZyb20gXCIuLi8uLi9pbmRleFwiO1xyXG5cclxuY29uc3QgREVGQVVMVF9USU1FT1VUID0gMzAwMDtcclxuY29uc3QgREVGQVVMVF9TSVpFID0gNTAwO1xyXG5cclxuZXhwb3J0ID0gKHRpbWVvdXQ/OiBudW1iZXIsIG1heFNpemU/OiBudW1iZXIpPT4ge1xyXG4gIHJldHVybiBuZXcgVGltZW91dEZpbHRlcih0aW1lb3V0IHx8IERFRkFVTFRfVElNRU9VVCwgbWF4U2l6ZSB8fCBERUZBVUxUX1NJWkUpO1xyXG59XHJcblxyXG5jbGFzcyBUaW1lb3V0RmlsdGVyIGltcGxlbWVudHMgRmlsdGVyIHtcclxuICBwcml2YXRlIGN1cklkOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSB0aW1lb3V0czogYW55O1xyXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHRpbWVvdXQ6IG51bWJlciwgcmVhZG9ubHkgbWF4U2l6ZTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLmN1cklkID0gMDtcclxuICAgIHRoaXMudGltZW91dHMgPSB7fTtcclxuICB9XHJcbiAgYmVmb3JlKG1zZzogYW55LCBzZXNzaW9uOiBGcm9udGVuZFNlc3Npb24sIG5leHQ6IEZ1bmN0aW9uKSB7XHJcbiAgICB2YXIgY291bnQgPSB1dGlscy5zaXplKHRoaXMudGltZW91dHMpO1xyXG4gICAgaWYgKGNvdW50ID4gdGhpcy5tYXhTaXplKSB7XHJcbiAgICAgIGxvZ2dlci53YXJuKFxyXG4gICAgICAgIFwidGltZW91dCBmaWx0ZXIgaXMgb3V0IG9mIHJhbmdlLCBjdXJyZW50IHNpemUgaXMgJXMsIG1heCBzaXplIGlzICVzXCIsXHJcbiAgICAgICAgY291bnQsXHJcbiAgICAgICAgdGhpcy5tYXhTaXplXHJcbiAgICAgICk7XHJcbiAgICAgIG5leHQoKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jdXJJZCsrO1xyXG4gICAgdGhpcy50aW1lb3V0c1t0aGlzLmN1cklkXSA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBsb2dnZXIuZXJyb3IoXCJyZXF1ZXN0ICVqIHRpbWVvdXQuXCIsIG1zZy5fX3JvdXRlX18pO1xyXG4gICAgfSwgdGhpcy50aW1lb3V0KTtcclxuICAgIHNlc3Npb24uX190aW1lb3V0X18gPSB0aGlzLmN1cklkO1xyXG4gICAgbmV4dCgpO1xyXG4gIH1cclxuXHJcbiAgYWZ0ZXIoZXJyOiBhbnksIG1zZzogYW55LCBzZXNzaW9uOiBGcm9udGVuZFNlc3Npb24sIHJlc3A6IGFueSwgbmV4dDogRnVuY3Rpb24pIHtcclxuICAgIHZhciB0aW1lb3V0ID0gdGhpcy50aW1lb3V0c1tzZXNzaW9uLl9fdGltZW91dF9fIV07XHJcbiAgICBpZiAodGltZW91dCkge1xyXG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XHJcbiAgICAgIGRlbGV0ZSB0aGlzLnRpbWVvdXRzW3Nlc3Npb24uX190aW1lb3V0X18hXTtcclxuICAgIH1cclxuICAgIG5leHQoZXJyKTtcclxuICB9XHJcbn1cclxuIl19