"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
var State;
(function (State) {
    State[State["ST_INITED"] = 0] = "ST_INITED";
    State[State["ST_CLOSED"] = 1] = "ST_CLOSED";
})(State || (State = {}));
class SioSocket extends events_1.EventEmitter {
    constructor(id, socket) {
        super();
        this.id = id;
        this.socket = socket;
        this.id = id;
        this.socket = socket;
        this.remoteAddress = {
            ip: socket.handshake.address.address,
            port: socket.handshake.address.port
        };
        socket.on("disconnect", this.emit.bind(this, "disconnect"));
        socket.on("error", this.emit.bind(this, "error"));
        socket.on("message", (msg) => {
            this.emit("message", msg);
        });
        this.state = State.ST_INITED;
        // TODO: any other events?
    }
    send(msg) {
        if (this.state !== State.ST_INITED) {
            return;
        }
        if (typeof msg !== "string") {
            msg = JSON.stringify(msg);
        }
        this.socket.send(msg);
    }
    disconnect() {
        if (this.state === State.ST_CLOSED) {
            return;
        }
        this.state = State.ST_CLOSED;
        this.socket.disconnect();
    }
    sendBatch(msgs) {
        this.send(encodeBatch(msgs));
    }
}
exports.default = SioSocket;
function encodeBatch(msgs) {
    let res = "[", msg;
    for (let i = 0, l = msgs.length; i < l; i++) {
        if (i > 0) {
            res += ",";
        }
        msg = msgs[i];
        if (typeof msg === "string") {
            res += msg;
        }
        else {
            res += JSON.stringify(msg);
        }
    }
    res += "]";
    return res;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lvc29ja2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2lvc29ja2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsbUNBQXNDO0FBSXRDLElBQUssS0FHSjtBQUhELFdBQUssS0FBSztJQUNSLDJDQUFhLENBQUE7SUFDYiwyQ0FBYSxDQUFBO0FBQ2YsQ0FBQyxFQUhJLEtBQUssS0FBTCxLQUFLLFFBR1Q7QUFFRCxlQUErQixTQUFRLHFCQUFZO0lBR2pELFlBQXFCLEVBQVUsRUFBVyxNQUFXO1FBQ25ELEtBQUssRUFBRSxDQUFDO1FBRFcsT0FBRSxHQUFGLEVBQUUsQ0FBUTtRQUFXLFdBQU0sR0FBTixNQUFNLENBQUs7UUFFbkQsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsYUFBYSxHQUFHO1lBQ25CLEVBQUUsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxPQUFPO1lBQ3BDLElBQUksRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJO1NBQ3BDLENBQUM7UUFFRixNQUFNLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUU1RCxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUVsRCxNQUFNLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQVEsRUFBRSxFQUFFO1lBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO1FBRTdCLDBCQUEwQjtJQUM1QixDQUFDO0lBQ0QsSUFBSSxDQUFDLEdBQVE7UUFDWCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ25DLE1BQU0sQ0FBQztRQUNULENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxPQUFPLEdBQUcsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQzVCLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLENBQUM7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQsVUFBVTtRQUNSLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDbkMsTUFBTSxDQUFDO1FBQ1QsQ0FBQztRQUVELElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUM3QixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCxTQUFTLENBQUMsSUFBVztRQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQy9CLENBQUM7Q0FDRjtBQTlDRCw0QkE4Q0M7QUFFRCxxQkFBcUIsSUFBVztJQUM5QixJQUFJLEdBQUcsR0FBRyxHQUFHLEVBQ1gsR0FBRyxDQUFDO0lBQ04sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUM1QyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNWLEdBQUcsSUFBSSxHQUFHLENBQUM7UUFDYixDQUFDO1FBQ0QsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEVBQUUsQ0FBQyxDQUFDLE9BQU8sR0FBRyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDNUIsR0FBRyxJQUFJLEdBQUcsQ0FBQztRQUNiLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLEdBQUcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLENBQUM7SUFDSCxDQUFDO0lBQ0QsR0FBRyxJQUFJLEdBQUcsQ0FBQztJQUNYLE1BQU0sQ0FBQyxHQUFHLENBQUM7QUFDYixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHV0aWwgPSByZXF1aXJlKFwidXRpbFwiKTtcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcImV2ZW50c1wiO1xyXG5pbXBvcnQgeyBTb2NrZXQgfSBmcm9tIFwibmV0XCI7XHJcbmltcG9ydCB7IFJlbW90ZUFkZHJlc3MgfSBmcm9tIFwiLi4vcG9tZWxvXCI7XHJcblxyXG5lbnVtIFN0YXRlIHtcclxuICBTVF9JTklURUQgPSAwLFxyXG4gIFNUX0NMT1NFRCA9IDFcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2lvU29ja2V0IGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcclxuICBwcml2YXRlIHJlbW90ZUFkZHJlc3M6IFJlbW90ZUFkZHJlc3M7XHJcbiAgcHJpdmF0ZSBzdGF0ZTogU3RhdGU7XHJcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgaWQ6IG51bWJlciwgcmVhZG9ubHkgc29ja2V0OiBhbnkpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICB0aGlzLnNvY2tldCA9IHNvY2tldDtcclxuICAgIHRoaXMucmVtb3RlQWRkcmVzcyA9IHtcclxuICAgICAgaXA6IHNvY2tldC5oYW5kc2hha2UuYWRkcmVzcy5hZGRyZXNzLFxyXG4gICAgICBwb3J0OiBzb2NrZXQuaGFuZHNoYWtlLmFkZHJlc3MucG9ydFxyXG4gICAgfTtcclxuXHJcbiAgICBzb2NrZXQub24oXCJkaXNjb25uZWN0XCIsIHRoaXMuZW1pdC5iaW5kKHRoaXMsIFwiZGlzY29ubmVjdFwiKSk7XHJcblxyXG4gICAgc29ja2V0Lm9uKFwiZXJyb3JcIiwgdGhpcy5lbWl0LmJpbmQodGhpcywgXCJlcnJvclwiKSk7XHJcblxyXG4gICAgc29ja2V0Lm9uKFwibWVzc2FnZVwiLCAobXNnOiBhbnkpID0+IHtcclxuICAgICAgdGhpcy5lbWl0KFwibWVzc2FnZVwiLCBtc2cpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlNUX0lOSVRFRDtcclxuXHJcbiAgICAvLyBUT0RPOiBhbnkgb3RoZXIgZXZlbnRzP1xyXG4gIH1cclxuICBzZW5kKG1zZzogYW55KSB7XHJcbiAgICBpZiAodGhpcy5zdGF0ZSAhPT0gU3RhdGUuU1RfSU5JVEVEKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgbXNnICE9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgIG1zZyA9IEpTT04uc3RyaW5naWZ5KG1zZyk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnNvY2tldC5zZW5kKG1zZyk7XHJcbiAgfVxyXG5cclxuICBkaXNjb25uZWN0KCkge1xyXG4gICAgaWYgKHRoaXMuc3RhdGUgPT09IFN0YXRlLlNUX0NMT1NFRCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlNUX0NMT1NFRDtcclxuICAgIHRoaXMuc29ja2V0LmRpc2Nvbm5lY3QoKTtcclxuICB9XHJcblxyXG4gIHNlbmRCYXRjaChtc2dzOiBhbnlbXSkge1xyXG4gICAgdGhpcy5zZW5kKGVuY29kZUJhdGNoKG1zZ3MpKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVuY29kZUJhdGNoKG1zZ3M6IGFueVtdKSB7XHJcbiAgbGV0IHJlcyA9IFwiW1wiLFxyXG4gICAgbXNnO1xyXG4gIGZvciAobGV0IGkgPSAwLCBsID0gbXNncy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgIGlmIChpID4gMCkge1xyXG4gICAgICByZXMgKz0gXCIsXCI7XHJcbiAgICB9XHJcbiAgICBtc2cgPSBtc2dzW2ldO1xyXG4gICAgaWYgKHR5cGVvZiBtc2cgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgcmVzICs9IG1zZztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJlcyArPSBKU09OLnN0cmluZ2lmeShtc2cpO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXMgKz0gXCJdXCI7XHJcbiAgcmV0dXJuIHJlcztcclxufVxyXG4iXX0=