"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
var State;
(function (State) {
    State[State["ST_INITED"] = 0] = "ST_INITED";
    State[State["ST_CLOSED"] = 1] = "ST_CLOSED";
})(State || (State = {}));
class SioSocket extends events_1.EventEmitter {
    constructor(id, socket) {
        super();
        this.id = id;
        this.socket = socket;
        this.id = id;
        this.socket = socket;
        this.remoteAddress = {
            ip: socket.handshake.address.address,
            port: socket.handshake.address.port
        };
        socket.on("disconnect", this.emit.bind(this, "disconnect"));
        socket.on("error", this.emit.bind(this, "error"));
        socket.on("message", (msg) => {
            this.emit("message", msg);
        });
        this.state = State.ST_INITED;
        // TODO: any other events?
    }
    send(msg) {
        if (this.state !== State.ST_INITED) {
            return;
        }
        if (typeof msg !== "string") {
            msg = JSON.stringify(msg);
        }
        this.socket.send(msg);
    }
    disconnect() {
        if (this.state === State.ST_CLOSED) {
            return;
        }
        this.state = State.ST_CLOSED;
        this.socket.disconnect();
    }
    sendBatch(msgs) {
        this.send(encodeBatch(msgs));
    }
}
exports.default = SioSocket;
function encodeBatch(msgs) {
    let res = "[", msg;
    for (let i = 0, l = msgs.length; i < l; i++) {
        if (i > 0) {
            res += ",";
        }
        msg = msgs[i];
        if (typeof msg === "string") {
            res += msg;
        }
        else {
            res += JSON.stringify(msg);
        }
    }
    res += "]";
    return res;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lvc29ja2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2lvc29ja2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsbUNBQXNDO0FBSXRDLElBQUssS0FHSjtBQUhELFdBQUssS0FBSztJQUNSLDJDQUFhLENBQUE7SUFDYiwyQ0FBYSxDQUFBO0FBQ2YsQ0FBQyxFQUhJLEtBQUssS0FBTCxLQUFLLFFBR1Q7QUFFRCxlQUErQixTQUFRLHFCQUFZO0lBR2pELFlBQXFCLEVBQVUsRUFBVyxNQUFXO1FBQ25ELEtBQUssRUFBRSxDQUFDO1FBRFcsT0FBRSxHQUFGLEVBQUUsQ0FBUTtRQUFXLFdBQU0sR0FBTixNQUFNLENBQUs7UUFFbkQsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsYUFBYSxHQUFHO1lBQ25CLEVBQUUsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxPQUFPO1lBQ3BDLElBQUksRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJO1NBQ3BDLENBQUM7UUFFRixNQUFNLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUU1RCxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUVsRCxNQUFNLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQVEsRUFBRSxFQUFFO1lBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO1FBRTdCLDBCQUEwQjtJQUM1QixDQUFDO0lBQ0QsSUFBSSxDQUFDLEdBQVE7UUFDWCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ25DLE1BQU0sQ0FBQztRQUNULENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxPQUFPLEdBQUcsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQzVCLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLENBQUM7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQsVUFBVTtRQUNSLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDbkMsTUFBTSxDQUFDO1FBQ1QsQ0FBQztRQUVELElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUM3QixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCxTQUFTLENBQUMsSUFBVztRQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQy9CLENBQUM7Q0FDRjtBQTlDRCw0QkE4Q0M7QUFFRCxxQkFBcUIsSUFBVztJQUM5QixJQUFJLEdBQUcsR0FBRyxHQUFHLEVBQ1gsR0FBRyxDQUFDO0lBQ04sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUM1QyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNWLEdBQUcsSUFBSSxHQUFHLENBQUM7UUFDYixDQUFDO1FBQ0QsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEVBQUUsQ0FBQyxDQUFDLE9BQU8sR0FBRyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDNUIsR0FBRyxJQUFJLEdBQUcsQ0FBQztRQUNiLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLEdBQUcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLENBQUM7SUFDSCxDQUFDO0lBQ0QsR0FBRyxJQUFJLEdBQUcsQ0FBQztJQUNYLE1BQU0sQ0FBQyxHQUFHLENBQUM7QUFDYixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHV0aWwgPSByZXF1aXJlKFwidXRpbFwiKTtcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCJldmVudHNcIjtcbmltcG9ydCB7IFNvY2tldCB9IGZyb20gXCJuZXRcIjtcbmltcG9ydCB7IFJlbW90ZUFkZHJlc3MgfSBmcm9tIFwiLi4vcG9tZWxvXCI7XG5cbmVudW0gU3RhdGUge1xuICBTVF9JTklURUQgPSAwLFxuICBTVF9DTE9TRUQgPSAxXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNpb1NvY2tldCBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIHByaXZhdGUgcmVtb3RlQWRkcmVzczogUmVtb3RlQWRkcmVzcztcbiAgcHJpdmF0ZSBzdGF0ZTogU3RhdGU7XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGlkOiBudW1iZXIsIHJlYWRvbmx5IHNvY2tldDogYW55KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmlkID0gaWQ7XG4gICAgdGhpcy5zb2NrZXQgPSBzb2NrZXQ7XG4gICAgdGhpcy5yZW1vdGVBZGRyZXNzID0ge1xuICAgICAgaXA6IHNvY2tldC5oYW5kc2hha2UuYWRkcmVzcy5hZGRyZXNzLFxuICAgICAgcG9ydDogc29ja2V0LmhhbmRzaGFrZS5hZGRyZXNzLnBvcnRcbiAgICB9O1xuXG4gICAgc29ja2V0Lm9uKFwiZGlzY29ubmVjdFwiLCB0aGlzLmVtaXQuYmluZCh0aGlzLCBcImRpc2Nvbm5lY3RcIikpO1xuXG4gICAgc29ja2V0Lm9uKFwiZXJyb3JcIiwgdGhpcy5lbWl0LmJpbmQodGhpcywgXCJlcnJvclwiKSk7XG5cbiAgICBzb2NrZXQub24oXCJtZXNzYWdlXCIsIChtc2c6IGFueSkgPT4ge1xuICAgICAgdGhpcy5lbWl0KFwibWVzc2FnZVwiLCBtc2cpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlNUX0lOSVRFRDtcblxuICAgIC8vIFRPRE86IGFueSBvdGhlciBldmVudHM/XG4gIH1cbiAgc2VuZChtc2c6IGFueSkge1xuICAgIGlmICh0aGlzLnN0YXRlICE9PSBTdGF0ZS5TVF9JTklURUQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBtc2cgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1zZyA9IEpTT04uc3RyaW5naWZ5KG1zZyk7XG4gICAgfVxuICAgIHRoaXMuc29ja2V0LnNlbmQobXNnKTtcbiAgfVxuXG4gIGRpc2Nvbm5lY3QoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUgPT09IFN0YXRlLlNUX0NMT1NFRCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TVF9DTE9TRUQ7XG4gICAgdGhpcy5zb2NrZXQuZGlzY29ubmVjdCgpO1xuICB9XG5cbiAgc2VuZEJhdGNoKG1zZ3M6IGFueVtdKSB7XG4gICAgdGhpcy5zZW5kKGVuY29kZUJhdGNoKG1zZ3MpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbmNvZGVCYXRjaChtc2dzOiBhbnlbXSkge1xuICBsZXQgcmVzID0gXCJbXCIsXG4gICAgbXNnO1xuICBmb3IgKGxldCBpID0gMCwgbCA9IG1zZ3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKGkgPiAwKSB7XG4gICAgICByZXMgKz0gXCIsXCI7XG4gICAgfVxuICAgIG1zZyA9IG1zZ3NbaV07XG4gICAgaWYgKHR5cGVvZiBtc2cgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJlcyArPSBtc2c7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyArPSBKU09OLnN0cmluZ2lmeShtc2cpO1xuICAgIH1cbiAgfVxuICByZXMgKz0gXCJdXCI7XG4gIHJldHVybiByZXM7XG59XG4iXX0=