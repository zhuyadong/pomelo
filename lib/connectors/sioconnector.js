"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const siosocket_1 = require("./siosocket");
const httpServer = require("http").createServer();
const PKG_ID_BYTES = 4;
const PKG_ROUTE_LENGTH_BYTES = 1;
const PKG_HEAD_BYTES = PKG_ID_BYTES + PKG_ROUTE_LENGTH_BYTES;
let curId = 1;
class SioConnector extends events_1.EventEmitter {
    constructor(port, host, opts) {
        super();
        this.port = port;
        this.host = host;
        this.opts = opts;
        if (!(this instanceof SioConnector)) {
            return new SioConnector(port, host, opts);
        }
        this.port = port;
        this.host = host;
        this.opts = opts;
        this.heartbeats = opts.heartbeats || true;
        this.closeTimeout = opts.closeTimeout || 60;
        this.heartbeatTimeout = opts.heartbeatTimeout || 60;
        this.heartbeatInterval = opts.heartbeatInterval || 25;
    }
    start(cb) {
        // issue https://github.com/NetEase/pomelo-cn/issues/174
        let opts = {};
        if (!!this.opts) {
            opts = this.opts;
        }
        else {
            opts = {
                transports: ["websocket", "polling-xhr", "polling-jsonp", "polling"]
            };
        }
        let sio = require("socket.io")(httpServer, opts);
        let port = this.port;
        httpServer.listen(port, () => {
            console.log("sio Server listening at port %d", port);
        });
        sio.set("resource", "/socket.io");
        sio.set("transports", this.opts.transports);
        sio.set("heartbeat timeout", this.heartbeatTimeout);
        sio.set("heartbeat interval", this.heartbeatInterval);
        sio.on("connection", (socket) => {
            let siosocket = new siosocket_1.default(curId++, socket);
            this.emit("connection", siosocket);
            siosocket.on("closing", (reason) => {
                siosocket.send({ route: "onKick", reason: reason });
            });
        });
        process.nextTick(cb);
    }
    stop(force, cb) {
        this.wsocket.server.close();
        process.nextTick(cb);
    }
    encode(reqId, route, msg) {
        return SioConnector.encode(reqId, route, msg);
    }
    static encode(reqId, route, msg) {
        if (reqId) {
            return composeResponse(reqId, route, msg);
        }
        else {
            return composePush(route, msg);
        }
    }
    decode(msg) {
        return SioConnector.decode(msg);
    }
    static decode(msg) {
        let index = 0;
        let id = parseIntField(msg, index, PKG_ID_BYTES);
        index += PKG_ID_BYTES;
        let routeLen = parseIntField(msg, index, PKG_ROUTE_LENGTH_BYTES);
        let route = msg.substr(PKG_HEAD_BYTES, routeLen);
        let body = msg.substr(PKG_HEAD_BYTES + routeLen);
        return {
            id: id,
            route: route,
            body: JSON.parse(body)
        };
    }
}
exports.default = SioConnector;
function composeResponse(msgId, route, msgBody) {
    return {
        id: msgId,
        body: msgBody
    };
}
function composePush(route, msgBody) {
    return JSON.stringify({ route: route, body: msgBody });
}
function parseIntField(str, offset, len) {
    let res = 0;
    for (let i = 0; i < len; i++) {
        if (i > 0) {
            res <<= 8;
        }
        res |= str.charCodeAt(offset + i) & 0xff;
    }
    return res;
}
//# sourceMappingURL=data:application/json;base64,