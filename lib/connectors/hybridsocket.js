"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const handler = require("./common/handler");
const protocol = require("pomelo-protocol");
const logger = require("pomelo-logger").getLogger("pomelo", __filename);
const Package = protocol.Package;
var State;
(function (State) {
    State[State["ST_INITED"] = 0] = "ST_INITED";
    State[State["ST_WAIT_ACK"] = 1] = "ST_WAIT_ACK";
    State[State["ST_WORKING"] = 2] = "ST_WORKING";
    State[State["ST_CLOSED"] = 3] = "ST_CLOSED";
})(State || (State = {}));
class HybridSocket extends events_1.EventEmitter {
    constructor(id, socket) {
        super();
        this.id = id;
        this.socket = socket;
        if (!socket._socket) {
            this.remoteAddress = {
                ip: socket.address().address,
                port: socket.address().port
            };
        }
        else {
            this.remoteAddress = {
                ip: socket._socket.remoteAddress,
                port: socket._socket.remotePort
            };
        }
        let self = this;
        socket.once("close", this.emit.bind(this, "disconnect"));
        socket.on("error", this.emit.bind(this, "error"));
        socket.on("message", (msg) => {
            if (msg) {
                msg = Package.decode(msg);
                handler(self, msg);
            }
        });
        this.state = State.ST_INITED;
        // TODO: any other events?
    }
    sendRaw(msg) {
        if (this.state !== State.ST_WORKING) {
            return;
        }
        let self = this;
        this.socket.send(msg, { binary: true }, (err) => {
            if (!!err) {
                logger.error("websocket send binary data failed: %j", err.stack);
                return;
            }
        });
    }
    send(msg) {
        if (msg instanceof String) {
            msg = new Buffer(msg);
        }
        else if (!(msg instanceof Buffer)) {
            msg = new Buffer(JSON.stringify(msg));
        }
        this.sendRaw(Package.encode(Package.TYPE_DATA, msg));
    }
    sendBatch(msgs) {
        let rs = [];
        for (let i = 0; i < msgs.length; i++) {
            let src = Package.encode(Package.TYPE_DATA, msgs[i]);
            rs.push(src);
        }
        this.sendRaw(Buffer.concat(rs));
    }
    sendForce(msg) {
        if (this.state === State.ST_CLOSED) {
            return;
        }
        this.socket.send(msg, { binary: true });
    }
    handshakeResponse(resp) {
        if (this.state !== State.ST_INITED) {
            return;
        }
        this.socket.send(resp, { binary: true });
        this.state = State.ST_WAIT_ACK;
    }
    disconnect() {
        if (this.state === State.ST_CLOSED) {
            return;
        }
        this.state = State.ST_CLOSED;
        this.socket.emit("close");
        this.socket.close();
    }
}
exports.default = HybridSocket;
exports.HybridSocket = HybridSocket;
//# sourceMappingURL=data:application/json;base64,