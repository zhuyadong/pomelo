"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const net = require("net");
const tls = require("tls");
const hybridsocket_1 = require("./hybridsocket");
const switcher_1 = require("./hybrid/switcher");
const events_1 = require("events");
const Handshake = require("./commands/handshake");
const Heartbeat = require("./commands/heartbeat");
const Kick = require("./commands/kick");
const coder = require("./common/coder");
let curId = 1;
class HybridConnector extends events_1.EventEmitter {
    constructor(port, host, opts) {
        super();
        this.port = port;
        this.host = host;
        this.opts = opts;
        this.encode = coder.encode;
        this.decode = coder.decode;
        if (!(this instanceof HybridConnector)) {
            return new HybridConnector(port, host, opts);
        }
        this.opts = opts || {};
        this.port = port;
        this.host = host;
        this.useDict = opts.useDict;
        this.useProtobuf = opts.useProtobuf;
        this.handshake = new Handshake(opts);
        this.heartbeat = new Heartbeat(opts);
        this.distinctHost = opts.distinctHost;
        this.ssl = opts.ssl;
        this.switcher = null;
    }
    start(cb) {
        let pomelo = require("../pomelo");
        let app = pomelo.default.app;
        //let app = require("../pomelo").default.app as Application;
        let gensocket = (socket) => {
            let hybridsocket = new hybridsocket_1.default(curId++, socket);
            hybridsocket.on("handshake", this.handshake.handle.bind(this.handshake, hybridsocket));
            hybridsocket.on("heartbeat", this.heartbeat.handle.bind(this.heartbeat, hybridsocket));
            hybridsocket.on("disconnect", this.heartbeat.clear.bind(this.heartbeat, hybridsocket.id));
            hybridsocket.on("closing", Kick.handle.bind(null, hybridsocket));
            this.emit("connection", hybridsocket);
        };
        this.connector = app.components.__connector__.connector;
        this.dictionary = app.components.__dictionary__;
        this.protobuf = app.components.__protobuf__;
        this.decodeIO_protobuf = app.components.__decodeIO__protobuf__;
        if (!this.ssl) {
            this.listeningServer = net.createServer();
        }
        else {
            this.listeningServer = tls.createServer(this.ssl);
        }
        this.switcher = new switcher_1.default(this.listeningServer, this.opts);
        this.switcher.on("connection", (socket) => {
            gensocket(socket);
        });
        if (!!this.distinctHost) {
            this.listeningServer.listen(this.port, this.host);
        }
        else {
            this.listeningServer.listen(this.port);
        }
        process.nextTick(cb);
    }
    stop(force, cb) {
        this.switcher.close();
        this.listeningServer.close();
        process.nextTick(cb);
    }
}
HybridConnector.encode = coder.encode;
HybridConnector.decode = coder.decode;
exports.default = HybridConnector;
;
//# sourceMappingURL=data:application/json;base64,