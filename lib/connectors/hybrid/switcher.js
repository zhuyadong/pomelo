"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const wsprocessor_1 = require("./wsprocessor");
const tcpprocessor_1 = require("./tcpprocessor");
const events_1 = require("events");
const logger = require("pomelo-logger").getLogger("pomelo", __filename);
const HTTP_METHODS = ["GET", "POST", "DELETE", "PUT", "HEAD"];
var State;
(function (State) {
    State[State["ST_STARTED"] = 1] = "ST_STARTED";
    State[State["ST_CLOSED"] = 2] = "ST_CLOSED";
})(State || (State = {}));
const DEFAULT_TIMEOUT = 90;
class Switcher extends events_1.EventEmitter {
    constructor(server, opts) {
        super();
        this.server = server;
        this.server = server;
        this.wsprocessor = new wsprocessor_1.default();
        this.tcpprocessor = new tcpprocessor_1.default(opts.closeMethod);
        this.id = 1;
        this.timeout = (opts.timeout || DEFAULT_TIMEOUT) * 1000;
        this.setNoDelay = opts.setNoDelay;
        if (!opts.ssl) {
            this.server.on("connection", this.newSocket.bind(this));
        }
        else {
            this.server.on("secureConnection", this.newSocket.bind(this));
            this.server.on("clientError", (e, tlsSo) => {
                logger.warn("an ssl error occured before handshake established: ", e);
                tlsSo.destroy();
            });
        }
        this.wsprocessor.on("connection", this.emit.bind(this, "connection"));
        this.tcpprocessor.on("connection", this.emit.bind(this, "connection"));
        this.state = State.ST_STARTED;
    }
    newSocket(socket) {
        if (this.state !== State.ST_STARTED) {
            return;
        }
        socket.setTimeout(this.timeout, () => {
            logger.warn("connection is timeout without communication, the remote ip is %s && port is %s", socket.remoteAddress, socket.remotePort);
            socket.destroy();
        });
        socket.once("data", data => {
            // FIXME: handle incomplete HTTP method
            if (isHttp(data)) {
                processHttp(this, this.wsprocessor, socket, data);
            }
            else {
                if (!!this.setNoDelay) {
                    socket.setNoDelay(true);
                }
                processTcp(this, this.tcpprocessor, socket, data);
            }
        });
    }
    close() {
        if (this.state !== State.ST_STARTED) {
            return;
        }
        this.state = State.ST_CLOSED;
        this.wsprocessor.close();
        this.tcpprocessor.close();
    }
}
exports.default = Switcher;
exports.Switcher = Switcher;
function isHttp(data) {
    let head = data.toString("utf8", 0, 4);
    for (let i = 0, l = HTTP_METHODS.length; i < l; i++) {
        if (head.indexOf(HTTP_METHODS[i]) === 0) {
            return true;
        }
    }
    return false;
}
function processHttp(switcher, processor, socket, data) {
    processor.add(socket, data);
}
function processTcp(switcher, processor, socket, data) {
    processor.add(socket, data);
}
//# sourceMappingURL=data:application/json;base64,