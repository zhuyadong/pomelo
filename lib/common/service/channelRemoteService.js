"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../../index");
const logger = require("pomelo-logger").getLogger("pomelo", __filename);
class ChannelRemote {
    constructor(app) {
        this.app = app;
    }
    pushMessage(route, msg, uids, opts, cb) {
        if (!msg) {
            logger.error("Can not send empty message! route : %j, compressed msg : %j", route, msg);
            index_1.utils.invokeCallback(cb, new Error("can not send empty message."));
            return;
        }
        let connector = this.app.components.__connector__;
        let sessionService = this.app.get("sessionService");
        let fails = [];
        let sids = [];
        for (let i = 0, l = uids.length; i < l; i++) {
            let sessions = sessionService.getByUid(uids[i]);
            if (!sessions) {
                fails.push(uids[i]);
            }
            else {
                for (let j = 0, k = sessions.length; j < k; j++) {
                    sids.push(sessions[j].id);
                }
            }
        }
        logger.debug("[%s] pushMessage uids: %j, msg: %j, sids: %j", this.app.serverId, uids, msg, sids);
        connector.send(null, route, msg, sids, opts, (err) => {
            index_1.utils.invokeCallback(cb, err, fails);
        });
    }
    broadcast(route, msg, opts, cb) {
        let connector = this.app.components.__connector__;
        connector.send(null, route, msg, null, opts, cb);
    }
}
exports.ChannelRemote = ChannelRemote;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbm5lbFJlbW90ZVNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjaGFubmVsUmVtb3RlU2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUFpRDtBQUNqRCxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUV4RTtJQUNFLFlBQXFCLEdBQWdCO1FBQWhCLFFBQUcsR0FBSCxHQUFHLENBQWE7SUFBRyxDQUFDO0lBRXpDLFdBQVcsQ0FBQyxLQUFZLEVBQUUsR0FBTyxFQUFFLElBQWEsRUFBRSxJQUFRLEVBQUUsRUFBVztRQUNyRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDVCxNQUFNLENBQUMsS0FBSyxDQUNWLDZEQUE2RCxFQUM3RCxLQUFLLEVBQ0wsR0FBRyxDQUNKLENBQUM7WUFDRixhQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUM7WUFDbkUsTUFBTSxDQUFDO1FBQ1QsQ0FBQztRQUVELElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQUVsRCxJQUFJLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3BELElBQUksS0FBSyxHQUFZLEVBQUUsQ0FBQztRQUN4QixJQUFJLElBQUksR0FBWSxFQUFFLENBQUM7UUFDdkIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUM1QyxJQUFJLFFBQVEsR0FBRyxjQUFjLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hELEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDZCxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO29CQUNoRCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDNUIsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDO1FBQ0QsTUFBTSxDQUFDLEtBQUssQ0FDViw4Q0FBOEMsRUFDOUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQ2pCLElBQUksRUFDSixHQUFHLEVBQ0gsSUFBSSxDQUNMLENBQUM7UUFDRixTQUFTLENBQUMsSUFBSSxDQUFDLElBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxHQUFPLEVBQUMsRUFBRTtZQUN2RCxhQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsU0FBUyxDQUFDLEtBQVksRUFBRSxHQUFPLEVBQUUsSUFBUSxFQUFFLEVBQVc7UUFDcEQsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO1FBRWxELFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNyRCxDQUFDO0NBQ0Y7QUE5Q0Qsc0NBOENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwbGljYXRpb24sIHV0aWxzIH0gZnJvbSBcIi4uLy4uL2luZGV4XCI7XG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKFwicG9tZWxvLWxvZ2dlclwiKS5nZXRMb2dnZXIoXCJwb21lbG9cIiwgX19maWxlbmFtZSk7XG5cbmV4cG9ydCBjbGFzcyBDaGFubmVsUmVtb3RlIHtcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgYXBwOiBBcHBsaWNhdGlvbikge31cblxuICBwdXNoTWVzc2FnZShyb3V0ZTpzdHJpbmcsIG1zZzphbnksIHVpZHM6c3RyaW5nW10sIG9wdHM6YW55LCBjYjpGdW5jdGlvbikge1xuICAgIGlmICghbXNnKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoXG4gICAgICAgIFwiQ2FuIG5vdCBzZW5kIGVtcHR5IG1lc3NhZ2UhIHJvdXRlIDogJWosIGNvbXByZXNzZWQgbXNnIDogJWpcIixcbiAgICAgICAgcm91dGUsXG4gICAgICAgIG1zZ1xuICAgICAgKTtcbiAgICAgIHV0aWxzLmludm9rZUNhbGxiYWNrKGNiLCBuZXcgRXJyb3IoXCJjYW4gbm90IHNlbmQgZW1wdHkgbWVzc2FnZS5cIikpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBjb25uZWN0b3IgPSB0aGlzLmFwcC5jb21wb25lbnRzLl9fY29ubmVjdG9yX187XG5cbiAgICBsZXQgc2Vzc2lvblNlcnZpY2UgPSB0aGlzLmFwcC5nZXQoXCJzZXNzaW9uU2VydmljZVwiKTtcbiAgICBsZXQgZmFpbHM6c3RyaW5nW10gPSBbXTtcbiAgICBsZXQgc2lkczpudW1iZXJbXSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gdWlkcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGxldCBzZXNzaW9ucyA9IHNlc3Npb25TZXJ2aWNlLmdldEJ5VWlkKHVpZHNbaV0pO1xuICAgICAgaWYgKCFzZXNzaW9ucykge1xuICAgICAgICBmYWlscy5wdXNoKHVpZHNbaV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDAsIGsgPSBzZXNzaW9ucy5sZW5ndGg7IGogPCBrOyBqKyspIHtcbiAgICAgICAgICBzaWRzLnB1c2goc2Vzc2lvbnNbal0uaWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGxvZ2dlci5kZWJ1ZyhcbiAgICAgIFwiWyVzXSBwdXNoTWVzc2FnZSB1aWRzOiAlaiwgbXNnOiAlaiwgc2lkczogJWpcIixcbiAgICAgIHRoaXMuYXBwLnNlcnZlcklkLFxuICAgICAgdWlkcyxcbiAgICAgIG1zZyxcbiAgICAgIHNpZHNcbiAgICApO1xuICAgIGNvbm5lY3Rvci5zZW5kKG51bGwhLCByb3V0ZSwgbXNnLCBzaWRzLCBvcHRzLCAoZXJyOmFueSk9PiB7XG4gICAgICB1dGlscy5pbnZva2VDYWxsYmFjayhjYiwgZXJyLCBmYWlscyk7XG4gICAgfSk7XG4gIH1cblxuICBicm9hZGNhc3Qocm91dGU6c3RyaW5nLCBtc2c6YW55LCBvcHRzOmFueSwgY2I6RnVuY3Rpb24pIHtcbiAgICBsZXQgY29ubmVjdG9yID0gdGhpcy5hcHAuY29tcG9uZW50cy5fX2Nvbm5lY3Rvcl9fO1xuXG4gICAgY29ubmVjdG9yLnNlbmQobnVsbCEsIHJvdXRlLCBtc2csIG51bGwhLCBvcHRzLCBjYik7XG4gIH1cbn1cbiJdfQ==