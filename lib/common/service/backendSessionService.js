"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils = require("../../util/utils");
const EXPORTED_FIELDS = ["id", "frontendId", "uid", "settings"];
class BackendSessionService {
    constructor(app) {
        this.app = app;
        this.name = "__backendSession__";
    }
    create(opts) {
        if (!opts) {
            throw new Error("opts should not be empty.");
        }
        return new BackendSession(opts, this);
    }
    get(frontendId, sid, cb) {
        let namespace = "sys";
        let service = "sessionRemote";
        let method = "getBackendSessionBySid";
        let args = [sid];
        rpcInvoke(this.app, frontendId, namespace, service, method, args, BackendSessionCB.bind(null, this, cb));
    }
    getByUid(frontendId, uid, cb) {
        let namespace = "sys";
        let service = "sessionRemote";
        let method = "getBackendSessionBySid";
        let args = [uid];
        rpcInvoke(this.app, frontendId, namespace, service, method, args, BackendSessionCB.bind(null, this, cb));
    }
    kickBySid(frontendId, sid, reason, cb) {
        let namespace = "sys";
        let service = "sessionRemote";
        let method = "kickBySid";
        let args = [sid];
        if (typeof reason === "function") {
            cb = reason;
        }
        else {
            args.push(reason);
        }
        rpcInvoke(this.app, frontendId, namespace, service, method, args, cb);
    }
    kickByUid(frontendId, uid, reason, cb) {
        let namespace = "sys";
        let service = "sessionRemote";
        let method = "kickByUid";
        let args = [uid];
        if (typeof reason === "function") {
            cb = reason;
        }
        else {
            args.push(reason);
        }
        rpcInvoke(this.app, frontendId, namespace, service, method, args, cb);
    }
    bind(frontendId, sid, uid, cb) {
        let namespace = "sys";
        let service = "sessionRemote";
        let method = "bind";
        let args = [sid, uid];
        rpcInvoke(this.app, frontendId, namespace, service, method, args, cb);
    }
    unbind(frontendId, sid, uid, cb) {
        let namespace = "sys";
        let service = "sessionRemote";
        let method = "unbind";
        let args = [sid, uid];
        rpcInvoke(this.app, frontendId, namespace, service, method, args, cb);
    }
    push(frontendId, sid, key, value, cb) {
        let namespace = "sys";
        let service = "sessionRemote";
        let method = "push";
        let args = [sid, key, value];
        rpcInvoke(this.app, frontendId, namespace, service, method, args, cb);
    }
    pushAll(frontendId, sid, settings, cb) {
        let namespace = "sys";
        let service = "sessionRemote";
        let method = "pushAll";
        let args = [sid, settings];
        rpcInvoke(this.app, frontendId, namespace, service, method, args, cb);
    }
}
exports.BackendSessionService = BackendSessionService;
function rpcInvoke(app, serverId, namespace, service, method, args, cb) {
    app.rpcInvoke(serverId, { namespace: namespace, service: service, method: method, args: args }, cb);
}
class BackendSession {
    constructor(opts, __sessionService__) {
        this.__sessionService__ = __sessionService__;
        for (let f in opts) {
            this[f] = opts[f];
        }
    }
    bind(uid, cb) {
        this.__sessionService__.bind(this.frontendId, this.id, uid, (err) => {
            if (!err) {
                this.uid = uid;
            }
            utils.invokeCallback(cb, err);
        });
    }
    unbind(uid, cb) {
        this.__sessionService__.unbind(this.frontendId, this.id, uid, (err) => {
            if (!err) {
                delete this.uid;
            }
            utils.invokeCallback(cb, err);
        });
    }
    set(key, value) {
        this.settings[key] = value;
    }
    get(key) {
        return this.settings[key];
    }
    push(key, cb) {
        this.__sessionService__.push(this.frontendId, this.id, key, this.get(key), cb);
    }
    pushAll(cb) {
        this.__sessionService__.pushAll(this.frontendId, this.id, this.settings, cb);
    }
    export() {
        let res = {};
        for (let field of EXPORTED_FIELDS) {
            res[field] = this[field];
        }
        return res;
    }
}
exports.BackendSession = BackendSession;
function BackendSessionCB(service, cb, err, sinfo) {
    if (err) {
        utils.invokeCallback(cb, err);
        return;
    }
    if (!sinfo) {
        utils.invokeCallback(cb);
        return;
    }
    let sessions = [];
    if (Array.isArray(sinfo)) {
        // #getByUid
        for (let i = 0, k = sinfo.length; i < k; i++) {
            sessions.push(service.create(sinfo[i]));
        }
    }
    else {
        // #get
        sessions = service.create(sinfo);
    }
    utils.invokeCallback(cb, null, sessions);
}
//# sourceMappingURL=data:application/json;base64,