"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const events_1 = require("events");
const index_1 = require("../../index");
const dns_1 = require("dns");
const logger = require("pomelo-logger").getLogger("pomelo", __filename);
const FRONTEND_SESSION_FIELDS = ["id", "frontendId", "uid", "sessionService"];
const EXPORTED_SESSION_FIELDS = ["id", "frontendId", "uid", "settings"];
var State;
(function (State) {
    State[State["ST_INITED"] = 0] = "ST_INITED";
    State[State["ST_CLOSED"] = 1] = "ST_CLOSED";
})(State || (State = {}));
class Session extends events_1.EventEmitter {
    constructor(id, frontendId, _socket, _sessionService) {
        super();
        this.id = id;
        this.frontendId = frontendId;
        this._socket = _socket;
        this._sessionService = _sessionService;
        this._state = State.ST_INITED;
        this._settings = {};
    }
    get uid() {
        return this._uid;
    }
    set uid(val) {
        this._uid = val;
    }
    get socket() {
        return this._socket;
    }
    get sessionService() {
        return this._sessionService;
    }
    set sessionService(val) {
        this._sessionService = val;
    }
    get settings() {
        return this._settings;
    }
    toFrontendSession() {
        return new FrontendSession(this);
    }
    bind(uid) {
        this._uid = uid;
        this.emit("bind", uid);
    }
    unbind(uid) {
        delete this._uid;
        this.emit("unbind", uid);
    }
    set(key, val) {
        if (util_1.isObject(key)) {
            for (let i in key) {
                this._settings[i] = key[i];
            }
        }
        else {
            this._settings[key] = val;
        }
    }
    get(key) {
        return this._settings[key];
    }
    send(msg) {
        this._socket.send(msg);
    }
    sendBatch(msgs) {
        this._socket.sendBatch(msgs);
    }
    closed(reason) {
        logger.debug("session on [%s] is closed with session id: %s", this.frontendId, this.id);
        if (this._state === State.ST_CLOSED) {
            return;
        }
        this._state = State.ST_CLOSED;
        this._sessionService.remove(this.id);
        this.emit("closed", this.toFrontendSession(), reason);
        this._socket.emit("closing", reason);
        process.nextTick(() => {
            this._socket.disconnect();
        });
    }
}
exports.Session = Session;
class FrontendSession extends Session {
    constructor(_session) {
        super(_session.id, _session.frontendId, _session.socket, _session.sessionService);
        this._session = _session;
        clone(_session, this, FRONTEND_SESSION_FIELDS);
        this._settings = dclone(_session.settings);
    }
    bind(uid, cb) {
        this._sessionService.bind(this.id, uid, (err) => {
            if (!err) {
                this._uid = uid;
            }
            index_1.utils.invokeCallback(cb, err);
        });
    }
    unbind(uid, cb) {
        this._sessionService.unbind(this.id, uid, (err) => {
            if (!err) {
                delete this._uid;
            }
            index_1.utils.invokeCallback(cb, err);
        });
    }
    push(key, cb) {
        this._sessionService.import(this.id, key, this.get(key), cb);
    }
    pushAll(cb) {
        this._sessionService.importAll(this.id, this._settings, cb);
    }
    on(event, listener) {
        events_1.EventEmitter.prototype.on.call(this, event, listener);
        this._session.on(event, listener);
        return this;
    }
    export() {
        let res = {};
        clone(this, res, EXPORTED_SESSION_FIELDS);
        return res;
    }
}
exports.FrontendSession = FrontendSession;
class SessionService {
    constructor(opts) {
        this._singleSession = false;
        opts = opts || {};
        this._singleSession = opts.singleSession;
        this._sessions = {}; // sid -> session
        this._uidMap = {}; // uid -> sessions
    }
    get singleSession() {
        return this._singleSession;
    }
    get sessions() {
        return this._sessions;
    }
    get uidMap() {
        return this._uidMap;
    }
    create(sid, frontendId, socket) {
        let session = new Session(sid, frontendId, socket, this);
        this._sessions[session.id] = session;
        return session;
    }
    bind(sid, uid, cb) {
        const session = this._sessions[sid];
        if (!session) {
            process.nextTick(() => {
                cb(new Error("session does not exist, sid: " + sid));
            });
            return;
        }
        if (session.uid) {
            if (session.uid === uid) {
                // already bound with the same uid
                cb();
                return;
            }
            // already bound with other uid
            process.nextTick(() => {
                cb(new Error("session has already bind with " + session.uid));
            });
            return;
        }
        let sessions = this.uidMap[uid];
        if (this.singleSession && !!sessions) {
            process.nextTick(() => {
                cb(new Error("singleSession is enabled, and session has already bind with uid: " +
                    uid));
            });
            return;
        }
        if (!sessions) {
            sessions = this._uidMap[uid] = [];
        }
        for (let i = 0, l = sessions.length; i < l; i++) {
            // session has binded with the uid
            if (sessions[i].id === session.id) {
                process.nextTick(cb);
                return;
            }
        }
        sessions.push(session);
        session.bind(uid);
        if (cb) {
            process.nextTick(cb);
        }
    }
    unbind(sid, uid, cb) {
        const session = this.sessions[sid];
        if (!session) {
            process.nextTick(() => {
                cb(new Error("session does not exist, sid: " + sid));
            });
            return;
        }
        if (!session.uid || session.uid !== uid) {
            process.nextTick(() => {
                cb(new Error("session has not bind with " + session.uid));
            });
            return;
        }
        let sessions = this._uidMap[uid];
        let sess;
        if (sessions) {
            for (let i = 0, l = sessions.length; i < l; i++) {
                sess = sessions[i];
                if (sess.id === sid) {
                    sessions.splice(i, 1);
                    break;
                }
            }
            if (sessions.length === 0) {
                delete this._uidMap[uid];
            }
        }
        session.unbind(uid);
        if (cb) {
            process.nextTick(cb);
        }
    }
    get(sid) {
        return this._sessions[sid];
    }
    getByUid(uid) {
        return this._uidMap[uid];
    }
    remove(sid) {
        const session = this._sessions[sid];
        if (session) {
            let uid = session.uid;
            delete this._sessions[session.id];
            let sessions = this._uidMap[uid];
            if (!sessions) {
                return;
            }
            for (let i = 0, l = sessions.length; i < l; i++) {
                if (sessions[i].id === sid) {
                    sessions.splice(i, 1);
                    if (sessions.length === 0) {
                        delete this._uidMap[uid];
                    }
                    break;
                }
            }
        }
    }
    import(sid, key, value, cb) {
        const session = this.sessions[sid];
        if (!session) {
            index_1.utils.invokeCallback(cb, new Error("session does not exist, sid: " + sid));
            return;
        }
        session.set(key, value);
        index_1.utils.invokeCallback(cb);
    }
    importAll(sid, settings, cb) {
        let session = this.sessions[sid];
        if (!session) {
            index_1.utils.invokeCallback(cb, new Error("session does not exist, sid: " + sid));
            return;
        }
        for (let f in settings) {
            session.set(f, settings[f]);
        }
        index_1.utils.invokeCallback(cb);
    }
    kick(uid, reason, cb) {
        if (typeof reason === "function") {
            cb = reason;
            reason = "kick";
        }
        let sessions = this.getByUid(uid);
        if (sessions) {
            // notify client
            let sids = [];
            sessions.forEach(session => {
                sids.push(session.id);
            });
            sids.forEach(sid => {
                this._sessions[sid].closed(reason);
            });
            process.nextTick(() => {
                index_1.utils.invokeCallback(cb);
            });
        }
        else {
            process.nextTick(() => {
                index_1.utils.invokeCallback(cb);
            });
        }
    }
    kickBySessionId(sid, reason, cb) {
        if (typeof reason === "function") {
            cb = reason;
            reason = "kick";
        }
        let session = this.get(sid);
        if (session) {
            // notify client
            session.closed(reason);
            process.nextTick(() => {
                index_1.utils.invokeCallback(cb);
            });
        }
        else {
            process.nextTick(() => {
                index_1.utils.invokeCallback(cb);
            });
        }
    }
    getClientAddressBySessionId(sid) {
        let session = this.get(sid);
        if (session) {
            let socket = session.socket;
            return socket.remoteAddress;
        }
        else {
            return null;
        }
    }
    sendMessage(sid, msg) {
        let session = this.get(sid);
        if (!session) {
            logger.debug("Fail to send message for non-existing session, sid: " +
                sid +
                " msg: " +
                msg);
            return false;
        }
        session.send(msg);
        return true;
    }
    sendMessageByUid(uid, msg) {
        let sessions = this.getByUid(uid);
        if (!sessions) {
            logger.debug("fail to send message by uid for non-existing session. uid: %j", uid);
            return false;
        }
        for (let i = 0, l = sessions.length; i < l; i++) {
            sessions[i].send(msg);
        }
        return true;
    }
    forEachSession(cb) {
        for (let sid in this.sessions) {
            cb(this.sessions[sid]);
        }
    }
    forEachBindedSession(cb) {
        for (let uid in this.uidMap) {
            let sessions = this.uidMap[uid];
            for (let i = 0, l = sessions.length; i < l; i++) {
                cb(sessions[i]);
            }
        }
    }
    getSessionCount() {
        return index_1.utils.size(this.sessions);
    }
}
exports.SessionService = SessionService;
class SessionComponent {
    constructor(app, opts) {
        this.app = app;
        this.name = "__session__";
        opts = opts || {};
        this.service = new SessionService(opts);
    }
    create(sid, frontendId, socket) {
        return this.service.create(sid, frontendId, socket);
    }
    bind(sid, uid, cb) {
        this.service.bind(sid, uid, cb);
    }
    unbind(sid, uid, cb) {
        this.service.unbind(sid, uid, cb);
    }
    get(sid) {
        return this.service.get(sid);
    }
    getByUid(uid) {
        return this.service.getByUid(uid);
    }
    remove(sid) {
        this.service.remove(sid);
    }
    import(sid, key, value, cb) {
        this.service.import(sid, key, value, cb);
    }
    importAll(sid, settings, cb) {
        this.service.importAll(sid, settings, cb);
    }
    kick(uid, reason, cb) {
        this.service.kick(uid, dns_1.resolveNaptr, cb);
    }
    kickBySessionId(sid, reason, cb) {
        this.service.kickBySessionId(sid, reason, cb);
    }
    getClientAddressBySessionId(sid) {
        return this.service.getClientAddressBySessionId(sid);
    }
    sendMessage(sid, msg) {
        return this.service.sendMessage(sid, msg);
    }
    sendMessageByUid(uid, msg) {
        return this.service.sendMessageByUid(uid, msg);
    }
    forEachSession(cb) {
        this.service.forEachSession(cb);
    }
    forEachBindedSession(cb) {
        this.service.forEachBindedSession(cb);
    }
    getSessionCount() {
        return this.service.getSessionCount();
    }
}
exports.SessionComponent = SessionComponent;
function clone(src, dest, includes) {
    let f;
    for (let i = 0, l = includes.length; i < l; i++) {
        f = includes[i];
        dest[f] = src[f];
    }
}
function dclone(src) {
    let res = {};
    for (let f in src) {
        res[f] = src[f];
    }
    return res;
}
//# sourceMappingURL=data:application/json;base64,