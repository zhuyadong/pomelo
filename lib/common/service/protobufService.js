"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../../index");
const path = require("path");
const fs = require("fs");
const crypto = require("crypto");
const protobuf = require("pomelo-protobuf");
const logger = require("pomelo-logger").getLogger("pomelo", __filename);
class ProtobufComponent {
    constructor(app, opts) {
        this.app = app;
        this.name = "__protobuf__";
        opts = opts || {};
        this.watchers = {};
        this.serverProtos = {};
        this.clientProtos = {};
        this.version = "";
        let env = app.get(index_1.RESERVED.ENV);
        let originServerPath = path.join(app.base, index_1.FILEPATH.SERVER_PROTOS);
        let presentServerPath = path.join(index_1.FILEPATH.CONFIG_DIR, env, path.basename(index_1.FILEPATH.SERVER_PROTOS));
        let originClientPath = path.join(app.base, index_1.FILEPATH.CLIENT_PROTOS);
        let presentClientPath = path.join(index_1.FILEPATH.CONFIG_DIR, env, path.basename(index_1.FILEPATH.CLIENT_PROTOS));
        this.serverProtosPath =
            opts.serverProtos ||
                (fs.existsSync(originServerPath)
                    ? index_1.FILEPATH.SERVER_PROTOS
                    : presentServerPath);
        this.clientProtosPath =
            opts.clientProtos ||
                (fs.existsSync(originClientPath)
                    ? index_1.FILEPATH.CLIENT_PROTOS
                    : presentClientPath);
        this.setProtos(index_1.RESERVED.SERVER, path.join(app.base, this.serverProtosPath));
        this.setProtos(index_1.RESERVED.CLIENT, path.join(app.base, this.clientProtosPath));
        protobuf.init({
            encoderProtos: this.serverProtos,
            decoderProtos: this.clientProtos
        });
    }
    encode(key, msg) {
        return protobuf.encode(key, msg);
    }
    encode2Bytes(key, msg) {
        return protobuf.encode2Bytes(key, msg);
    }
    decode(key, msg) {
        return protobuf.decode(key, msg);
    }
    getProtos() {
        return {
            server: this.serverProtos,
            client: this.clientProtos,
            version: this.version
        };
    }
    getVersion() {
        return this.version;
    }
    setProtos(type, path) {
        if (!fs.existsSync(path)) {
            return;
        }
        if (type === index_1.RESERVED.SERVER) {
            this.serverProtos = protobuf.parse(require(path));
        }
        if (type === index_1.RESERVED.CLIENT) {
            this.clientProtos = protobuf.parse(require(path));
        }
        let oStr = JSON.stringify(this.clientProtos) + JSON.stringify(this.serverProtos);
        this.version = crypto
            .createHash("md5")
            .update(oStr)
            .digest("base64");
        //Watch file
        let watcher = fs.watch(path, this.onUpdate.bind(this, type, path));
        if (this.watchers[type]) {
            this.watchers[type].close();
        }
        this.watchers[type] = watcher;
    }
    onUpdate(type, path, event) {
        if (event !== "change") {
            return;
        }
        let self = this;
        fs.readFile(path, "utf8", (err, data) => {
            try {
                let os = protobuf.parse(JSON.parse(data));
                if (type === index_1.RESERVED.SERVER) {
                    protobuf.setEncoderProtos(os);
                    self.serverProtos = os;
                }
                else {
                    protobuf.setDecoderProtos(os);
                    self.clientProtos = os;
                }
                let oStr = JSON.stringify(self.clientProtos) + JSON.stringify(self.serverProtos);
                self.version = crypto
                    .createHash("md5")
                    .update(oStr)
                    .digest("base64");
                logger.info("change o file , type : %j, path : %j, version : %j", type, path, self.version);
            }
            catch (e) {
                logger.warn("change o file error! path : %j", path);
                logger.warn(e);
            }
        });
    }
    stop(force, cb) {
        for (let type in this.watchers) {
            this.watchers[type].close();
        }
        this.watchers = {};
        process.nextTick(cb);
    }
}
exports.ProtobufComponent = ProtobufComponent;
//# sourceMappingURL=data:application/json;base64,