"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../../index");
const logger = require("pomelo-logger").getLogger("pomelo", __filename);
const Client = require("pomelo-rpc").client;
class ProxyComponent {
    constructor(app, opts) {
        this.app = app;
        this.name = "__proxy__";
        this.opts = opts;
        this.client = genRpcClient(this.app, opts);
        this.app.event.on(index_1.events.ADD_SERVERS, this.addServers.bind(this));
        this.app.event.on(index_1.events.REMOVE_SERVERS, this.removeServers.bind(this));
        this.app.event.on(index_1.events.REPLACE_SERVERS, this.replaceServers.bind(this));
    }
    start(cb) {
        if (this.opts.enableRpcLog) {
            logger.warn("enableRpcLog is deprecated in 0.8.0, please use app.rpcFilter(pomelo.rpcFilters.rpcLog())");
        }
        let rpcBefores = this.app.get(index_1.KEYWORDS.RPC_BEFORE_FILTER);
        let rpcAfters = this.app.get(index_1.KEYWORDS.RPC_AFTER_FILTER);
        let rpcErrorHandler = this.app.get(index_1.RESERVED.RPC_ERROR_HANDLER);
        if (!!rpcBefores) {
            this.client.before(rpcBefores);
        }
        if (!!rpcAfters) {
            this.client.after(rpcAfters);
        }
        if (!!rpcErrorHandler) {
            this.client.setErrorHandler(rpcErrorHandler);
        }
        process.nextTick(cb);
    }
    afterStart(cb) {
        let self = this;
        this.app.__defineGetter__("rpc", () => {
            return self.client.proxies.user;
        });
        this.app.__defineGetter__("sysrpc", () => {
            return self.client.proxies.sys;
        });
        this.app.set("rpcInvoke", this.client.rpcInvoke.bind(this.client));
        this.client.start(cb);
    }
    addServers(servers) {
        if (!servers || !servers.length) {
            return;
        }
        genProxies(this.client, this.app, servers);
        this.client.addServers(servers);
    }
    removeServers(ids) {
        this.client.removeServers(ids);
    }
    replaceServers(servers) {
        if (!servers || !servers.length) {
            return;
        }
        // update proxies
        this.client.proxies = {};
        genProxies(this.client, this.app, servers);
        this.client.replaceServers(servers);
    }
    rpcInvoke(serverId, msg, cb) {
        this.client.rpcInvoke(serverId, msg, cb);
    }
}
exports.ProxyComponent = ProxyComponent;
function genRpcClient(app, opts) {
    opts.context = app;
    opts.routeContext = app;
    if (!!opts.rpcClient) {
        return opts.rpcClient.create(opts);
    }
    else {
        return Client.create(opts);
    }
}
function genProxies(client, app, sinfos) {
    let item;
    for (let i = 0, l = sinfos.length; i < l; i++) {
        item = sinfos[i];
        if (hasProxy(client, item)) {
            continue;
        }
        client.addProxies(getProxyRecords(app, item));
    }
}
function hasProxy(client, sinfo) {
    let proxy = client.proxies;
    return !!proxy.sys && !!proxy.sys[sinfo.serverType];
}
function getProxyRecords(app, sinfo) {
    let records = [], appBase = app.base, record;
    // sys remote service path record
    if (app.isFrontend(sinfo)) {
        record = index_1.pathUtil.getSysRemotePath("frontend");
    }
    else {
        record = index_1.pathUtil.getSysRemotePath("backend");
    }
    if (record) {
        records.push(index_1.pathUtil.remotePathRecord("sys", sinfo.serverType, record));
    }
    // user remote service path record
    record = index_1.pathUtil.getUserRemotePath(appBase, sinfo.serverType);
    if (record) {
        records.push(index_1.pathUtil.remotePathRecord("user", sinfo.serverType, record));
    }
    return records;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJveHlTZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicHJveHlTZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBUXFCO0FBQ3JCLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3hFLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFFNUM7SUFJRSxZQUFxQixHQUFnQixFQUFFLElBQVM7UUFBM0IsUUFBRyxHQUFILEdBQUcsQ0FBYTtRQUg1QixTQUFJLEdBQUcsV0FBVyxDQUFDO1FBSTFCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxNQUFNLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLGNBQU0sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsY0FBTSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3hFLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxjQUFNLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUNELEtBQUssQ0FBQyxFQUFZO1FBQ2hCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUMzQixNQUFN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Y2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEFwcGxpY2F0aW9uLFxuICBldmVudHMsXG4gIEtFWVdPUkRTLFxuICBSRVNFUlZFRCxcbiAgU2VydmVySW5mbyxcbiAgcGF0aFV0aWxcbn0gZnJvbSBcIi4uLy4uL2luZGV4XCI7XG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKFwicG9tZWxvLWxvZ2dlclwiKS5nZXRMb2dnZXIoXCJwb21lbG9cIiwgX19maWxlbmFtZSk7XG5jb25zdCBDbGllbnQgPSByZXF1aXJlKFwicG9tZWxvLXJwY1wiKS5jbGllbnQ7XG5cbmV4cG9ydCBjbGFzcyBQcm94eUNvbXBvbmVudCBpbXBsZW1lbnRzIENvbXBvbmVudCB7XG4gIHJlYWRvbmx5IG5hbWUgPSBcIl9fcHJveHlfX1wiO1xuICBwcml2YXRlIG9wdHM6IGFueTtcbiAgcHJpdmF0ZSBjbGllbnQ6IGFueTsgLy9UT0RPXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGFwcDogQXBwbGljYXRpb24sIG9wdHM6IGFueSkge1xuICAgIHRoaXMub3B0cyA9IG9wdHM7XG4gICAgdGhpcy5jbGllbnQgPSBnZW5ScGNDbGllbnQodGhpcy5hcHAsIG9wdHMpO1xuICAgIHRoaXMuYXBwLmV2ZW50Lm9uKGV2ZW50cy5BRERfU0VSVkVSUywgdGhpcy5hZGRTZXJ2ZXJzLmJpbmQodGhpcykpO1xuICAgIHRoaXMuYXBwLmV2ZW50Lm9uKGV2ZW50cy5SRU1PVkVfU0VSVkVSUywgdGhpcy5yZW1vdmVTZXJ2ZXJzLmJpbmQodGhpcykpO1xuICAgIHRoaXMuYXBwLmV2ZW50Lm9uKGV2ZW50cy5SRVBMQUNFX1NFUlZFUlMsIHRoaXMucmVwbGFjZVNlcnZlcnMuYmluZCh0aGlzKSk7XG4gIH1cbiAgc3RhcnQoY2I6IEZ1bmN0aW9uKSB7XG4gICAgaWYgKHRoaXMub3B0cy5lbmFibGVScGNMb2cpIHtcbiAgICAgIGxvZ2dlci53YXJuKFxuICAgICAgICBcImVuYWJsZVJwY0xvZyBpcyBkZXByZWNhdGVkIGluIDAuOC4wLCBwbGVhc2UgdXNlIGFwcC5ycGNGaWx0ZXIocG9tZWxvLnJwY0ZpbHRlcnMucnBjTG9nKCkpXCJcbiAgICAgICk7XG4gICAgfVxuICAgIGxldCBycGNCZWZvcmVzID0gdGhpcy5hcHAuZ2V0KEtFWVdPUkRTLlJQQ19CRUZPUkVfRklMVEVSKTtcbiAgICBsZXQgcnBjQWZ0ZXJzID0gdGhpcy5hcHAuZ2V0KEtFWVdPUkRTLlJQQ19BRlRFUl9GSUxURVIpO1xuICAgIGxldCBycGNFcnJvckhhbmRsZXIgPSB0aGlzLmFwcC5nZXQoUkVTRVJWRUQuUlBDX0VSUk9SX0hBTkRMRVIpO1xuXG4gICAgaWYgKCEhcnBjQmVmb3Jlcykge1xuICAgICAgdGhpcy5jbGllbnQuYmVmb3JlKHJwY0JlZm9yZXMpO1xuICAgIH1cbiAgICBpZiAoISFycGNBZnRlcnMpIHtcbiAgICAgIHRoaXMuY2xpZW50LmFmdGVyKHJwY0FmdGVycyk7XG4gICAgfVxuICAgIGlmICghIXJwY0Vycm9ySGFuZGxlcikge1xuICAgICAgdGhpcy5jbGllbnQuc2V0RXJyb3JIYW5kbGVyKHJwY0Vycm9ySGFuZGxlcik7XG4gICAgfVxuICAgIHByb2Nlc3MubmV4dFRpY2soY2IpO1xuICB9XG5cbiAgYWZ0ZXJTdGFydChjYjogRnVuY3Rpb24pIHtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgKDxhbnk+dGhpcy5hcHApLl9fZGVmaW5lR2V0dGVyX18oXCJycGNcIiwgKCkgPT4ge1xuICAgICAgcmV0dXJuIHNlbGYuY2xpZW50LnByb3hpZXMudXNlcjtcbiAgICB9KTtcbiAgICAoPGFueT50aGlzLmFwcCkuX19kZWZpbmVHZXR0ZXJfXyhcInN5c3JwY1wiLCAoKSA9PiB7XG4gICAgICByZXR1cm4gc2VsZi5jbGllbnQucHJveGllcy5zeXM7XG4gICAgfSk7XG4gICAgdGhpcy5hcHAuc2V0KFwicnBjSW52b2tlXCIsIHRoaXMuY2xpZW50LnJwY0ludm9rZS5iaW5kKHRoaXMuY2xpZW50KSk7XG4gICAgdGhpcy5jbGllbnQuc3RhcnQoY2IpO1xuICB9XG5cbiAgYWRkU2VydmVycyhzZXJ2ZXJzOiBTZXJ2ZXJJbmZvW10pIHtcbiAgICBpZiAoIXNlcnZlcnMgfHwgIXNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZ2VuUHJveGllcyh0aGlzLmNsaWVudCwgdGhpcy5hcHAsIHNlcnZlcnMpO1xuICAgIHRoaXMuY2xpZW50LmFkZFNlcnZlcnMoc2VydmVycyk7XG4gIH1cblxuICByZW1vdmVTZXJ2ZXJzKGlkczogc3RyaW5nW10pIHtcbiAgICB0aGlzLmNsaWVudC5yZW1vdmVTZXJ2ZXJzKGlkcyk7XG4gIH1cblxuICByZXBsYWNlU2VydmVycyhzZXJ2ZXJzOiBTZXJ2ZXJJbmZvW10pIHtcbiAgICBpZiAoIXNlcnZlcnMgfHwgIXNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIHByb3hpZXNcbiAgICB0aGlzLmNsaWVudC5wcm94aWVzID0ge307XG4gICAgZ2VuUHJveGllcyh0aGlzLmNsaWVudCwgdGhpcy5hcHAsIHNlcnZlcnMpO1xuXG4gICAgdGhpcy5jbGllbnQucmVwbGFjZVNlcnZlcnMoc2VydmVycyk7XG4gIH1cblxuICBycGNJbnZva2Uoc2VydmVySWQ6IHN0cmluZywgbXNnOiBhbnksIGNiOiBGdW5jdGlvbikge1xuICAgIHRoaXMuY2xpZW50LnJwY0ludm9rZShzZXJ2ZXJJZCwgbXNnLCBjYik7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuUnBjQ2xpZW50KGFwcDogQXBwbGljYXRpb24sIG9wdHM6IGFueSkge1xuICBvcHRzLmNvbnRleHQgPSBhcHA7XG4gIG9wdHMucm91dGVDb250ZXh0ID0gYXBwO1xuICBpZiAoISFvcHRzLnJwY0NsaWVudCkge1xuICAgIHJldHVybiBvcHRzLnJwY0NsaWVudC5jcmVhdGUob3B0cyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIENsaWVudC5jcmVhdGUob3B0cyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuUHJveGllcyhjbGllbnQ6IGFueSwgYXBwOiBBcHBsaWNhdGlvbiwgc2luZm9zOiBTZXJ2ZXJJbmZvW10pIHtcbiAgbGV0IGl0ZW07XG4gIGZvciAobGV0IGkgPSAwLCBsID0gc2luZm9zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGl0ZW0gPSBzaW5mb3NbaV07XG4gICAgaWYgKGhhc1Byb3h5KGNsaWVudCwgaXRlbSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjbGllbnQuYWRkUHJveGllcyhnZXRQcm94eVJlY29yZHMoYXBwLCBpdGVtKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzUHJveHkoY2xpZW50OiBhbnksIHNpbmZvOiBTZXJ2ZXJJbmZvKSB7XG4gIGxldCBwcm94eSA9IGNsaWVudC5wcm94aWVzO1xuICByZXR1cm4gISFwcm94eS5zeXMgJiYgISFwcm94eS5zeXNbc2luZm8uc2VydmVyVHlwZV07XG59XG5cbmZ1bmN0aW9uIGdldFByb3h5UmVjb3JkcyhhcHA6IEFwcGxpY2F0aW9uLCBzaW5mbzogU2VydmVySW5mbykge1xuICBsZXQgcmVjb3JkcyA9IFtdLFxuICAgIGFwcEJhc2UgPSBhcHAuYmFzZSxcbiAgICByZWNvcmQ7XG4gIC8vIHN5cyByZW1vdGUgc2VydmljZSBwYXRoIHJlY29yZFxuICBpZiAoYXBwLmlzRnJvbnRlbmQoc2luZm8pKSB7XG4gICAgcmVjb3JkID0gcGF0aFV0aWwuZ2V0U3lzUmVtb3RlUGF0aChcImZyb250ZW5kXCIpO1xuICB9IGVsc2Uge1xuICAgIHJlY29yZCA9IHBhdGhVdGlsLmdldFN5c1JlbW90ZVBhdGgoXCJiYWNrZW5kXCIpO1xuICB9XG4gIGlmIChyZWNvcmQpIHtcbiAgICByZWNvcmRzLnB1c2gocGF0aFV0aWwucmVtb3RlUGF0aFJlY29yZChcInN5c1wiLCBzaW5mby5zZXJ2ZXJUeXBlLCByZWNvcmQpKTtcbiAgfVxuXG4gIC8vIHVzZXIgcmVtb3RlIHNlcnZpY2UgcGF0aCByZWNvcmRcbiAgcmVjb3JkID0gcGF0aFV0aWwuZ2V0VXNlclJlbW90ZVBhdGgoYXBwQmFzZSwgc2luZm8uc2VydmVyVHlwZSk7XG4gIGlmIChyZWNvcmQpIHtcbiAgICByZWNvcmRzLnB1c2gocGF0aFV0aWwucmVtb3RlUGF0aFJlY29yZChcInVzZXJcIiwgc2luZm8uc2VydmVyVHlwZSwgcmVjb3JkKSk7XG4gIH1cblxuICByZXR1cm4gcmVjb3Jkcztcbn1cbiJdfQ==