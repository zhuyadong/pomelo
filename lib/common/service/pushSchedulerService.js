"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../../index");
const logger = require("pomelo-logger").getLogger("pomelo", __filename);
class PushSchedulerComponent {
    constructor(app, opts) {
        this.app = app;
        this.name = "__pushScheduler__";
        opts = opts || {};
        this.scheduler = this.getScheduler(app, opts);
    }
    afterStart(cb) {
        if (this.isSelectable) {
            for (let k in this.scheduler) {
                let sch = this.scheduler[k];
                if (typeof sch.start === "function") {
                    sch.start();
                }
            }
            process.nextTick(cb);
        }
        else if (typeof this.scheduler.start === "function") {
            this.scheduler.start(cb);
        }
        else {
            process.nextTick(cb);
        }
    }
    stop(force, cb) {
        if (this.isSelectable) {
            for (let k in this.scheduler) {
                let sch = this.scheduler[k];
                if (typeof sch.stop === "function") {
                    sch.stop();
                }
            }
            process.nextTick(cb);
        }
        else if (typeof this.scheduler.stop === "function") {
            this.scheduler.stop(cb);
        }
        else {
            process.nextTick(cb);
        }
    }
    schedule(reqId, route, msg, recvs, opts, cb) {
        if (this.isSelectable) {
            if (typeof this.selector === "function") {
                this.selector(reqId, route, msg, recvs, opts, (id) => {
                    if (this.scheduler[id] &&
                        typeof this.scheduler[id].schedule === "function") {
                        this.scheduler[id].schedule(reqId, route, msg, recvs, opts, cb);
                    }
                    else {
                        logger.error("invalid pushScheduler id, id: %j", id);
                    }
                });
            }
            else {
                logger.error("the selector for pushScheduler is not a function, selector: %j", this.selector);
            }
        }
        else {
            if (typeof this.scheduler.schedule === "function") {
                this.scheduler.schedule(reqId, route, msg, recvs, opts, cb);
            }
            else {
                logger.error("the scheduler does not have a schedule function, scheduler: %j", this.scheduler);
            }
        }
    }
    getScheduler(app, opts) {
        let scheduler = opts.scheduler || index_1.DirectPushSchedulerConstructor;
        if (typeof scheduler === "function") {
            return scheduler(app, opts);
        }
        if (Array.isArray(scheduler)) {
            let res = {};
            scheduler.forEach((sch) => {
                if (typeof sch.scheduler === "function") {
                    res[sch.id] = sch.scheduler(app, sch.options);
                }
                else {
                    res[sch.id] = sch.scheduler;
                }
            });
            this.isSelectable = true;
            this.selector = opts.selector;
            return res;
        }
        return scheduler;
    }
}
exports.PushSchedulerComponent = PushSchedulerComponent;
//# sourceMappingURL=data:application/json;base64,