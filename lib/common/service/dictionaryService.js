"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const crypto = require("crypto");
const index_1 = require("../../index");
const Loader = require("pomelo-loader");
class DictionaryComponent {
    constructor(app, opts) {
        this.app = app;
        this.name = "__dictionary__";
        this.dict = {};
        this.abbrs = {};
        this.userDicPath = null;
        this.version = "";
        //Set user dictionary
        let p = path.join(app.base, "/config/dictionary.json");
        if (!!opts && !!opts.dict) {
            p = opts.dict;
        }
        if (fs.existsSync(p)) {
            this.userDicPath = p;
        }
    }
    start(cb) {
        let servers = this.app.get("servers");
        let routes = [];
        //Load all the handler files
        for (let serverType in servers) {
            let p = index_1.pathUtil.getHandlerPath(this.app.base, serverType);
            if (!p) {
                continue;
            }
            let handlers = Loader.load(p, this.app);
            for (let name in handlers) {
                let handler = handlers[name];
                for (let key in handler) {
                    if (typeof handler[key] === "function") {
                        routes.push(serverType + "." + name + "." + key);
                    }
                }
            }
        }
        //Sort the route to make sure all the routers abbr are the same in all the servers
        routes.sort();
        for (let i = 0; i < routes.length; i++) {
            let abbr = i + 1;
            this.abbrs[abbr] = routes[i];
            this.dict[routes[i]] = abbr;
        }
        //Load user dictionary
        if (!!this.userDicPath) {
            let userDic = require(this.userDicPath);
            let abbr = routes.length + 1;
            for (let i = 0; i < userDic.length; i++) {
                let route = userDic[i];
                this.abbrs[abbr] = route;
                this.dict[route] = abbr;
                abbr++;
            }
        }
        this.version = crypto
            .createHash("md5")
            .update(JSON.stringify(this.dict))
            .digest("base64");
        index_1.utils.invokeCallback(cb);
    }
    getDict() {
        return this.dict;
    }
    getAbbrs() {
        return this.abbrs;
    }
    getVersion() {
        return this.version;
    }
}
exports.DictionaryComponent = DictionaryComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGljdGlvbmFyeVNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkaWN0aW9uYXJ5U2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlCQUEwQjtBQUMxQiw2QkFBOEI7QUFDOUIsaUNBQWtDO0FBRWxDLHVDQUFzRTtBQUV0RSxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFFeEM7SUFNQyxZQUFxQixHQUFnQixFQUFFLElBQVU7UUFBNUIsUUFBRyxHQUFILEdBQUcsQ0FBYTtRQUw1QixTQUFJLEdBQUcsZ0JBQWdCLENBQUM7UUFNaEMsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsV0FBVyxHQUFRLElBQUksQ0FBQztRQUM3QixJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNsQixxQkFBcUI7UUFDckIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLHlCQUF5QixDQUFDLENBQUM7UUFDdkQsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDM0IsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDZixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFDdEIsQ0FBQztJQUNGLENBQUM7SUFDRCxLQUFLLENBQUMsRUFBYTtRQUNsQixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN0QyxJQUFJLE1BQU0sR0FBYSxFQUFFLENB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LE9BQU8sQ0FBQztJQUNyQixDQUFDO0NBQ0Q7QUFwRkQsa0RBb0ZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzID0gcmVxdWlyZShcImZzXCIpO1xyXG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xyXG5pbXBvcnQgY3J5cHRvID0gcmVxdWlyZShcImNyeXB0b1wiKTtcclxuXHJcbmltcG9ydCB7IENvbXBvbmVudCwgQXBwbGljYXRpb24sIHBhdGhVdGlsLCB1dGlscyB9IGZyb20gXCIuLi8uLi9pbmRleFwiO1xyXG5cclxuY29uc3QgTG9hZGVyID0gcmVxdWlyZShcInBvbWVsby1sb2FkZXJcIik7XHJcblxyXG5leHBvcnQgY2xhc3MgRGljdGlvbmFyeUNvbXBvbmVudCBpbXBsZW1lbnRzIENvbXBvbmVudCB7XHJcblx0cmVhZG9ubHkgbmFtZSA9IFwiX19kaWN0aW9uYXJ5X19cIjtcclxuXHRyZWFkb25seSB1c2VyRGljUGF0aDogc3RyaW5nO1xyXG5cdHJlYWRvbmx5IHZlcnNpb246IHN0cmluZztcclxuXHRwcml2YXRlIGRpY3Q6IHsgW2lkeDogc3RyaW5nXTogbnVtYmVyIH07XHJcblx0cHJpdmF0ZSBhYmJyczogeyBbaWR4OiBudW1iZXJdOiBzdHJpbmcgfTtcclxuXHRjb25zdHJ1Y3RvcihyZWFkb25seSBhcHA6IEFwcGxpY2F0aW9uLCBvcHRzPzogYW55KSB7XHJcblx0XHR0aGlzLmRpY3QgPSB7fTtcclxuXHRcdHRoaXMuYWJicnMgPSB7fTtcclxuXHRcdHRoaXMudXNlckRpY1BhdGggPSA8YW55Pm51bGw7XHJcblx0XHR0aGlzLnZlcnNpb24gPSBcIlwiO1xyXG5cdFx0Ly9TZXQgdXNlciBkaWN0aW9uYXJ5XHJcblx0XHRsZXQgcCA9IHBhdGguam9pbihhcHAuYmFzZSwgXCIvY29uZmlnL2RpY3Rpb25hcnkuanNvblwiKTtcclxuXHRcdGlmICghIW9wdHMgJiYgISFvcHRzLmRpY3QpIHtcclxuXHRcdFx0cCA9IG9wdHMuZGljdDtcclxuXHRcdH1cclxuXHRcdGlmIChmcy5leGlzdHNTeW5jKHApKSB7XHJcblx0XHRcdHRoaXMudXNlckRpY1BhdGggPSBwO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRzdGFydChjYj86IEZ1bmN0aW9uKSB7XHJcblx0XHRsZXQgc2VydmVycyA9IHRoaXMuYXBwLmdldChcInNlcnZlcnNcIik7XHJcblx0XHRsZXQgcm91dGVzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuXHRcdC8vTG9hZCBhbGwgdGhlIGhhbmRsZXIgZmlsZXNcclxuXHRcdGZvciAobGV0IHNlcnZlclR5cGUgaW4gc2VydmVycykge1xyXG5cdFx0XHRsZXQgcCA9IHBhdGhVdGlsLmdldEhhbmRsZXJQYXRoKHRoaXMuYXBwLmJhc2UsIHNlcnZlclR5cGUpO1xyXG5cdFx0XHRpZiAoIXApIHtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0bGV0IGhhbmRsZXJzID0gTG9hZGVyLmxvYWQocCwgdGhpcy5hcHApO1xyXG5cclxuXHRcdFx0Zm9yIChsZXQgbmFtZSBpbiBoYW5kbGVycykge1xyXG5cdFx0XHRcdGxldCBoYW5kbGVyID0gaGFuZGxlcnNbbmFtZV07XHJcblx0XHRcdFx0Zm9yIChsZXQga2V5IGluIGhhbmRsZXIpIHtcclxuXHRcdFx0XHRcdGlmICh0eXBlb2YgaGFuZGxlcltrZXldID09PSBcImZ1bmN0aW9uXCIpIHtcclxuXHRcdFx0XHRcdFx0cm91dGVzLnB1c2goc2VydmVyVHlwZSArIFwiLlwiICsgbmFtZSArIFwiLlwiICsga2V5KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvL1NvcnQgdGhlIHJvdXRlIHRvIG1ha2Ugc3VyZSBhbGwgdGhlIHJvdXRlcnMgYWJiciBhcmUgdGhlIHNhbWUgaW4gYWxsIHRoZSBzZXJ2ZXJzXHJcblx0XHRyb3V0ZXMuc29ydCgpO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCByb3V0ZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0bGV0IGFiYnIgPSBpICsgMTtcclxuXHRcdFx0dGhpcy5hYmJyc1thYmJyXSA9IHJvdXRlc1tpXTtcclxuXHRcdFx0dGhpcy5kaWN0W3JvdXRlc1tpXV0gPSBhYmJyO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vTG9hZCB1c2VyIGRpY3Rpb25hcnlcclxuXHRcdGlmICghIXRoaXMudXNlckRpY1BhdGgpIHtcclxuXHRcdFx0bGV0IHVzZXJEaWMgPSByZXF1aXJlKHRoaXMudXNlckRpY1BhdGgpO1xyXG5cclxuXHRcdFx0bGV0IGFiYnIgPSByb3V0ZXMubGVuZ3RoICsgMTtcclxuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB1c2VyRGljLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0bGV0IHJvdXRlID0gdXNlckRpY1tpXTtcclxuXHJcblx0XHRcdFx0dGhpcy5hYmJyc1thYmJyXSA9IHJvdXRlO1xyXG5cdFx0XHRcdHRoaXMuZGljdFtyb3V0ZV0gPSBhYmJyO1xyXG5cdFx0XHRcdGFiYnIrKztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMudmVyc2lvbiEgPSBjcnlwdG9cclxuXHRcdFx0LmNyZWF0ZUhhc2goXCJtZDVcIilcclxuXHRcdFx0LnVwZGF0ZShKU09OLnN0cmluZ2lmeSh0aGlzLmRpY3QpKVxyXG5cdFx0XHQuZGlnZXN0KFwiYmFzZTY0XCIpO1xyXG5cclxuXHRcdHV0aWxzLmludm9rZUNhbGxiYWNrKGNiISk7XHJcblx0fVxyXG5cclxuXHRnZXREaWN0KCk6IFJlYWRvbmx5PHsgW2lkeDogc3RyaW5nXTogbnVtYmVyIH0+IHtcclxuXHRcdHJldHVybiB0aGlzLmRpY3Q7XHJcblx0fVxyXG5cclxuXHRnZXRBYmJycygpOiBSZWFkb25seTx7IFtpZHg6IG51bWJlcl06IHN0cmluZyB9PiB7XHJcblx0XHRyZXR1cm4gdGhpcy5hYmJycztcclxuXHR9XHJcblxyXG5cdGdldFZlcnNpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy52ZXJzaW9uO1xyXG5cdH1cclxufVxyXG4iXX0=