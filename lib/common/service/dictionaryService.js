"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const crypto = require("crypto");
const index_1 = require("../../index");
const Loader = require("pomelo-loader");
class DictionaryComponent {
    constructor(app, opts) {
        this.app = app;
        this.name = "__dictionary__";
        this.dict = {};
        this.abbrs = {};
        this.userDicPath = null;
        this.version = "";
        //Set user dictionary
        let p = path.join(app.base, "/config/dictionary.json");
        if (!!opts && !!opts.dict) {
            p = opts.dict;
        }
        if (fs.existsSync(p)) {
            this.userDicPath = p;
        }
    }
    start(cb) {
        let servers = this.app.get("servers");
        let routes = [];
        //Load all the handler files
        for (let serverType in servers) {
            let p = index_1.pathUtil.getHandlerPath(this.app.base, serverType);
            if (!p) {
                continue;
            }
            let handlers = Loader.load(p, this.app);
            for (let name in handlers) {
                let handler = handlers[name];
                for (let key in handler) {
                    if (typeof handler[key] === "function") {
                        routes.push(serverType + "." + name + "." + key);
                    }
                }
            }
        }
        //Sort the route to make sure all the routers abbr are the same in all the servers
        routes.sort();
        for (let i = 0; i < routes.length; i++) {
            let abbr = i + 1;
            this.abbrs[abbr] = routes[i];
            this.dict[routes[i]] = abbr;
        }
        //Load user dictionary
        if (!!this.userDicPath) {
            let userDic = require(this.userDicPath);
            let abbr = routes.length + 1;
            for (let i = 0; i < userDic.length; i++) {
                let route = userDic[i];
                this.abbrs[abbr] = route;
                this.dict[route] = abbr;
                abbr++;
            }
        }
        this.version = crypto
            .createHash("md5")
            .update(JSON.stringify(this.dict))
            .digest("base64");
        index_1.utils.invokeCallback(cb);
    }
    getDict() {
        return this.dict;
    }
    getAbbrs() {
        return this.abbrs;
    }
    getVersion() {
        return this.version;
    }
}
exports.DictionaryComponent = DictionaryComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGljdGlvbmFyeVNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkaWN0aW9uYXJ5U2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlCQUEwQjtBQUMxQiw2QkFBOEI7QUFDOUIsaUNBQWtDO0FBRWxDLHVDQUFzRTtBQUV0RSxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFFeEM7SUFNQyxZQUFxQixHQUFnQixFQUFFLElBQVU7UUFBNUIsUUFBRyxHQUFILEdBQUcsQ0FBYTtRQUw1QixTQUFJLEdBQUcsZ0JBQWdCLENBQUM7UUFNaEMsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsV0FBVyxHQUFRLElBQUksQ0FBQztRQUM3QixJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNsQixxQkFBcUI7UUFDckIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLHlCQUF5QixDQUFDLENBQUM7UUFDdkQsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDM0IsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDZixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFDdEIsQ0FBQztJQUNGLENBQUM7SUFDRCxLQUFLLENBQUMsRUFBYTtRQUNsQixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN0QyxJQUFJLE1BQU0sR0FBYSxFQUFFLENB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LE9BQU8sQ0FBQztJQUNyQixDQUFDO0NBQ0Q7QUFwRkQsa0RBb0ZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcbmltcG9ydCBjcnlwdG8gPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEFwcGxpY2F0aW9uLCBwYXRoVXRpbCwgdXRpbHMgfSBmcm9tIFwiLi4vLi4vaW5kZXhcIjtcblxuY29uc3QgTG9hZGVyID0gcmVxdWlyZShcInBvbWVsby1sb2FkZXJcIik7XG5cbmV4cG9ydCBjbGFzcyBEaWN0aW9uYXJ5Q29tcG9uZW50IGltcGxlbWVudHMgQ29tcG9uZW50IHtcblx0cmVhZG9ubHkgbmFtZSA9IFwiX19kaWN0aW9uYXJ5X19cIjtcblx0cmVhZG9ubHkgdXNlckRpY1BhdGg6IHN0cmluZztcblx0cmVhZG9ubHkgdmVyc2lvbjogc3RyaW5nO1xuXHRwcml2YXRlIGRpY3Q6IHsgW2lkeDogc3RyaW5nXTogbnVtYmVyIH07XG5cdHByaXZhdGUgYWJicnM6IHsgW2lkeDogbnVtYmVyXTogc3RyaW5nIH07XG5cdGNvbnN0cnVjdG9yKHJlYWRvbmx5IGFwcDogQXBwbGljYXRpb24sIG9wdHM/OiBhbnkpIHtcblx0XHR0aGlzLmRpY3QgPSB7fTtcblx0XHR0aGlzLmFiYnJzID0ge307XG5cdFx0dGhpcy51c2VyRGljUGF0aCA9IDxhbnk+bnVsbDtcblx0XHR0aGlzLnZlcnNpb24gPSBcIlwiO1xuXHRcdC8vU2V0IHVzZXIgZGljdGlvbmFyeVxuXHRcdGxldCBwID0gcGF0aC5qb2luKGFwcC5iYXNlLCBcIi9jb25maWcvZGljdGlvbmFyeS5qc29uXCIpO1xuXHRcdGlmICghIW9wdHMgJiYgISFvcHRzLmRpY3QpIHtcblx0XHRcdHAgPSBvcHRzLmRpY3Q7XG5cdFx0fVxuXHRcdGlmIChmcy5leGlzdHNTeW5jKHApKSB7XG5cdFx0XHR0aGlzLnVzZXJEaWNQYXRoID0gcDtcblx0XHR9XG5cdH1cblx0c3RhcnQoY2I/OiBGdW5jdGlvbikge1xuXHRcdGxldCBzZXJ2ZXJzID0gdGhpcy5hcHAuZ2V0KFwic2VydmVyc1wiKTtcblx0XHRsZXQgcm91dGVzOiBzdHJpbmdbXSA9IFtdO1xuXG5cdFx0Ly9Mb2FkIGFsbCB0aGUgaGFuZGxlciBmaWxlc1xuXHRcdGZvciAobGV0IHNlcnZlclR5cGUgaW4gc2VydmVycykge1xuXHRcdFx0bGV0IHAgPSBwYXRoVXRpbC5nZXRIYW5kbGVyUGF0aCh0aGlzLmFwcC5iYXNlLCBzZXJ2ZXJUeXBlKTtcblx0XHRcdGlmICghcCkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0bGV0IGhhbmRsZXJzID0gTG9hZGVyLmxvYWQocCwgdGhpcy5hcHApO1xuXG5cdFx0XHRmb3IgKGxldCBuYW1lIGluIGhhbmRsZXJzKSB7XG5cdFx0XHRcdGxldCBoYW5kbGVyID0gaGFuZGxlcnNbbmFtZV07XG5cdFx0XHRcdGZvciAobGV0IGtleSBpbiBoYW5kbGVyKSB7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBoYW5kbGVyW2tleV0gPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdFx0cm91dGVzLnB1c2goc2VydmVyVHlwZSArIFwiLlwiICsgbmFtZSArIFwiLlwiICsga2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvL1NvcnQgdGhlIHJvdXRlIHRvIG1ha2Ugc3VyZSBhbGwgdGhlIHJvdXRlcnMgYWJiciBhcmUgdGhlIHNhbWUgaW4gYWxsIHRoZSBzZXJ2ZXJzXG5cdFx0cm91dGVzLnNvcnQoKTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHJvdXRlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0bGV0IGFiYnIgPSBpICsgMTtcblx0XHRcdHRoaXMuYWJicnNbYWJicl0gPSByb3V0ZXNbaV07XG5cdFx0XHR0aGlzLmRpY3Rbcm91dGVzW2ldXSA9IGFiYnI7XG5cdFx0fVxuXG5cdFx0Ly9Mb2FkIHVzZXIgZGljdGlvbmFyeVxuXHRcdGlmICghIXRoaXMudXNlckRpY1BhdGgpIHtcblx0XHRcdGxldCB1c2VyRGljID0gcmVxdWlyZSh0aGlzLnVzZXJEaWNQYXRoKTtcblxuXHRcdFx0bGV0IGFiYnIgPSByb3V0ZXMubGVuZ3RoICsgMTtcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdXNlckRpYy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRsZXQgcm91dGUgPSB1c2VyRGljW2ldO1xuXG5cdFx0XHRcdHRoaXMuYWJicnNbYWJicl0gPSByb3V0ZTtcblx0XHRcdFx0dGhpcy5kaWN0W3JvdXRlXSA9IGFiYnI7XG5cdFx0XHRcdGFiYnIrKztcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLnZlcnNpb24hID0gY3J5cHRvXG5cdFx0XHQuY3JlYXRlSGFzaChcIm1kNVwiKVxuXHRcdFx0LnVwZGF0ZShKU09OLnN0cmluZ2lmeSh0aGlzLmRpY3QpKVxuXHRcdFx0LmRpZ2VzdChcImJhc2U2NFwiKTtcblxuXHRcdHV0aWxzLmludm9rZUNhbGxiYWNrKGNiISk7XG5cdH1cblxuXHRnZXREaWN0KCk6IFJlYWRvbmx5PHsgW2lkeDogc3RyaW5nXTogbnVtYmVyIH0+IHtcblx0XHRyZXR1cm4gdGhpcy5kaWN0O1xuXHR9XG5cblx0Z2V0QWJicnMoKTogUmVhZG9ubHk8eyBbaWR4OiBudW1iZXJdOiBzdHJpbmcgfT4ge1xuXHRcdHJldHVybiB0aGlzLmFiYnJzO1xuXHR9XG5cblx0Z2V0VmVyc2lvbigpIHtcblx0XHRyZXR1cm4gdGhpcy52ZXJzaW9uO1xuXHR9XG59XG4iXX0=