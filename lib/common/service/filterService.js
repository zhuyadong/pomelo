"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logger = require("pomelo-logger").getLogger("pomelo", __filename);
class FilterService {
    constructor() {
        this.name = "filter";
        this._befores = [];
        this._afters = [];
    }
    before(filter) {
        this._befores.push(filter);
    }
    after(filter) {
        this._afters.unshift(filter);
    }
    beforeFilter(msg, session, cb) {
        let index = 0;
        let next = (err, resp, opts) => {
            if (err || index >= this._befores.length) {
                cb(err, resp, opts);
                return;
            }
            let handler = this._befores[index++];
            if (typeof handler === "function") {
                handler(msg, session, next);
            }
            else if (typeof handler.before === "function") {
                handler.before(msg, session, next);
            }
            else {
                logger.error("meet invalid before filter, handler or handler.before should be function.");
                next(new Error("invalid before filter."));
            }
        }; //end of next
        next();
    }
    afterFilter(err, msg, session, resp, cb) {
        let index = 0;
        let next = (err) => {
            //if done
            if (index >= this._afters.length) {
                cb(err);
                return;
            }
            let handler = this._afters[index++];
            if (typeof handler === "function") {
                handler(err, msg, session, resp, next);
            }
            else if (typeof handler.after === "function") {
                handler.after(err, msg, session, resp, next);
            }
            else {
                logger.error("meet invalid after filter, handler or handler.after should be function.");
                next(new Error("invalid after filter."));
            }
        }; //end of next
        next(err);
    }
}
exports.FilterService = FilterService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyU2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZpbHRlclNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFJQSxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUt4RTtJQUlFO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFvQjtRQUN6QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQW1CO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxZQUFZLENBQUMsR0FBUSxFQUFFLE9BQXdCLEVBQUUsRUFBWTtRQUMzRCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZCxJQUFJLElBQUksR0FBRyxDQUFDLEdBQVMsRUFBRSxJQUFVLEVBQUUsSUFBVSxFQUFFLEVBQUU7WUFDL0MsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ3pDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUNwQixNQUFNLENBQUM7WUFDVCxDQUFDO1lBRUQsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQ3JDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sT0FBTyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzlCLENBQUM7WUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxPQUFPLENBQUMsTUFBTSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hELE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNyQyxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sTUFBTSxDQUFDLEtBQUssQ0FDViwyRUFBMkUsQ0FDNUUsQ0FBQztnQkFDRixJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFDO1lBQzVDLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQyxhQUFhO1FBRWhCLElBQUksRUFBRSxDQUFDO0lBQ1QsQ0FBQztJQUVELFdBQVcsQ0FBQyxHQUFRLEVBQUUsR0FBUSxFQUFFLE9BQXdCLEVBQUUsSUFBUyxFQUFFLEVBQVk7UUFDL0UsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxJQUFJLEdBQUcsQ0FBQyxHQUFRLEVBQUUsRUFBRTtZQUN0QixTQUFTO1lBQ1QsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDakMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNSLE1BQU0sQ0FBQztZQUNULENBQUM7WUFFRCxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDcEMsRUFBRSxDQUFDLENBQUMsT0FBTyxPQUFPLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQztnQkFDbEMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN6QyxDQUFDO1lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sT0FBTyxDQUFDLEtBQUssS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDO2dCQUMvQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUMvQyxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sTUFBTSxDQUFDLEtBQUssQ0FDVix5RUFBeUUsQ0FDMUUsQ0FBQztnQkFDRixJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO1lBQzNDLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQyxhQUFhO1FBRWhCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNaLENBQUM7Q0FDRjtBQWxFRCxzQ0FrRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZXNzaW9uLCBGcm9udGVuZFNlc3Npb24gfSBmcm9tIFwiLi9zZXNzaW9uU2VydmljZVwiO1xyXG5pbXBvcnQgeyBGaWx0ZXIsIEJlZm9yZUZpbHRlckZ1bmMsIEFmdGVyRmlsdGVyRnVuYyB9IGZyb20gXCIuLi8uLi9hcHBsaWNhdGlvblwiO1xyXG5pbXBvcnQgeyBCYWNrZW5kU2Vzc2lvbiB9IGZyb20gXCIuL2JhY2tlbmRTZXNzaW9uU2VydmljZVwiO1xyXG5cclxuY29uc3QgbG9nZ2VyID0gcmVxdWlyZShcInBvbWVsby1sb2dnZXJcIikuZ2V0TG9nZ2VyKFwicG9tZWxvXCIsIF9fZmlsZW5hbWUpO1xyXG5cclxuZXhwb3J0IHR5cGUgQmVmb3JlSGFubGVyID0gRmlsdGVyIHwgQmVmb3JlRmlsdGVyRnVuYztcclxuZXhwb3J0IHR5cGUgQWZ0ZXJIYW5sZXIgPSBGaWx0ZXIgfCBBZnRlckZpbHRlckZ1bmM7XHJcblxyXG5leHBvcnQgY2xhc3MgRmlsdGVyU2VydmljZSB7XHJcbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xyXG4gIHByaXZhdGUgX2JlZm9yZXM6IEJlZm9yZUhhbmxlcltdO1xyXG4gIHByaXZhdGUgX2FmdGVyczogQWZ0ZXJIYW5sZXJbXTtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMubmFtZSA9IFwiZmlsdGVyXCI7XHJcbiAgICB0aGlzLl9iZWZvcmVzID0gW107XHJcbiAgICB0aGlzLl9hZnRlcnMgPSBbXTtcclxuICB9XHJcblxyXG4gIGJlZm9yZShmaWx0ZXI6IEJlZm9yZUhhbmxlcikge1xyXG4gICAgdGhpcy5fYmVmb3Jlcy5wdXNoKGZpbHRlcik7XHJcbiAgfVxyXG5cclxuICBhZnRlcihmaWx0ZXI6IEFmdGVySGFubGVyKSB7XHJcbiAgICB0aGlzLl9hZnRlcnMudW5zaGlmdChmaWx0ZXIpO1xyXG4gIH1cclxuXHJcbiAgYmVmb3JlRmlsdGVyKG1zZzogYW55LCBzZXNzaW9uOiBGcm9udGVuZFNlc3Npb24sIGNiOiBGdW5jdGlvbikge1xyXG4gICAgbGV0IGluZGV4ID0gMDtcclxuICAgIGxldCBuZXh0ID0gKGVycj86IGFueSwgcmVzcD86IGFueSwgb3B0cz86IGFueSkgPT4ge1xyXG4gICAgICBpZiAoZXJyIHx8IGluZGV4ID49IHRoaXMuX2JlZm9yZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgY2IoZXJyLCByZXNwLCBvcHRzKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBoYW5kbGVyID0gdGhpcy5fYmVmb3Jlc1tpbmRleCsrXTtcclxuICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICBoYW5kbGVyKG1zZywgc2Vzc2lvbiwgbmV4dCk7XHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGhhbmRsZXIuYmVmb3JlID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICBoYW5kbGVyLmJlZm9yZShtc2csIHNlc3Npb24sIG5leHQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxvZ2dlci5lcnJvcihcclxuICAgICAgICAgIFwibWVldCBpbnZhbGlkIGJlZm9yZSBmaWx0ZXIsIGhhbmRsZXIgb3IgaGFuZGxlci5iZWZvcmUgc2hvdWxkIGJlIGZ1bmN0aW9uLlwiXHJcbiAgICAgICAgKTtcclxuICAgICAgICBuZXh0KG5ldyBFcnJvcihcImludmFsaWQgYmVmb3JlIGZpbHRlci5cIikpO1xyXG4gICAgICB9XHJcbiAgICB9OyAvL2VuZCBvZiBuZXh0XHJcblxyXG4gICAgbmV4dCgpO1xyXG4gIH1cclxuXHJcbiAgYWZ0ZXJGaWx0ZXIoZXJyOiBhbnksIG1zZzogYW55LCBzZXNzaW9uOiBGcm9udGVuZFNlc3Npb24sIHJlc3A6IGFueSwgY2I6IEZ1bmN0aW9uKSB7XHJcbiAgICBsZXQgaW5kZXggPSAwO1xyXG4gICAgbGV0IG5leHQgPSAoZXJyOiBhbnkpID0+IHtcclxuICAgICAgLy9pZiBkb25lXHJcbiAgICAgIGlmIChpbmRleCA+PSB0aGlzLl9hZnRlcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgY2IoZXJyKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBoYW5kbGVyID0gdGhpcy5fYWZ0ZXJzW2luZGV4KytdO1xyXG4gICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgIGhhbmRsZXIoZXJyLCBtc2csIHNlc3Npb24sIHJlc3AsIG5leHQpO1xyXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBoYW5kbGVyLmFmdGVyID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICBoYW5kbGVyLmFmdGVyKGVyciwgbXNnLCBzZXNzaW9uLCByZXNwLCBuZXh0KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsb2dnZXIuZXJyb3IoXHJcbiAgICAgICAgICBcIm1lZXQgaW52YWxpZCBhZnRlciBmaWx0ZXIsIGhhbmRsZXIgb3IgaGFuZGxlci5hZnRlciBzaG91bGQgYmUgZnVuY3Rpb24uXCJcclxuICAgICAgICApO1xyXG4gICAgICAgIG5leHQobmV3IEVycm9yKFwiaW52YWxpZCBhZnRlciBmaWx0ZXIuXCIpKTtcclxuICAgICAgfVxyXG4gICAgfTsgLy9lbmQgb2YgbmV4dFxyXG5cclxuICAgIG5leHQoZXJyKTtcclxuICB9XHJcbn1cclxuIl19