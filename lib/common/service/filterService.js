"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logger = require("pomelo-logger").getLogger("pomelo", __filename);
class FilterService {
    constructor() {
        this.name = "filter";
        this._befores = [];
        this._afters = [];
    }
    before(filter) {
        this._befores.push(filter);
    }
    after(filter) {
        this._afters.unshift(filter);
    }
    beforeFilter(msg, session, cb) {
        let index = 0;
        let next = (err, resp, opts) => {
            if (err || index >= this._befores.length) {
                cb(err, resp, opts);
                return;
            }
            let handler = this._befores[index++];
            if (typeof handler === "function") {
                handler(msg, session, next);
            }
            else if (typeof handler.before === "function") {
                handler.before(msg, session, next);
            }
            else {
                logger.error("meet invalid before filter, handler or handler.before should be function.");
                next(new Error("invalid before filter."));
            }
        }; //end of next
        next();
    }
    afterFilter(err, msg, session, resp, cb) {
        let index = 0;
        let next = (err) => {
            //if done
            if (index >= this._afters.length) {
                cb(err);
                return;
            }
            let handler = this._afters[index++];
            if (typeof handler === "function") {
                handler(err, msg, session, resp, next);
            }
            else if (typeof handler.after === "function") {
                handler.after(err, msg, session, resp, next);
            }
            else {
                logger.error("meet invalid after filter, handler or handler.after should be function.");
                next(new Error("invalid after filter."));
            }
        }; //end of next
        next(err);
    }
}
exports.FilterService = FilterService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyU2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZpbHRlclNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFJQSxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUt4RTtJQUlFO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFvQjtRQUN6QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQW1CO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxZQUFZLENBQUMsR0FBUSxFQUFFLE9BQXVDLEVBQUUsRUFBWTtRQUMxRSxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZCxJQUFJLElBQUksR0FBRyxDQUFDLEdBQVMsRUFBRSxJQUFVLEVBQUUsSUFBVSxFQUFFLEVBQUU7WUFDL0MsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ3pDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUNwQixNQUFNLENBQUM7WUFDVCxDQUFDO1lBRUQsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQ3JDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sT0FBTyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzlCLENBQUM7WUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxPQUFPLENBQUMsTUFBTSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hELE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNyQyxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sTUFBTSxDQUFDLEtBQUssQ0FDViwyRUFBMkUsQ0FDNUUsQ0FBQztnQkFDRixJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFDO1lBQzVDLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQyxhQUFhO1FBRWhCLElBQUksRUFBRSxDQUFDO0lBQ1QsQ0FBQztJQUVELFdBQVcsQ0FBQyxHQUFRLEVBQUUsR0FBUSxFQUFFLE9BQXVDLEVBQUUsSUFBUyxFQUFFLEVBQVk7UUFDOUYsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxJQUFJLEdBQUcsQ0FBQyxHQUFRLEVBQUUsRUFBRTtZQUN0QixTQUFTO1lBQ1QsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDakMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNSLE1BQU0sQ0FBQztZQUNULENBQUM7WUFFRCxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDcEMsRUFBRSxDQUFDLENBQUMsT0FBTyxPQUFPLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQztnQkFDbEMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN6QyxDQUFDO1lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sT0FBTyxDQUFDLEtBQUssS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDO2dCQUMvQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUMvQyxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sTUFBTSxDQUFDLEtBQUssQ0FDVix5RUFBeUUsQ0FDMUUsQ0FBQztnQkFDRixJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO1lBQzNDLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQyxhQUFhO1FBRWhCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNaLENBQUM7Q0FDRjtBQWxFRCxzQ0FrRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZXNzaW9uLCBGcm9udGVuZFNlc3Npb24gfSBmcm9tIFwiLi9zZXNzaW9uU2VydmljZVwiO1xyXG5pbXBvcnQgeyBGaWx0ZXIsIEJlZm9yZUZpbHRlckZ1bmMsIEFmdGVyRmlsdGVyRnVuYyB9IGZyb20gXCIuLi8uLi9hcHBsaWNhdGlvblwiO1xyXG5pbXBvcnQgeyBCYWNrZW5kU2Vzc2lvbiB9IGZyb20gJy4vYmFja2VuZFNlc3Npb25TZXJ2aWNlJztcclxuXHJcbmNvbnN0IGxvZ2dlciA9IHJlcXVpcmUoXCJwb21lbG8tbG9nZ2VyXCIpLmdldExvZ2dlcihcInBvbWVsb1wiLCBfX2ZpbGVuYW1lKTtcclxuXHJcbmV4cG9ydCB0eXBlIEJlZm9yZUhhbmxlciA9IEZpbHRlciB8IEJlZm9yZUZpbHRlckZ1bmM7XHJcbmV4cG9ydCB0eXBlIEFmdGVySGFubGVyID0gRmlsdGVyIHwgQWZ0ZXJGaWx0ZXJGdW5jO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZpbHRlclNlcnZpY2Uge1xyXG4gIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcclxuICBwcml2YXRlIF9iZWZvcmVzOiBCZWZvcmVIYW5sZXJbXTtcclxuICBwcml2YXRlIF9hZnRlcnM6IEFmdGVySGFubGVyW107XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLm5hbWUgPSBcImZpbHRlclwiO1xyXG4gICAgdGhpcy5fYmVmb3JlcyA9IFtdO1xyXG4gICAgdGhpcy5fYWZ0ZXJzID0gW107XHJcbiAgfVxyXG5cclxuICBiZWZvcmUoZmlsdGVyOiBCZWZvcmVIYW5sZXIpIHtcclxuICAgIHRoaXMuX2JlZm9yZXMucHVzaChmaWx0ZXIpO1xyXG4gIH1cclxuXHJcbiAgYWZ0ZXIoZmlsdGVyOiBBZnRlckhhbmxlcikge1xyXG4gICAgdGhpcy5fYWZ0ZXJzLnVuc2hpZnQoZmlsdGVyKTtcclxuICB9XHJcblxyXG4gIGJlZm9yZUZpbHRlcihtc2c6IGFueSwgc2Vzc2lvbjogRnJvbnRlbmRTZXNzaW9ufEJhY2tlbmRTZXNzaW9uLCBjYjogRnVuY3Rpb24pIHtcclxuICAgIGxldCBpbmRleCA9IDA7XHJcbiAgICBsZXQgbmV4dCA9IChlcnI/OiBhbnksIHJlc3A/OiBhbnksIG9wdHM/OiBhbnkpID0+IHtcclxuICAgICAgaWYgKGVyciB8fCBpbmRleCA+PSB0aGlzLl9iZWZvcmVzLmxlbmd0aCkge1xyXG4gICAgICAgIGNiKGVyciwgcmVzcCwgb3B0cyk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgaGFuZGxlciA9IHRoaXMuX2JlZm9yZXNbaW5kZXgrK107XHJcbiAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgaGFuZGxlcihtc2csIHNlc3Npb24sIG5leHQpO1xyXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBoYW5kbGVyLmJlZm9yZSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgaGFuZGxlci5iZWZvcmUobXNnLCBzZXNzaW9uLCBuZXh0KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsb2dnZXIuZXJyb3IoXHJcbiAgICAgICAgICBcIm1lZXQgaW52YWxpZCBiZWZvcmUgZmlsdGVyLCBoYW5kbGVyIG9yIGhhbmRsZXIuYmVmb3JlIHNob3VsZCBiZSBmdW5jdGlvbi5cIlxyXG4gICAgICAgICk7XHJcbiAgICAgICAgbmV4dChuZXcgRXJyb3IoXCJpbnZhbGlkIGJlZm9yZSBmaWx0ZXIuXCIpKTtcclxuICAgICAgfVxyXG4gICAgfTsgLy9lbmQgb2YgbmV4dFxyXG5cclxuICAgIG5leHQoKTtcclxuICB9XHJcblxyXG4gIGFmdGVyRmlsdGVyKGVycjogYW55LCBtc2c6IGFueSwgc2Vzc2lvbjogRnJvbnRlbmRTZXNzaW9ufEJhY2tlbmRTZXNzaW9uLCByZXNwOiBhbnksIGNiOiBGdW5jdGlvbikge1xyXG4gICAgbGV0IGluZGV4ID0gMDtcclxuICAgIGxldCBuZXh0ID0gKGVycjogYW55KSA9PiB7XHJcbiAgICAgIC8vaWYgZG9uZVxyXG4gICAgICBpZiAoaW5kZXggPj0gdGhpcy5fYWZ0ZXJzLmxlbmd0aCkge1xyXG4gICAgICAgIGNiKGVycik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgaGFuZGxlciA9IHRoaXMuX2FmdGVyc1tpbmRleCsrXTtcclxuICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICBoYW5kbGVyKGVyciwgbXNnLCBzZXNzaW9uLCByZXNwLCBuZXh0KTtcclxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaGFuZGxlci5hZnRlciA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgaGFuZGxlci5hZnRlcihlcnIsIG1zZywgc2Vzc2lvbiwgcmVzcCwgbmV4dCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbG9nZ2VyLmVycm9yKFxyXG4gICAgICAgICAgXCJtZWV0IGludmFsaWQgYWZ0ZXIgZmlsdGVyLCBoYW5kbGVyIG9yIGhhbmRsZXIuYWZ0ZXIgc2hvdWxkIGJlIGZ1bmN0aW9uLlwiXHJcbiAgICAgICAgKTtcclxuICAgICAgICBuZXh0KG5ldyBFcnJvcihcImludmFsaWQgYWZ0ZXIgZmlsdGVyLlwiKSk7XHJcbiAgICAgIH1cclxuICAgIH07IC8vZW5kIG9mIG5leHRcclxuXHJcbiAgICBuZXh0KGVycik7XHJcbiAgfVxyXG59XHJcbiJdfQ==