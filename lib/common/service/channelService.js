"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("../..");
const utils_1 = require("../../util/utils");
const countDownLatch_1 = require("../../util/countDownLatch");
const logger = require("pomelo-logger").getLogger("pomelo", __filename);
var State;
(function (State) {
    State[State["ST_INITED"] = 0] = "ST_INITED";
    State[State["ST_DESTROYED"] = 1] = "ST_DESTROYED";
})(State || (State = {}));
class ChannelService {
    constructor(app, opts) {
        this.app = app;
        opts = opts || {};
        this._channels = {};
        this.name = '__channel__';
        this.prefix = opts.prefix;
        this.store = opts.store;
        this.broadcastFilter = opts.broadcastFilter;
        this.channelRemote = new __1.ChannelRemote(app);
    }
    get channels() {
        return this._channels;
    }
    start(cb) {
        restoreChannel(this, cb);
    }
    createChannel(name) {
        if (this._channels[name]) {
            return this._channels[name];
        }
        let c = new Channel(name, this);
        addToStore(this, genKey(this), genKey(this, name));
        this._channels[name] = c;
        return c;
    }
    getChannel(name, create) {
        let channel = this.channels[name];
        if (!channel && !!create) {
            channel = this.channels[name] = new Channel(name, this);
            addToStore(this, genKey(this), genKey(this, name));
        }
        return channel;
    }
    destroyChannel(name) {
        delete this.channels[name];
        removeFromStore(this, genKey(this), genKey(this, name));
        removeAllFromStore(this, genKey(this, name));
    }
    //TODO: 5?
    pushMessageByUids(route, msg, uids, opts, cb) {
        if (typeof route !== "string") {
            cb = opts;
            opts = uids;
            uids = msg;
            msg = route;
            route = msg.route;
        }
        if (!cb && typeof opts === "function") {
            cb = opts;
            opts = {};
        }
        if (!uids || uids.length === 0) {
            utils_1.invokeCallback(cb, new Error("uids should not be empty"));
            return;
        }
        let groups = {}, record;
        for (let i = 0, l = uids.length; i < l; i++) {
            record = uids[i];
            add(record.uid, record.sid, groups);
        }
        sendMessageByGroup(this, route, msg, groups, opts, cb);
    }
    broadcast(stype, route, msg, opts, cb) {
        let app = this.app;
        let namespace = "sys";
        let service = "channelRemote";
        let method = "broadcast";
        let servers = app.getServersByType(stype);
        if (!servers || servers.length === 0) {
            // server list is empty
            utils_1.invokeCallback(cb);
            return;
        }
        let count = servers.length;
        let successFlag = false;
        let latch = countDownLatch_1.createCountDownLatch(count, {}, () => {
            if (!successFlag) {
                utils_1.invokeCallback(cb, new Error("broadcast fails"));
                return;
            }
            utils_1.invokeCallback(cb, null);
        });
        let genCB = (serverId) => {
            return (err) => {
                if (err) {
                    logger.error("[broadcast] fail to push message to serverId: " +
                        serverId +
                        ", err:" +
                        err.stack);
                    latch.done();
                    return;
                }
                successFlag = true;
                latch.done();
            };
        };
        let self = this;
        let sendMessage = (serverId) => {
            return (() => {
                if (serverId === app.serverId) {
                    self.channelRemote[method](route, msg, opts, genCB());
                }
                else {
                    app.rpcInvoke(serverId, {
                        namespace: namespace,
                        service: service,
                        method: method,
                        args: [route, msg, opts]
                    }, genCB(serverId));
                }
            })();
        };
        opts = { type: "broadcast", userOptions: opts || {} };
        // for compatiblity
        opts.isBroadcast = true;
        if (opts.userOptions) {
            opts.binded = opts.userOptions.binded;
            opts.filterParam = opts.userOptions.filterParam;
        }
        for (let i = 0, l = count; i < l; i++) {
            sendMessage(servers[i].id);
        }
    }
}
exports.ChannelService = ChannelService;
class Channel {
    constructor(name, _channelService) {
        this.name = name;
        this._channelService = _channelService;
        this._groups = {};
        this._records = {};
        this._state = State.ST_INITED;
        this._userAmount = 0;
    }
    get userAmount() {
        return this._userAmount;
    }
    get groups() {
        return this._groups;
    }
    get records() {
        return this._records;
    }
    get channelService() {
        return this._channelService;
    }
    add(uid, sid) {
        if (this._state > State.ST_INITED) {
            return false;
        }
        else {
            let res = add(uid, sid, this._groups);
            if (res) {
                this._records[uid] = { sid: sid, uid: uid };
                ++this._userAmount;
            }
            addToStore(this._channelService, genKey(this._channelService, this.name), genValue(sid, uid));
            return res;
        }
    }
    leave(uid, sid) {
        if (!uid || !sid) {
            return false;
        }
        let res = deleteFrom(uid, sid, this.groups[sid]);
        if (res) {
            delete this._records[uid];
            --this._userAmount;
        }
        if (this.userAmount < 0)
            this._userAmount = 0; //robust
        removeFromStore(this._channelService, genKey(this._channelService, this.name), genValue(sid, uid));
        if (this.groups[sid] && this.groups[sid].length === 0) {
            delete this._groups[sid];
        }
        return res;
    }
    getMembers() {
        let res = [], groups = this.groups;
        let group, i, l;
        for (let sid in groups) {
            group = groups[sid];
            for (i = 0, l = group.length; i < l; i++) {
                res.push(group[i]);
            }
        }
        return res;
    }
    getMember(uid) {
        return this._records[uid];
    }
    destroy() {
        this._state = State.ST_DESTROYED;
        this._channelService.destroyChannel(this.name);
    }
    //TODO:4?
    pushMessage(route, msg, opts, cb) {
        if (this._state !== State.ST_INITED) {
            utils_1.invokeCallback(cb, new Error('channel is not running now'));
            return;
        }
        if (typeof route !== 'string') {
            cb = opts;
            opts = msg;
            msg = route;
            route = msg.route;
        }
        if (!cb && typeof opts === 'function') {
            cb = opts;
            opts = {};
        }
        sendMessageByGroup(this._channelService, route, msg, this.groups, opts, cb);
    }
}
exports.Channel = Channel;
function add(uid, sid, groups) {
    if (!sid) {
        logger.warn("ignore uid %j for sid not specified.", uid);
        return false;
    }
    let group = groups[sid];
    if (!group) {
        group = [];
        groups[sid] = group;
    }
    group.push(uid);
    return true;
}
function deleteFrom(uid, sid, group) {
    if (!uid || !sid || !group) {
        return false;
    }
    for (let i = 0, l = group.length; i < l; i++) {
        if (group[i] === uid) {
            group.splice(i, 1);
            return true;
        }
    }
    return false;
}
function sendMessageByGroup(channelService, route, msg, groups, opts, cb) {
    let app = channelService.app;
    let namespace = "sys";
    let service = "channelRemote";
    let method = "pushMessage";
    let count = utils_1.size(groups);
    let successFlag = false;
    let failIds = [];
    logger.debug("[%s] channelService sendMessageByGroup route: %s, msg: %j, groups: %j, opts: %j", app.serverId, route, msg, groups, opts);
    if (count === 0) {
        // group is empty
        utils_1.invokeCallback(cb);
        return;
    }
    let latch = countDownLatch_1.createCountDownLatch(count, {}, () => {
        if (!successFlag) {
            utils_1.invokeCallback(cb, new Error("all uids push message fail"));
            return;
        }
        utils_1.invokeCallback(cb, null, failIds);
    });
    let rpcCB = (serverId) => {
        return (err, fails) => {
            if (err) {
                logger.error("[pushMessage] fail to dispatch msg to serverId: " +
                    serverId +
                    ", err:" +
                    err.stack);
                latch.done();
                return;
            }
            if (fails) {
                failIds = failIds.concat(fails);
            }
            successFlag = true;
            latch.done();
        };
    };
    opts = { type: "push", userOptions: opts || {} };
    // for compatiblity
    opts.isPush = true;
    let sendMessage = (sid) => {
        return (() => {
            if (sid === app.serverId) {
                channelService.channelRemote[method](route, msg, groups[sid], opts, rpcCB(sid));
            }
            else {
                app.rpcInvoke(sid, {
                    namespace: namespace,
                    service: service,
                    method: method,
                    args: [route, msg, groups[sid], opts]
                }, rpcCB(sid));
            }
        })();
    };
    let group;
    for (let sid in groups) {
        group = groups[sid];
        if (group && group.length > 0) {
            sendMessage(sid);
        }
        else {
            // empty group
            process.nextTick(rpcCB(sid));
        }
    }
}
function restoreChannel(self, cb) {
    if (!self.store) {
        utils_1.invokeCallback(cb);
        return;
    }
    else {
        loadAllFromStore(self, genKey(self), (err, list) => {
            if (!!err) {
                utils_1.invokeCallback(cb, err);
                return;
            }
            else {
                if (!list.length || !Array.isArray(list)) {
                    utils_1.invokeCallback(cb);
                    return;
                }
                let load = (key) => {
                    return (() => {
                        loadAllFromStore(self, key, (err, items) => {
                            for (let j = 0; j < items.length; j++) {
                                let array = items[j].split(":");
                                let sid = array[0];
                                let uid = array[1];
                                let channel = self.channels[name];
                                let res = add(uid, sid, channel.groups);
                                if (res) {
                                    channel.records[uid] = { sid: sid, uid: uid };
                                }
                            }
                        });
                    })();
                };
                for (let i = 0; i < list.length; i++) {
                    let name = list[i].slice(genKey(self).length + 1);
                    self.channels[name] = new Channel(name, self);
                    load(list[i]);
                }
                utils_1.invokeCallback(cb);
            }
        });
    }
}
function addToStore(self, key, value) {
    if (!!self.store) {
        self.store.add(key, value, (err) => {
            if (!!err) {
                logger.error("add key: %s value: %s to store, with err: %j", key, value, err.stack);
            }
        });
    }
}
function removeFromStore(self, key, value) {
    if (!!self.store) {
        self.store.remove(key, value, (err) => {
            if (!!err) {
                logger.error("remove key: %s value: %s from store, with err: %j", key, value, err.stack);
            }
        });
    }
}
function loadAllFromStore(self, key, cb) {
    if (!!self.store) {
        self.store.load(key, (err, list) => {
            if (!!err) {
                logger.error("load key: %s from store, with err: %j", key, err.stack);
                utils_1.invokeCallback(cb, err);
            }
            else {
                utils_1.invokeCallback(cb, null, list);
            }
        });
    }
}
function removeAllFromStore(self, key) {
    if (!!self.store) {
        self.store.removeAll(key, (err) => {
            if (!!err) {
                logger.error("remove key: %s all members from store, with err: %j", key, err.stack);
            }
        });
    }
}
function genKey(self, name) {
    if (!!name) {
        return self.prefix + ":" + self.app.serverId + ":" + name;
    }
    else {
        return self.prefix + ":" + self.app.serverId;
    }
}
function genValue(sid, uid) {
    return sid + ":" + uid;
}
//# sourceMappingURL=data:application/json;base64,