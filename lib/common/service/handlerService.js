"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const utils = require("../../util/utils");
const Loader = require("pomelo-loader");
const pathUtil = require("../../util/pathUtil");
const logger = require("pomelo-logger").getLogger("pomelo", __filename);
const forwardLogger = require("pomelo-logger").getLogger("forward-log", __filename);
class HandlerService {
    constructor(app, opts) {
        this.app = app;
        this.handlersMap = {};
        if (!!opts.reloadHandlers) {
            watchHandlers(app, this.handlersMap);
        }
        this.enableForwardLog = opts.enableForwardLog || false;
        this.name = "handler";
    }
    handle(routeRecord, msg, session, cb) {
        // the request should be processed by current server
        let handler = this.getHandler(routeRecord);
        if (!handler) {
            logger.error("[handleManager]: fail to find handler for %j", msg.__route__);
            utils.invokeCallback(cb, new Error("fail to find handler for " + msg.__route__));
            return;
        }
        let start = Date.now();
        let self = this;
        let callback = (err, resp, opts) => {
            if (self.enableForwardLog) {
                let log = {
                    route: msg.__route__,
                    args: msg,
                    time: utils.format(new Date(start)),
                    timeUsed: Date.now() - start
                };
                forwardLogger.info(JSON.stringify(log));
            }
            // resp = getResp(arguments);
            utils.invokeCallback(cb, err, resp, opts);
        };
        let method = routeRecord.method;
        if (!Array.isArray(msg)) {
            handler[method](msg, session, callback);
        }
        else {
            msg.push(session);
            msg.push(callback);
            handler[method].apply(handler, msg);
        }
        return;
    }
    getHandler(routeRecord) {
        let serverType = routeRecord.serverType;
        if (!this.handlersMap[serverType]) {
            loadHandlers(this.app, serverType, this.handlersMap);
        }
        let handlers = this.handlersMap[serverType] || {};
        let handler = handlers[routeRecord.handler];
        if (!handler) {
            logger.warn("could not find handler for routeRecord: %j", routeRecord);
            return null;
        }
        if (typeof handler[routeRecord.method] !== "function") {
            logger.warn("could not find the method %s in handler: %s", routeRecord.method, routeRecord.handler);
            return null;
        }
        return handler;
    }
}
exports.HandlerService = HandlerService;
function loadHandlers(app, serverType, handlersMap) {
    let p = pathUtil.getHandlerPath(app.base, serverType);
    if (p) {
        handlersMap[serverType] = Loader.load(p, app);
    }
}
function watchHandlers(app, handlersMap) {
    let p = pathUtil.getHandlerPath(app.base, app.serverType);
    if (!!p) {
        fs.watch(p, (event, name) => {
            if (event === "change") {
                handlersMap[app.serverType] = Loader.load(p, app);
            }
        });
    }
}
function getResp(args) {
    let len = args.length;
    if (len == 1) {
        return [];
    }
    if (len == 2) {
        return [args[1]];
    }
    if (len == 3) {
        return [args[1], args[2]];
    }
    if (len == 4) {
        return [args[1], args[2], args[3]];
    }
    let r = new Array(len);
    for (let i = 1; i < len; i++) {
        r[i] = args[i];
    }
    return r;
}
//# sourceMappingURL=data:application/json;base64,