"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logger = require("pomelo-logger").getLogger("pomelo", __filename);
const admin = require("pomelo-admin");
const moduleUtil = require("../util/moduleUtil");
const utils = require("../util/utils");
const constants_1 = require("../util/constants");
class Monitor {
    constructor(app, opts) {
        this.app = app;
        opts = opts || {};
        this.app = app;
        this.serverInfo = app.curServer;
        this.masterInfo = app.master;
        this.modules = [];
        this.closeWatcher = opts.closeWatcher;
        this.monitorConsole = admin.createMonitorConsole({
            id: this.serverInfo.id,
            type: this.app.serverType,
            host: this.masterInfo.host,
            port: this.masterInfo.port,
            info: this.serverInfo,
            env: this.app.get(constants_1.RESERVED.ENV),
            authServer: app.get("adminAuthServerMonitor") // auth server function
        });
    }
    start(cb) {
        moduleUtil.registerDefaultModules(false, this.app, this.closeWatcher);
        this.startConsole(cb);
    }
    startConsole(cb) {
        moduleUtil.loadModules(this, this.monitorConsole);
        this.monitorConsole.start((err) => {
            if (err) {
                utils.invokeCallback(cb, err);
                return;
            }
            moduleUtil.startModules(this.modules, (err) => {
                utils.invokeCallback(cb, err);
                return;
            });
        });
        this.monitorConsole.on("error", (err) => {
            if (!!err) {
                logger.error("monitorConsole encounters with error: %j", err.stack);
                return;
            }
        });
    }
    stop(cb) {
        this.monitorConsole.stop();
        this.modules = [];
        process.nextTick(function () {
            utils.invokeCallback(cb);
        });
    }
    // monitor reconnect to master
    reconnect(masterInfo) {
        this.stop(() => {
            this.monitorConsole = admin.createMonitorConsole({
                id: this.serverInfo.id,
                type: this.app.serverType,
                host: masterInfo.host,
                port: masterInfo.port,
                info: this.serverInfo,
                env: this.app.get(constants_1.RESERVED.ENV)
            });
            this.startConsole(() => {
                logger.info("restart modules for server : %j finish.", this.app.serverId);
            });
        });
    }
}
exports.default = Monitor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uaXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1vbml0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUN4RSxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDdEMsaURBQWtEO0FBQ2xELHVDQUF3QztBQUV4QyxpREFBNkM7QUFFN0M7SUFNQyxZQUFxQixHQUFnQixFQUFFLElBQVU7UUFBNUIsUUFBRyxHQUFILEdBQUcsQ0FBYTtRQUNwQyxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNmLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQztRQUNoQyxJQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7UUFDN0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBRXRDLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDLG9CQUFvQixDQUFDO1lBQ2hELEVBQUUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDdEIsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVTtZQUN6QixJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJO1lBQzFCLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUk7WUFDMUIsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQ3JCLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxvQkFBUSxDQUFDLEdBQUcsQ0FBQztZQUMvQixVQUFVLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLHVCQUF1QjtTQUNyRSxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsS0FBSyxDQUFDLEVBQVk7UUFDakIsVUFBVSxDQUFDLHNCQUFzQixDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxZQUFZLENBQUMsRUFBWTtRQUN4QixVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFbEQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFRLEVBQUUsRUFBRTtZQUN0QyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNULEtBQUssQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUM5QixNQUFNLENBQUM7WUFDUixDQUFDO1lBQ0QsVUFBVSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBUSxFQUFFLEVBQUU7Z0JBQ2xELEtBQUssQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUM5QixNQUFNLENBQUM7WUFDUixDQUFDLENBQUMsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBUSxFQUFFLEVBQUU7WUFDNUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ1gsTUFBTSxDQUFDLEtBQUssQ0FDWCwwQ0FBMEMsRUFDMUMsR0FBRyxDQUFDLEtBQUssQ0FDVCxDQUFDO2dCQUNGLE1BQU0sQ0FBQztZQUNSLENBQUM7UUFDRixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxJQUFJLENBQUMsRUFBWTtRQUNoQixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLE9BQU8sQ0FBQyxRQUFRLENBQUM7WUFDaEIsS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCw4QkFBOEI7SUFDOUIsU0FBUyxDQUFDLFVBQXNCO1FBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUMsb0JBQW9CLENBQUM7Z0JBQ2hELEVBQUUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0JBQ3RCLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVU7Z0JBQ3pCLElBQUksRUFBRSxVQUFVLENBQUMsSUFBSTtnQkFDckIsSUFBSSxFQUFFLFVBQVUsQ0FBQyxJQUFJO2dCQUNyQixJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVU7Z0JBQ3JCLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxvQkFBUSxDQUFDLEdBQUcsQ0FBQzthQUMvQixDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRTtnQkFDdEIsTUFBTSxDQUFDLElBQUksQ0FDVix5Q0FBeUMsRUFDekMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQ2pCLENBQUM7WUFDSCxDQUFDLENBQUMsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztDQUNEO0FBbEZELDBCQWtGQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGxvZ2dlciA9IHJlcXVpcmUoXCJwb21lbG8tbG9nZ2VyXCIpLmdldExvZ2dlcihcInBvbWVsb1wiLCBfX2ZpbGVuYW1lKTtcclxuY29uc3QgYWRtaW4gPSByZXF1aXJlKFwicG9tZWxvLWFkbWluXCIpO1xyXG5pbXBvcnQgbW9kdWxlVXRpbCA9IHJlcXVpcmUoXCIuLi91dGlsL21vZHVsZVV0aWxcIik7XHJcbmltcG9ydCB1dGlscyA9IHJlcXVpcmUoXCIuLi91dGlsL3V0aWxzXCIpO1xyXG5pbXBvcnQgeyBBcHBsaWNhdGlvbiwgU2VydmVySW5mbywgTW9kdWxlIH0gZnJvbSBcIi4uL2FwcGxpY2F0aW9uXCI7XHJcbmltcG9ydCB7IFJFU0VSVkVEIH0gZnJvbSBcIi4uL3V0aWwvY29uc3RhbnRzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb25pdG9yIHtcclxuXHRwcml2YXRlIHNlcnZlckluZm86IFNlcnZlckluZm87XHJcblx0cHJpdmF0ZSBtYXN0ZXJJbmZvOiBTZXJ2ZXJJbmZvO1xyXG5cdHByaXZhdGUgbW9kdWxlczogTW9kdWxlW107XHJcblx0cHJpdmF0ZSBjbG9zZVdhdGNoZXI6IGJvb2xlYW47XHJcblx0cHJpdmF0ZSBtb25pdG9yQ29uc29sZTogYW55OyAvL1RPRE9cclxuXHRjb25zdHJ1Y3RvcihyZWFkb25seSBhcHA6IEFwcGxpY2F0aW9uLCBvcHRzPzogYW55KSB7XHJcblx0XHRvcHRzID0gb3B0cyB8fCB7fTtcclxuXHRcdHRoaXMuYXBwID0gYXBwO1xyXG5cdFx0dGhpcy5zZXJ2ZXJJbmZvID0gYXBwLmN1clNlcnZlcjtcclxuXHRcdHRoaXMubWFzdGVySW5mbyA9IGFwcC5tYXN0ZXI7XHJcblx0XHR0aGlzLm1vZHVsZXMgPSBbXTtcclxuXHRcdHRoaXMuY2xvc2VXYXRjaGVyID0gb3B0cy5jbG9zZVdhdGNoZXI7XHJcblxyXG5cdFx0dGhpcy5tb25pdG9yQ29uc29sZSA9IGFkbWluLmNyZWF0ZU1vbml0b3JDb25zb2xlKHtcclxuXHRcdFx0aWQ6IHRoaXMuc2VydmVySW5mby5pZCxcclxuXHRcdFx0dHlwZTogdGhpcy5hcHAuc2VydmVyVHlwZSxcclxuXHRcdFx0aG9zdDogdGhpcy5tYXN0ZXJJbmZvLmhvc3QsXHJcblx0XHRcdHBvcnQ6IHRoaXMubWFzdGVySW5mby5wb3J0LFxyXG5cdFx0XHRpbmZvOiB0aGlzLnNlcnZlckluZm8sXHJcblx0XHRcdGVudjogdGhpcy5hcHAuZ2V0KFJFU0VSVkVELkVOViksXHJcblx0XHRcdGF1dGhTZXJ2ZXI6IGFwcC5nZXQoXCJhZG1pbkF1dGhTZXJ2ZXJNb25pdG9yXCIpIC8vIGF1dGggc2VydmVyIGZ1bmN0aW9uXHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdHN0YXJ0KGNiOiBGdW5jdGlvbikge1xyXG5cdFx0bW9kdWxlVXRpbC5yZWdpc3RlckRlZmF1bHRNb2R1bGVzKGZhbHNlLCB0aGlzLmFwcCwgdGhpcy5jbG9zZVdhdGNoZXIpO1xyXG5cdFx0dGhpcy5zdGFydENvbnNvbGUoY2IpO1xyXG5cdH1cclxuXHJcblx0c3RhcnRDb25zb2xlKGNiOiBGdW5jdGlvbikge1xyXG5cdFx0bW9kdWxlVXRpbC5sb2FkTW9kdWxlcyh0aGlzLCB0aGlzLm1vbml0b3JDb25zb2xlKTtcclxuXHJcblx0XHR0aGlzLm1vbml0b3JDb25zb2xlLnN0YXJ0KChlcnI6IGFueSkgPT4ge1xyXG5cdFx0XHRpZiAoZXJyKSB7XHJcblx0XHRcdFx0dXRpbHMuaW52b2tlQ2FsbGJhY2soY2IsIGVycik7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdG1vZHVsZVV0aWwuc3RhcnRNb2R1bGVzKHRoaXMubW9kdWxlcywgKGVycjogYW55KSA9PiB7XHJcblx0XHRcdFx0dXRpbHMuaW52b2tlQ2FsbGJhY2soY2IsIGVycik7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdHRoaXMubW9uaXRvckNvbnNvbGUub24oXCJlcnJvclwiLCAoZXJyOiBhbnkpID0+IHtcclxuXHRcdFx0aWYgKCEhZXJyKSB7XHJcblx0XHRcdFx0bG9nZ2VyLmVycm9yKFxyXG5cdFx0XHRcdFx0XCJtb25pdG9yQ29uc29sZSBlbmNvdW50ZXJzIHdpdGggZXJyb3I6ICVqXCIsXHJcblx0XHRcdFx0XHRlcnIuc3RhY2tcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRzdG9wKGNiOiBGdW5jdGlvbikge1xyXG5cdFx0dGhpcy5tb25pdG9yQ29uc29sZS5zdG9wKCk7XHJcblx0XHR0aGlzLm1vZHVsZXMgPSBbXTtcclxuXHRcdHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XHJcblx0XHRcdHV0aWxzLmludm9rZUNhbGxiYWNrKGNiKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0Ly8gbW9uaXRvciByZWNvbm5lY3QgdG8gbWFzdGVyXHJcblx0cmVjb25uZWN0KG1hc3RlckluZm86IFNlcnZlckluZm8pIHtcclxuXHRcdHRoaXMuc3RvcCgoKSA9PiB7XHJcblx0XHRcdHRoaXMubW9uaXRvckNvbnNvbGUgPSBhZG1pbi5jcmVhdGVNb25pdG9yQ29uc29sZSh7XHJcblx0XHRcdFx0aWQ6IHRoaXMuc2VydmVySW5mby5pZCxcclxuXHRcdFx0XHR0eXBlOiB0aGlzLmFwcC5zZXJ2ZXJUeXBlLFxyXG5cdFx0XHRcdGhvc3Q6IG1hc3RlckluZm8uaG9zdCxcclxuXHRcdFx0XHRwb3J0OiBtYXN0ZXJJbmZvLnBvcnQsXHJcblx0XHRcdFx0aW5mbzogdGhpcy5zZXJ2ZXJJbmZvLFxyXG5cdFx0XHRcdGVudjogdGhpcy5hcHAuZ2V0KFJFU0VSVkVELkVOVilcclxuXHRcdFx0fSk7XHJcblx0XHRcdHRoaXMuc3RhcnRDb25zb2xlKCgpID0+IHtcclxuXHRcdFx0XHRsb2dnZXIuaW5mbyhcclxuXHRcdFx0XHRcdFwicmVzdGFydCBtb2R1bGVzIGZvciBzZXJ2ZXIgOiAlaiBmaW5pc2guXCIsXHJcblx0XHRcdFx0XHR0aGlzLmFwcC5zZXJ2ZXJJZFxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcblx0fVxyXG59XHJcbiJdfQ==