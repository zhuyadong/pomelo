"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logger = require("pomelo-logger").getLogger("pomelo", __filename);
const admin = require("pomelo-admin");
const moduleUtil = require("../util/moduleUtil");
const utils = require("../util/utils");
const constants_1 = require("../util/constants");
class Monitor {
    constructor(app, opts) {
        this.app = app;
        opts = opts || {};
        this.app = app;
        this.serverInfo = app.curServer;
        this.masterInfo = app.master;
        this.modules = [];
        this.closeWatcher = opts.closeWatcher;
        this.monitorConsole = admin.createMonitorConsole({
            id: this.serverInfo.id,
            type: this.app.serverType,
            host: this.masterInfo.host,
            port: this.masterInfo.port,
            info: this.serverInfo,
            env: this.app.get(constants_1.RESERVED.ENV),
            authServer: app.get("adminAuthServerMonitor") // auth server function
        });
    }
    start(cb) {
        moduleUtil.registerDefaultModules(false, this.app, this.closeWatcher);
        this.startConsole(cb);
    }
    startConsole(cb) {
        moduleUtil.loadModules(this, this.monitorConsole);
        this.monitorConsole.start((err) => {
            if (err) {
                utils.invokeCallback(cb, err);
                return;
            }
            moduleUtil.startModules(this.modules, (err) => {
                utils.invokeCallback(cb, err);
                return;
            });
        });
        this.monitorConsole.on("error", (err) => {
            if (!!err) {
                logger.error("monitorConsole encounters with error: %j", err.stack);
                return;
            }
        });
    }
    stop(cb) {
        this.monitorConsole.stop();
        this.modules = [];
        process.nextTick(function () {
            utils.invokeCallback(cb);
        });
    }
    // monitor reconnect to master
    reconnect(masterInfo) {
        this.stop(() => {
            this.monitorConsole = admin.createMonitorConsole({
                id: this.serverInfo.id,
                type: this.app.serverType,
                host: masterInfo.host,
                port: masterInfo.port,
                info: this.serverInfo,
                env: this.app.get(constants_1.RESERVED.ENV)
            });
            this.startConsole(() => {
                logger.info("restart modules for server : %j finish.", this.app.serverId);
            });
        });
    }
}
exports.default = Monitor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uaXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1vbml0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUN4RSxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDdEMsaURBQWtEO0FBQ2xELHVDQUF3QztBQUV4QyxpREFBNkM7QUFHN0M7SUFNQyxZQUFxQixHQUFnQixFQUFFLElBQVU7UUFBNUIsUUFBRyxHQUFILEdBQUcsQ0FBYTtRQUNwQyxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNmLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQztRQUNoQyxJQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7UUFDN0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBRXRDLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDLG9CQUFvQixDQUFDO1lBQ2hELEVBQUUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDdEIsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVTtZQUN6QixJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJO1lBQzFCLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUk7WUFDMUIsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQ3JCLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxvQkFBUSxDQUFDLEdBQUcsQ0FBQztZQUMvQixVQUFVLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLHVCQUF1QjtTQUNyRSxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsS0FBSyxDQUFDLEVBQVk7UUFDakIsVUFBVSxDQUFDLHNCQUFzQixDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxZQUFZLENBQUMsRUFBWTtRQUN4QixVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFbEQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFRLEVBQUUsRUFBRTtZQUN0QyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNULEtBQUssQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUM5QixNQUFNLENBQUM7WUFDUixDQUFDO1lBQ0QsVUFBVSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBUSxFQUFFLEVBQUU7Z0JBQ2xELEtBQUssQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUM5QixNQUFNLENBQUM7WUFDUixDQUFDLENBQUMsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBUSxFQUFFLEVBQUU7WUFDNUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ1gsTUFBTSxDQUFDLEtBQUssQ0FDWCwwQ0FBMEMsRUFDMUMsR0FBRyxDQUFDLEtBQUssQ0FDVCxDQUFDO2dCQUNGLE1BQU0sQ0FBQztZQUNSLENBQUM7UUFDRixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxJQUFJLENBQUMsRUFBWTtRQUNoQixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLE9BQU8sQ0FBQyxRQUFRLENBQUM7WUFDaEIsS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCw4QkFBOEI7SUFDOUIsU0FBUyxDQUFDLFVBQXNCO1FBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUMsb0JBQW9CLENBQUM7Z0JBQ2hELEVBQUUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0JBQ3RCLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVU7Z0JBQ3pCLElBQUksRUFBRSxVQUFVLENBQUMsSUFBSTtnQkFDckIsSUFBSSxFQUFFLFVBQVUsQ0FBQyxJQUFJO2dCQUNyQixJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVU7Z0JBQ3JCLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxvQkFBUSxDQUFDLEdBQUcsQ0FBQzthQUMvQixDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRTtnQkFDdEIsTUFBTSxDQUFDLElBQUksQ0FDVix5Q0FBeUMsRUFDekMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQ2pCLENBQUM7WUFDSCxDQUFDLENBQUMsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztDQUNEO0FBbEZELDBCQWtGQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGxvZ2dlciA9IHJlcXVpcmUoXCJwb21lbG8tbG9nZ2VyXCIpLmdldExvZ2dlcihcInBvbWVsb1wiLCBfX2ZpbGVuYW1lKTtcbmNvbnN0IGFkbWluID0gcmVxdWlyZShcInBvbWVsby1hZG1pblwiKTtcbmltcG9ydCBtb2R1bGVVdGlsID0gcmVxdWlyZShcIi4uL3V0aWwvbW9kdWxlVXRpbFwiKTtcbmltcG9ydCB1dGlscyA9IHJlcXVpcmUoXCIuLi91dGlsL3V0aWxzXCIpO1xuaW1wb3J0IHsgQXBwbGljYXRpb24sIFNlcnZlckluZm8gfSBmcm9tIFwiLi4vYXBwbGljYXRpb25cIjtcbmltcG9ydCB7IFJFU0VSVkVEIH0gZnJvbSBcIi4uL3V0aWwvY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBNb2R1bGUgfSBmcm9tIFwiLi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9uaXRvciB7XG5cdHByaXZhdGUgc2VydmVySW5mbzogU2VydmVySW5mbztcblx0cHJpdmF0ZSBtYXN0ZXJJbmZvOiBTZXJ2ZXJJbmZvO1xuXHRwcml2YXRlIG1vZHVsZXM6IE1vZHVsZVtdO1xuXHRwcml2YXRlIGNsb3NlV2F0Y2hlcjogYm9vbGVhbjtcblx0cHJpdmF0ZSBtb25pdG9yQ29uc29sZTogYW55OyAvL1RPRE9cblx0Y29uc3RydWN0b3IocmVhZG9ubHkgYXBwOiBBcHBsaWNhdGlvbiwgb3B0cz86IGFueSkge1xuXHRcdG9wdHMgPSBvcHRzIHx8IHt9O1xuXHRcdHRoaXMuYXBwID0gYXBwO1xuXHRcdHRoaXMuc2VydmVySW5mbyA9IGFwcC5jdXJTZXJ2ZXI7XG5cdFx0dGhpcy5tYXN0ZXJJbmZvID0gYXBwLm1hc3Rlcjtcblx0XHR0aGlzLm1vZHVsZXMgPSBbXTtcblx0XHR0aGlzLmNsb3NlV2F0Y2hlciA9IG9wdHMuY2xvc2VXYXRjaGVyO1xuXG5cdFx0dGhpcy5tb25pdG9yQ29uc29sZSA9IGFkbWluLmNyZWF0ZU1vbml0b3JDb25zb2xlKHtcblx0XHRcdGlkOiB0aGlzLnNlcnZlckluZm8uaWQsXG5cdFx0XHR0eXBlOiB0aGlzLmFwcC5zZXJ2ZXJUeXBlLFxuXHRcdFx0aG9zdDogdGhpcy5tYXN0ZXJJbmZvLmhvc3QsXG5cdFx0XHRwb3J0OiB0aGlzLm1hc3RlckluZm8ucG9ydCxcblx0XHRcdGluZm86IHRoaXMuc2VydmVySW5mbyxcblx0XHRcdGVudjogdGhpcy5hcHAuZ2V0KFJFU0VSVkVELkVOViksXG5cdFx0XHRhdXRoU2VydmVyOiBhcHAuZ2V0KFwiYWRtaW5BdXRoU2VydmVyTW9uaXRvclwiKSAvLyBhdXRoIHNlcnZlciBmdW5jdGlvblxuXHRcdH0pO1xuXHR9XG5cblx0c3RhcnQoY2I6IEZ1bmN0aW9uKSB7XG5cdFx0bW9kdWxlVXRpbC5yZWdpc3RlckRlZmF1bHRNb2R1bGVzKGZhbHNlLCB0aGlzLmFwcCwgdGhpcy5jbG9zZVdhdGNoZXIpO1xuXHRcdHRoaXMuc3RhcnRDb25zb2xlKGNiKTtcblx0fVxuXG5cdHN0YXJ0Q29uc29sZShjYjogRnVuY3Rpb24pIHtcblx0XHRtb2R1bGVVdGlsLmxvYWRNb2R1bGVzKHRoaXMsIHRoaXMubW9uaXRvckNvbnNvbGUpO1xuXG5cdFx0dGhpcy5tb25pdG9yQ29uc29sZS5zdGFydCgoZXJyOiBhbnkpID0+IHtcblx0XHRcdGlmIChlcnIpIHtcblx0XHRcdFx0dXRpbHMuaW52b2tlQ2FsbGJhY2soY2IsIGVycik7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdG1vZHVsZVV0aWwuc3RhcnRNb2R1bGVzKHRoaXMubW9kdWxlcywgKGVycjogYW55KSA9PiB7XG5cdFx0XHRcdHV0aWxzLmludm9rZUNhbGxiYWNrKGNiLCBlcnIpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9KTtcblx0XHR9KTtcblxuXHRcdHRoaXMubW9uaXRvckNvbnNvbGUub24oXCJlcnJvclwiLCAoZXJyOiBhbnkpID0+IHtcblx0XHRcdGlmICghIWVycikge1xuXHRcdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdFx0XCJtb25pdG9yQ29uc29sZSBlbmNvdW50ZXJzIHdpdGggZXJyb3I6ICVqXCIsXG5cdFx0XHRcdFx0ZXJyLnN0YWNrXG5cdFx0XHRcdCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdHN0b3AoY2I6IEZ1bmN0aW9uKSB7XG5cdFx0dGhpcy5tb25pdG9yQ29uc29sZS5zdG9wKCk7XG5cdFx0dGhpcy5tb2R1bGVzID0gW107XG5cdFx0cHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcblx0XHRcdHV0aWxzLmludm9rZUNhbGxiYWNrKGNiKTtcblx0XHR9KTtcblx0fVxuXG5cdC8vIG1vbml0b3IgcmVjb25uZWN0IHRvIG1hc3RlclxuXHRyZWNvbm5lY3QobWFzdGVySW5mbzogU2VydmVySW5mbykge1xuXHRcdHRoaXMuc3RvcCgoKSA9PiB7XG5cdFx0XHR0aGlzLm1vbml0b3JDb25zb2xlID0gYWRtaW4uY3JlYXRlTW9uaXRvckNvbnNvbGUoe1xuXHRcdFx0XHRpZDogdGhpcy5zZXJ2ZXJJbmZvLmlkLFxuXHRcdFx0XHR0eXBlOiB0aGlzLmFwcC5zZXJ2ZXJUeXBlLFxuXHRcdFx0XHRob3N0OiBtYXN0ZXJJbmZvLmhvc3QsXG5cdFx0XHRcdHBvcnQ6IG1hc3RlckluZm8ucG9ydCxcblx0XHRcdFx0aW5mbzogdGhpcy5zZXJ2ZXJJbmZvLFxuXHRcdFx0XHRlbnY6IHRoaXMuYXBwLmdldChSRVNFUlZFRC5FTlYpXG5cdFx0XHR9KTtcblx0XHRcdHRoaXMuc3RhcnRDb25zb2xlKCgpID0+IHtcblx0XHRcdFx0bG9nZ2VyLmluZm8oXG5cdFx0XHRcdFx0XCJyZXN0YXJ0IG1vZHVsZXMgZm9yIHNlcnZlciA6ICVqIGZpbmlzaC5cIixcblx0XHRcdFx0XHR0aGlzLmFwcC5zZXJ2ZXJJZFxuXHRcdFx0XHQpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cbn1cbiJdfQ==