"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const application_1 = require("./application");
const events_1 = require("./util/events");
exports.events = events_1.default;
const backendSessionCtor = require("./components/backendSession");
const channelCtor = require("./components/channel");
const connectionCtor = require("./components/connection");
const connectorCtor = require("./components/connector");
const dictionaryCtor = require("./components/dictionary");
const masterCtor = require("./components/master");
const monitorCtor = require("./components/monitor");
const protobufCtor = require("./components/protobuf");
const proxyCtor = require("./components/proxy");
const pushSchedulerCtor = require("./components/pushScheduler");
const serverCtor = require("./components/server");
const sessionCtor = require("./components/session");
const remoteCtor = require("./components/remote");
const timeoutCtor = require("./filters/handler/timeout");
const Package = require("../package");
class Pomelo {
    constructor() {
        this.version = Package.version;
        this._components = {};
        this._filters = {};
        this._rpcFilters = {};
        this._connectors = {};
        this._pushSchedulers = {};
        fs.readdirSync(__dirname + "/components").forEach(filename => {
            if (!/\.js$/.test(filename)) {
                return;
            }
            let name = path.basename(filename, ".js");
            let _load = load.bind(null, "./components/", name);
            this._components.__defineGetter__(name, _load);
            //(<any>this).__defineGetter__(name, _load);
        });
        fs.readdirSync(__dirname + "/filters/handler").forEach(filename => {
            if (!/\.js$/.test(filename)) {
                return;
            }
            let name = path.basename(filename, ".js");
            let _load = load.bind(null, "./filters/handler/", name);
            this._filters.__defineGetter__(name, _load);
            //module.exports.__defineGetter__(name, _load);
        });
        fs.readdirSync(__dirname + "/filters/rpc").forEach(filename => {
            if (!/\.js$/.test(filename)) {
                return;
            }
            let name = path.basename(filename, ".js");
            let _load = load.bind(null, "./filters/rpc/", name);
            this._rpcFilters.__defineGetter__(name, _load);
        });
        this._connectors.__defineGetter__("sioconnector", load.bind(null, "./connectors/sioconnector"));
        this._connectors.__defineGetter__("hybridconnector", load.bind(null, "./connectors/hybridconnector"));
        this._connectors.__defineGetter__("udpconnector", load.bind(null, "./connectors/udpconnector"));
        this._connectors.__defineGetter__("mqttconnector", load.bind(null, "./connectors/mqttconnector"));
        this._pushSchedulers.__defineGetter__("direct", load.bind(null, "./pushSchedulers/direct"));
        this._pushSchedulers.__defineGetter__("buffer", load.bind(null, "./pushSchedulers/buffer"));
    }
    get app() {
        return application_1.default.instance;
    }
    createApp(opts) {
        this.app.init(opts);
        return this.app;
    }
    get components() {
        return this._components;
    }
    get connectors() {
        return this._connectors;
    }
    get filters() {
        return this._filters;
    }
    get rpcFilters() {
        return this._rpcFilters;
    }
    get backendSession() {
        return backendSessionCtor;
    }
    get channel() {
        return channelCtor;
    }
    get connection() {
        return connectionCtor;
    }
    get connector() {
        return connectorCtor;
    }
    get dictionary() {
        return dictionaryCtor;
    }
    get master() {
        return masterCtor;
    }
    get monitor() {
        return monitorCtor;
    }
    get protobuf() {
        return protobufCtor;
    }
    get proxy() {
        return proxyCtor;
    }
    get pushScheduler() {
        return pushSchedulerCtor;
    }
    get remote() {
        return remoteCtor;
    }
    get server() {
        return serverCtor;
    }
    get session() {
        return sessionCtor;
    }
    get timeout() {
        return timeoutCtor;
    }
}
exports.Pomelo = Pomelo;
function load(path, name) {
    let mod;
    if (name) {
        mod = require(path + name);
    }
    else {
        mod = require(path);
    }
    if (mod && mod.default)
        mod = mod.default;
    return mod;
}
let pomelo = new Pomelo();
exports.default = pomelo;
//# sourceMappingURL=data:application/json;base64,