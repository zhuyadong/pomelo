"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils = require("../util/utils");
const DEFAULT_FLUSH_INTERVAL = 20;
exports.default = (app, opts) => {
    return new BufferPushScheduler(app, opts);
};
class BufferPushScheduler {
    constructor(app, opts) {
        this.app = app;
        this.flushInterval = opts.flushInterval || DEFAULT_FLUSH_INTERVAL;
        this.sessions = {}; // sid -> msg queue
        this.tid = null;
    }
    start(cb) {
        this.tid = setInterval(() => this.flush(), this.flushInterval);
        process.nextTick(function () {
            utils.invokeCallback(cb);
        });
    }
    stop(force, cb) {
        if (this.tid) {
            clearInterval(this.tid);
            this.tid = null;
        }
        process.nextTick(function () {
            utils.invokeCallback(cb);
        });
    }
    schedule(reqId, route, msg, recvs, opts, cb) {
        opts = opts || {};
        if (opts.type === "broadcast") {
            this.doBroadcast(msg, opts.userOptions);
        }
        else {
            this.doBatchPush(msg, recvs);
        }
        process.nextTick(() => {
            utils.invokeCallback(cb);
        });
    }
    doBroadcast(msg, opts) {
        let channelService = this.app.get("channelService");
        let sessionService = this.app.get("sessionService");
        if (opts.binded) {
            sessionService.forEachBindedSession((session) => {
                if (channelService.broadcastFilter &&
                    !channelService.broadcastFilter(session, msg, opts.filterParam)) {
                    return;
                }
                this.enqueue(session, msg);
            });
        }
        else {
            sessionService.forEachSession((session) => {
                if (channelService.broadcastFilter &&
                    !channelService.broadcastFilter(session, msg, opts.filterParam)) {
                    return;
                }
                this.enqueue(session, msg);
            });
        }
    }
    doBatchPush(msg, recvs) {
        let sessionService = this.app.get("sessionService");
        let session;
        for (let i = 0, l = recvs.length; i < l; i++) {
            session = sessionService.get(recvs[i]);
            if (session) {
                this.enqueue(session, msg);
            }
        }
    }
    enqueue(session, msg) {
        let queue = this.sessions[session.id];
        if (!queue) {
            queue = this.sessions[session.id] = [];
            session.once("closed", () => this.onClose(session));
        }
        queue.push(msg);
    }
    onClose(session) {
        delete this.sessions[session.id];
    }
    flush() {
        let sessionService = this.app.get("sessionService");
        let queue, session;
        for (let sid in this.sessions) {
            session = sessionService.get(sid);
            if (!session) {
                continue;
            }
            queue = this.sessions[sid];
            if (!queue || queue.length === 0) {
                continue;
            }
            session.sendBatch(queue);
            this.sessions[sid] = [];
        }
    }
}
exports.BufferPushScheduler = BufferPushScheduler;
//# sourceMappingURL=data:application/json;base64,