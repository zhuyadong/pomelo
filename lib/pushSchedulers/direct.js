"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils = require("../util/utils");
exports.default = (app, opts) => {
    return new DirectPushScheduler(app, opts);
};
class DirectPushScheduler {
    constructor(app, opts) {
        this.app = app;
    }
    schedule(reqId, route, msg, recvs, opts, cb) {
        opts = opts || {};
        if (opts.type === "broadcast") {
            this.doBroadcast(msg, opts.userOptions);
        }
        else {
            this.doBatchPush(msg, recvs);
        }
        if (cb) {
            process.nextTick(function () {
                utils.invokeCallback(cb);
            });
        }
    }
    doBroadcast(msg, opts) {
        let channelService = this.app.get("channelService");
        let sessionService = this.app.get("sessionService");
        if (opts.binded) {
            sessionService.forEachBindedSession((session) => {
                if (channelService.broadcastFilter &&
                    !channelService.broadcastFilter(session, msg, opts.filterParam)) {
                    return;
                }
                sessionService.sendMessageByUid(session.uid, msg);
            });
        }
        else {
            sessionService.forEachSession((session) => {
                if (channelService.broadcastFilter &&
                    !channelService.broadcastFilter(session, msg, opts.filterParam)) {
                    return;
                }
                sessionService.sendMessage(session.id, msg);
            });
        }
    }
    doBatchPush(msg, recvs) {
        let sessionService = this.app.get("sessionService");
        for (let i = 0, l = recvs.length; i < l; i++) {
            sessionService.sendMessage(recvs[i], msg);
        }
    }
}
exports.DirectPushScheduler = DirectPushScheduler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGlyZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQXdDO0FBSXhDLGtCQUFlLENBQUMsR0FBZ0IsRUFBRSxJQUFVLEVBQUUsRUFBRTtJQUM5QyxNQUFNLENBQUMsSUFBSSxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDNUMsQ0FBQyxDQUFDO0FBQ0Y7SUFDRSxZQUFxQixHQUFnQixFQUFFLElBQVU7UUFBNUIsUUFBRyxHQUFILEdBQUcsQ0FBYTtJQUFlLENBQUM7SUFFckQsUUFBUSxDQUNOLEtBQWEsRUFDYixLQUFhLEVBQ2IsR0FBUSxFQUNSLEtBQWUsRUFDZixJQUFTLEVBQ1QsRUFBYTtRQUViLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ2xCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQztZQUM5QixJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDMUMsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDL0IsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDUCxPQUFPLENBQUMsUUFBUSxDQUFDO2dCQUNmLEtBQUssQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDM0IsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO0lBQ0gsQ0FBQztJQUVTLFdBQVcsQ0FBQyxHQUFRLEVBQUUsSUFBUztRQUN2QyxJQUFJLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3BELElBQUksY0FBYyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFFcEQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDaEIsY0FBYyxDQUFDLG9CQUFvQixDQUFDLENBQUMsT0FBZ0IsRUFBRSxFQUFFO2dCQUN2RCxFQUFFLENBQUMsQ0FDRCxjQUFjLENBQUMsZUFBZTtvQkFDOUIsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FDaEUsQ0FBQyxDQUFDLENBQUM7b0JBQ0QsTUFBTSxDQUFDO2dCQUNULENBQUM7Z0JBRUQsY0FBYyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDcEQsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixjQUFjLENBQUMsY0FBYyxDQUFDLENBQUMsT0FBZ0IsRUFBRSxFQUFFO2dCQUNqRCxFQUFFLENBQUMsQ0FDRCxjQUFjLENBQUMsZUFBZTtvQkFDOUIsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FDaEUsQ0FBQyxDQUFDLENBQUM7b0JBQ0QsTUFBTSxDQUFDO2dCQUNULENBQUM7Z0JBRUQsY0FBYyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQzlDLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztJQUNILENBQUM7SUFFRCxXQUFXLENBQUMsR0FBUSxFQUFFLEtBQWU7UUFDbkMsSUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNwRCxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQzdDLGNBQWMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzVDLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUE1REQsa0RBNERDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHV0aWxzID0gcmVxdWlyZShcIi4uL3V0aWwvdXRpbHNcIik7XHJcbmltcG9ydCB7IEFwcGxpY2F0aW9uLCBTY2hlZHVsZXIgfSBmcm9tIFwiLi4vYXBwbGljYXRpb25cIjtcclxuaW1wb3J0IHsgU2Vzc2lvbiB9IGZyb20gXCIuLi9jb21tb24vc2VydmljZS9zZXNzaW9uU2VydmljZVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKGFwcDogQXBwbGljYXRpb24sIG9wdHM/OiBhbnkpID0+IHtcclxuICByZXR1cm4gbmV3IERpcmVjdFB1c2hTY2hlZHVsZXIoYXBwLCBvcHRzKTtcclxufTtcclxuZXhwb3J0IGNsYXNzIERpcmVjdFB1c2hTY2hlZHVsZXIgaW1wbGVtZW50cyBTY2hlZHVsZXIge1xyXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGFwcDogQXBwbGljYXRpb24sIG9wdHM/OiBhbnkpIHt9XHJcblxyXG4gIHNjaGVkdWxlKFxyXG4gICAgcmVxSWQ6IG51bWJlcixcclxuICAgIHJvdXRlOiBzdHJpbmcsXHJcbiAgICBtc2c6IGFueSxcclxuICAgIHJlY3ZzOiBudW1iZXJbXSxcclxuICAgIG9wdHM6IGFueSxcclxuICAgIGNiPzogRnVuY3Rpb25cclxuICApIHtcclxuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xyXG4gICAgaWYgKG9wdHMudHlwZSA9PT0gXCJicm9hZGNhc3RcIikge1xyXG4gICAgICB0aGlzLmRvQnJvYWRjYXN0KG1zZywgb3B0cy51c2VyT3B0aW9ucyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmRvQmF0Y2hQdXNoKG1zZywgcmVjdnMpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjYikge1xyXG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHV0aWxzLmludm9rZUNhbGxiYWNrKGNiKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgZG9Ccm9hZGNhc3QobXNnOiBhbnksIG9wdHM6IGFueSkge1xyXG4gICAgbGV0IGNoYW5uZWxTZXJ2aWNlID0gdGhpcy5hcHAuZ2V0KFwiY2hhbm5lbFNlcnZpY2VcIik7XHJcbiAgICBsZXQgc2Vzc2lvblNlcnZpY2UgPSB0aGlzLmFwcC5nZXQoXCJzZXNzaW9uU2VydmljZVwiKTtcclxuXHJcbiAgICBpZiAob3B0cy5iaW5kZWQpIHtcclxuICAgICAgc2Vzc2lvblNlcnZpY2UuZm9yRWFjaEJpbmRlZFNlc3Npb24oKHNlc3Npb246IFNlc3Npb24pID0+IHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBjaGFubmVsU2VydmljZS5icm9hZGNhc3RGaWx0ZXIgJiZcclxuICAgICAgICAgICFjaGFubmVsU2VydmljZS5icm9hZGNhc3RGaWx0ZXIoc2Vzc2lvbiwgbXNnLCBvcHRzLmZpbHRlclBhcmFtKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2Vzc2lvblNlcnZpY2Uuc2VuZE1lc3NhZ2VCeVVpZChzZXNzaW9uLnVpZCwgbXNnKTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzZXNzaW9uU2VydmljZS5mb3JFYWNoU2Vzc2lvbigoc2Vzc2lvbjogU2Vzc2lvbikgPT4ge1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIGNoYW5uZWxTZXJ2aWNlLmJyb2FkY2FzdEZpbHRlciAmJlxyXG4gICAgICAgICAgIWNoYW5uZWxTZXJ2aWNlLmJyb2FkY2FzdEZpbHRlcihzZXNzaW9uLCBtc2csIG9wdHMuZmlsdGVyUGFyYW0pXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXNzaW9uU2VydmljZS5zZW5kTWVzc2FnZShzZXNzaW9uLmlkLCBtc2cpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRvQmF0Y2hQdXNoKG1zZzogYW55LCByZWN2czogbnVtYmVyW10pIHtcclxuICAgIGxldCBzZXNzaW9uU2VydmljZSA9IHRoaXMuYXBwLmdldChcInNlc3Npb25TZXJ2aWNlXCIpO1xyXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSByZWN2cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgc2Vzc2lvblNlcnZpY2Uuc2VuZE1lc3NhZ2UocmVjdnNbaV0sIG1zZyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==