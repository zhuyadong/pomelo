"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils = require("../util/utils");
exports.default = (app, opts) => {
    return new DirectPushScheduler(app, opts);
};
class DirectPushScheduler {
    constructor(app, opts) {
        this.app = app;
    }
    schedule(reqId, route, msg, recvs, opts, cb) {
        opts = opts || {};
        if (opts.type === "broadcast") {
            this.doBroadcast(msg, opts.userOptions);
        }
        else {
            this.doBatchPush(msg, recvs);
        }
        if (cb) {
            process.nextTick(function () {
                utils.invokeCallback(cb);
            });
        }
    }
    doBroadcast(msg, opts) {
        let channelService = this.app.get("channelService");
        let sessionService = this.app.get("sessionService");
        if (opts.binded) {
            sessionService.forEachBindedSession((session) => {
                if (channelService.broadcastFilter &&
                    !channelService.broadcastFilter(session, msg, opts.filterParam)) {
                    return;
                }
                sessionService.sendMessageByUid(session.uid, msg);
            });
        }
        else {
            sessionService.forEachSession((session) => {
                if (channelService.broadcastFilter &&
                    !channelService.broadcastFilter(session, msg, opts.filterParam)) {
                    return;
                }
                sessionService.sendMessage(session.id, msg);
            });
        }
    }
    doBatchPush(msg, recvs) {
        let sessionService = this.app.get("sessionService");
        for (let i = 0, l = recvs.length; i < l; i++) {
            sessionService.sendMessage(recvs[i], msg);
        }
    }
}
exports.DirectPushScheduler = DirectPushScheduler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGlyZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQXdDO0FBSXhDLGtCQUFlLENBQUMsR0FBZ0IsRUFBRSxJQUFVLEVBQUUsRUFBRTtJQUM5QyxNQUFNLENBQUMsSUFBSSxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDNUMsQ0FBQyxDQUFDO0FBQ0Y7SUFDRSxZQUFxQixHQUFnQixFQUFFLElBQVU7UUFBNUIsUUFBRyxHQUFILEdBQUcsQ0FBYTtJQUFlLENBQUM7SUFFckQsUUFBUSxDQUNOLEtBQWEsRUFDYixLQUFhLEVBQ2IsR0FBUSxFQUNSLEtBQWUsRUFDZixJQUFTLEVBQ1QsRUFBYTtRQUViLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ2xCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQztZQUM5QixJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDMUMsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDL0IsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDUCxPQUFPLENBQUMsUUFBUSxDQUFDO2dCQUNmLEtBQUssQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDM0IsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO0lBQ0gsQ0FBQztJQUVTLFdBQVcsQ0FBQyxHQUFRLEVBQUUsSUFBUztRQUN2QyxJQUFJLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3BELElBQUksY0FBYyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFFcEQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDaEIsY0FBYyxDQUFDLG9CQUFvQixDQUFDLENBQUMsT0FBZ0IsRUFBRSxFQUFFO2dCQUN2RCxFQUFFLENBQUMsQ0FDRCxjQUFjLENBQUMsZUFBZTtvQkFDOUIsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FDaEUsQ0FBQyxDQUFDLENBQUM7b0JBQ0QsTUFBTSxDQUFDO2dCQUNULENBQUM7Z0JBRUQsY0FBYyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDcEQsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixjQUFjLENBQUMsY0FBYyxDQUFDLENBQUMsT0FBZ0IsRUFBRSxFQUFFO2dCQUNqRCxFQUFFLENBQUMsQ0FDRCxjQUFjLENBQUMsZUFBZTtvQkFDOUIsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FDaEUsQ0FBQyxDQUFDLENBQUM7b0JBQ0QsTUFBTSxDQUFDO2dCQUNULENBQUM7Z0JBRUQsY0FBYyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQzlDLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztJQUNILENBQUM7SUFFRCxXQUFXLENBQUMsR0FBUSxFQUFFLEtBQWU7UUFDbkMsSUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNwRCxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQzdDLGNBQWMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzVDLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUE1REQsa0RBNERDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHV0aWxzID0gcmVxdWlyZShcIi4uL3V0aWwvdXRpbHNcIik7XG5pbXBvcnQgeyBBcHBsaWNhdGlvbiwgU2NoZWR1bGVyIH0gZnJvbSBcIi4uL2FwcGxpY2F0aW9uXCI7XG5pbXBvcnQgeyBTZXNzaW9uIH0gZnJvbSBcIi4uL2NvbW1vbi9zZXJ2aWNlL3Nlc3Npb25TZXJ2aWNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChhcHA6IEFwcGxpY2F0aW9uLCBvcHRzPzogYW55KSA9PiB7XG4gIHJldHVybiBuZXcgRGlyZWN0UHVzaFNjaGVkdWxlcihhcHAsIG9wdHMpO1xufTtcbmV4cG9ydCBjbGFzcyBEaXJlY3RQdXNoU2NoZWR1bGVyIGltcGxlbWVudHMgU2NoZWR1bGVyIHtcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgYXBwOiBBcHBsaWNhdGlvbiwgb3B0cz86IGFueSkge31cblxuICBzY2hlZHVsZShcbiAgICByZXFJZDogbnVtYmVyLFxuICAgIHJvdXRlOiBzdHJpbmcsXG4gICAgbXNnOiBhbnksXG4gICAgcmVjdnM6IG51bWJlcltdLFxuICAgIG9wdHM6IGFueSxcbiAgICBjYj86IEZ1bmN0aW9uXG4gICkge1xuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuICAgIGlmIChvcHRzLnR5cGUgPT09IFwiYnJvYWRjYXN0XCIpIHtcbiAgICAgIHRoaXMuZG9Ccm9hZGNhc3QobXNnLCBvcHRzLnVzZXJPcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kb0JhdGNoUHVzaChtc2csIHJlY3ZzKTtcbiAgICB9XG5cbiAgICBpZiAoY2IpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIHV0aWxzLmludm9rZUNhbGxiYWNrKGNiKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBkb0Jyb2FkY2FzdChtc2c6IGFueSwgb3B0czogYW55KSB7XG4gICAgbGV0IGNoYW5uZWxTZXJ2aWNlID0gdGhpcy5hcHAuZ2V0KFwiY2hhbm5lbFNlcnZpY2VcIik7XG4gICAgbGV0IHNlc3Npb25TZXJ2aWNlID0gdGhpcy5hcHAuZ2V0KFwic2Vzc2lvblNlcnZpY2VcIik7XG5cbiAgICBpZiAob3B0cy5iaW5kZWQpIHtcbiAgICAgIHNlc3Npb25TZXJ2aWNlLmZvckVhY2hCaW5kZWRTZXNzaW9uKChzZXNzaW9uOiBTZXNzaW9uKSA9PiB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBjaGFubmVsU2VydmljZS5icm9hZGNhc3RGaWx0ZXIgJiZcbiAgICAgICAgICAhY2hhbm5lbFNlcnZpY2UuYnJvYWRjYXN0RmlsdGVyKHNlc3Npb24sIG1zZywgb3B0cy5maWx0ZXJQYXJhbSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc2Vzc2lvblNlcnZpY2Uuc2VuZE1lc3NhZ2VCeVVpZChzZXNzaW9uLnVpZCwgbXNnKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXNzaW9uU2VydmljZS5mb3JFYWNoU2Vzc2lvbigoc2Vzc2lvbjogU2Vzc2lvbikgPT4ge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgY2hhbm5lbFNlcnZpY2UuYnJvYWRjYXN0RmlsdGVyICYmXG4gICAgICAgICAgIWNoYW5uZWxTZXJ2aWNlLmJyb2FkY2FzdEZpbHRlcihzZXNzaW9uLCBtc2csIG9wdHMuZmlsdGVyUGFyYW0pXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlc3Npb25TZXJ2aWNlLnNlbmRNZXNzYWdlKHNlc3Npb24uaWQsIG1zZyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBkb0JhdGNoUHVzaChtc2c6IGFueSwgcmVjdnM6IG51bWJlcltdKSB7XG4gICAgbGV0IHNlc3Npb25TZXJ2aWNlID0gdGhpcy5hcHAuZ2V0KFwic2Vzc2lvblNlcnZpY2VcIik7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSByZWN2cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHNlc3Npb25TZXJ2aWNlLnNlbmRNZXNzYWdlKHJlY3ZzW2ldLCBtc2cpO1xuICAgIH1cbiAgfVxufVxuIl19