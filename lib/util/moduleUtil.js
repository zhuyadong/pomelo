"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const admin = require("pomelo-admin");
const utils = require("./utils");
const pathUtil = require("./pathUtil");
const starter = require("../master/starter");
const constants_1 = require("./constants");
let logger = require("pomelo-logger").getLogger("pomelo", __filename);
//TODO:self & consoleService types
function loadModules(self, consoleService) {
    // load app register modules
    let _modules = self.app.get(constants_1.KEYWORDS.MODULE);
    if (!_modules) {
        return;
    }
    let modules = [];
    for (let m in _modules) {
        modules.push(_modules[m]);
    }
    for (let i = 0, l = modules.length; i < l; i++) {
        let module;
        let record = modules[i];
        if (typeof record.module === "function") {
            module = record.module(record.opts, consoleService);
        }
        else {
            module = record.module;
        }
        let moduleId = record.moduleId || module.moduleId;
        if (!moduleId) {
            logger.warn("ignore an unknown module.");
            continue;
        }
        consoleService.register(moduleId, module);
        self.modules.push(module);
    }
}
exports.loadModules = loadModules;
function startModules(modules, cb) {
    // invoke the start lifecycle method of modules
    if (!modules) {
        return;
    }
    startModule(null, modules, 0, cb);
}
exports.startModules = startModules;
function registerDefaultModules(isMaster, app, closeWatcher = false) {
    if (!closeWatcher) {
        if (isMaster) {
            app.registerAdmin(require("../modules/masterwatcher"), { app: app });
        }
        else {
            app.registerAdmin(require("../modules/monitorwatcher"), { app: app });
        }
    }
    app.registerAdmin(admin.modules.watchServer, { app: app });
    app.registerAdmin(require("../modules/console"), {
        app: app,
        starter: starter
    });
    if (app.enabled("systemMonitor")) {
        if (os.platform() !== constants_1.PLATFORM.WIN) {
            app.registerAdmin(admin.modules.systemInfo);
            app.registerAdmin(admin.modules.nodeInfo);
        }
        app.registerAdmin(admin.modules.monitorLog, {
            path: pathUtil.getLogPath(app.base)
        });
        app.registerAdmin(admin.modules.scripts, {
            app: app,
            path: pathUtil.getScriptPath(app.base)
        });
        if (os.platform() !== constants_1.PLATFORM.WIN) {
            app.registerAdmin(admin.modules.profiler);
        }
    }
}
exports.registerDefaultModules = registerDefaultModules;
function startModule(err, modules, index, cb) {
    if (err || index >= modules.length) {
        utils.invokeCallback(cb, err);
        return;
    }
    let module = modules[index];
    if (module && typeof module.start === "function") {
        module.start(function (err) {
            startModule(err, modules, index + 1, cb);
        });
    }
    else {
        startModule(err, modules, index + 1, cb);
    }
}
//# sourceMappingURL=data:application/json;base64,