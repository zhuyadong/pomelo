"use strict";
const events_1 = require("events");
const index_1 = require("../index");
const logger = require("pomelo-logger").getLogger("pomelo", __filename);
const countDownLatch = require("../util/countDownLatch");
module.exports = class Watchdog extends events_1.EventEmitter {
    constructor(app, service) {
        //TODO
        super();
        this.app = app;
        this.service = service;
        this.app = app;
        this.service = service;
        this.isStarted = false;
        this.count = index_1.utils.size(app.getServersFromConfig());
        this.servers = {};
        this.listenerMap = {};
    }
    addServer(server) {
        if (!server) {
            return;
        }
        this.servers[server.id] = server;
        this.notify({ action: "addServer", server: server });
    }
    removeServer(id) {
        if (!id) {
            return;
        }
        this.unsubscribe(id);
        delete this.servers[id];
        this.notify({ action: "removeServer", id: id });
    }
    reconnectServer(server) {
        let self = this;
        if (!server) {
            return;
        }
        if (!this.servers[server.id]) {
            this.servers[server.id] = server;
        }
        //replace server in reconnect server
        this.notifyById(server.id, {
            action: "replaceServer",
            servers: self.servers
        });
        // notify other server to add server
        this.notify({ action: "addServer", server: server });
        // add server in listener
        this.subscribe(server.id);
    }
    subscribe(id) {
        this.listenerMap[id] = 1;
    }
    unsubscribe(id) {
        delete this.listenerMap[id];
    }
    query() {
        return this.servers;
    }
    record(id) {
        if (!this.isStarted && --this.count < 0) {
            let usedTime = Date.now() - this.app.startTime;
            logger.info("all servers startup in %s ms", usedTime);
            this.notify({ action: "startOver" });
            this.isStarted = true;
        }
    }
    notifyById(id, msg) {
        this.service.agent.request(id, index_1.KEYWORDS.MONITOR_WATCHER, msg, (signal) => {
            if (signal !== index_1.SIGNAL.OK) {
                logger.error("master watchdog fail to notify to monitor, id: %s, msg: %j", id, msg);
            }
            else {
                logger.debug("master watchdog notify to monitor success, id: %s, msg: %j", id, msg);
            }
        });
    }
    notify(msg) {
        let listenerMap = this.listenerMap;
        let success = true;
        let fails = [];
        let timeouts = [];
        let requests = {};
        let count = index_1.utils.size(listenerMap);
        if (count === 0) {
            logger.warn("master watchdog listenerMap is none, msg: %j", msg);
            return;
        }
        let latch = countDownLatch.createCountDownLatch(count, { timeout: index_1.TIME.TIME_WAIT_COUNTDOWN }, (isTimeout) => {
            if (!!isTimeout) {
                for (let key in requests) {
                    if (!requests[key]) {
                        timeouts.push(key);
                    }
                }
                logger.error("master watchdog request timeout message: %j, timeouts: %j, fails: %j", msg, timeouts, fails);
            }
            if (!success) {
                logger.error("master watchdog request fail message: %j, fails: %j", msg, fails);
            }
        });
        let moduleRequest = (self, id) => {
            return (() => {
                self.service.agent.request(id, index_1.KEYWORDS.MONITOR_WATCHER, msg, (signal) => {
                    if (signal !== index_1.SIGNAL.OK) {
                        fails.push(id);
                        success = false;
                    }
                    requests[id] = 1;
                    latch.done();
                });
            })();
        };
        for (let id in listenerMap) {
            requests[id] = 0;
            moduleRequest(this, id);
        }
    }
};
//# sourceMappingURL=data:application/json;base64,