"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const os = require("os");
const cp = require("child_process");
const index_1 = require("../index");
const logger = require("pomelo-logger").getLogger("pomelo", __filename);
let env = index_1.RESERVED.ENV_DEV;
let cpus = {};
function runServers(app) {
    const condition = app.startId || app.type;
    switch (condition) {
        case index_1.RESERVED.MASTER:
            break;
        case index_1.RESERVED.ALL:
            const servers = app.serversFromConfig;
            for (let serverId in servers) {
                run(app, servers[serverId]);
            }
            break;
        default:
            const server = app.getServerFromConfig(condition);
            if (!!server) {
                run(app, server);
            }
            else {
                const servers = app.get("servers")[condition];
                for (let i = 0; i < servers.length; i++) {
                    run(app, servers[i]);
                }
            }
    }
}
exports.runServers = runServers;
function run(app, server, cb) {
    env = app.get("env");
    if (index_1.utils.isLocal(server.host)) {
        let options = [];
        if (!!server.args) {
            if (typeof server.args === "string") {
                options.push(server.args.trim());
            }
            else {
                options = options.concat(server.args);
            }
        }
        let cmd = app.get(index_1.RESERVED.MAIN);
        options.push(cmd);
        options.push(util_1.format("env=%s", env));
        for (let key in server) {
            if (key === index_1.RESERVED.CPU) {
                cpus[server.id] = server[key];
            }
            options.push(util_1.format("%s=%s", key, server[key]));
        }
        localrun(process.execPath, null, options, cb);
    }
    else {
        let cmd = util_1.format('cd "%s" && "%s"', app.base, process.execPath);
        let arg = server.args;
        if (arg !== undefined) {
            cmd += arg;
        }
        cmd += util_1.format(' "%s" env=%s ', app.get(index_1.RESERVED.MAIN), env);
        for (let key in server) {
            if (key === index_1.RESERVED.CPU) {
                cpus[server.id] = server[key];
            }
            cmd += util_1.format(" %s=%s ", key, server[key]);
        }
        sshrun(cmd, server.host, cb);
    }
}
exports.run = run;
function bindCpu(sid, pid, host) {
    if (os.platform() === index_1.PLATFORM.LINUX && cpus[sid] !== undefined) {
        if (index_1.utils.isLocal(host)) {
            let options = [];
            options.push("-pc");
            options.push(cpus[sid].toString());
            options.push(pid);
            localrun(index_1.COMMAND.TASKSET, null, options);
        }
        else {
            let cmd = util_1.format('taskset -pc "%s" "%s"', cpus[sid], pid);
            sshrun(cmd, host);
        }
    }
}
exports.bindCpu = bindCpu;
function kill(pids, servers) {
    let cmd;
    for (let i = 0; i < servers.length; i++) {
        let server = servers[i];
        if (index_1.utils.isLocal(server.host)) {
            let options = [];
            if (os.platform() === index_1.PLATFORM.WIN) {
                cmd = index_1.COMMAND.TASKKILL;
                options.push("/pid");
                options.push("/f");
            }
            else {
                cmd = index_1.COMMAND.KILL;
                options.push("-9");
            }
            options.push(pids[i]);
            localrun(cmd, null, options);
        }
        else {
            if (os.platform() === index_1.PLATFORM.WIN) {
                cmd = util_1.format("taskkill /pid %s /f", pids[i]);
            }
            else {
                cmd = util_1.format("kill -9 %s", pids[i]);
            }
            sshrun(cmd, server.host);
        }
    }
}
exports.kill = kill;
function sshrun(cmd, host, cb) {
    let args = [];
    args.push(host);
    let ssh_params = index_1.pomelo.app.get(index_1.RESERVED.SSH_CONFIG_PARAMS);
    if (!!ssh_params && Array.isArray(ssh_params)) {
        args = args.concat(ssh_params);
    }
    args.push(cmd);
    logger.info("Executing " + cmd + " on " + host + ":22");
    spawnProcess(index_1.COMMAND.SSH, host, args, cb);
    return;
}
exports.sshrun = sshrun;
function localrun(cmd, host, options, cb) {
    logger.info("Executing " + cmd + " " + options + " locally");
    spawnProcess(cmd, host, options, cb);
}
exports.localrun = localrun;
function spawnProcess(command, host, options, cb) {
    let child = null;
    if (env === index_1.RESERVED.ENV_DEV) {
        child = cp.spawn(command, options);
        let prefix = command === index_1.COMMAND.SSH ? "[" + host + "] " : "";
        child.stderr.on("data", chunk => {
            let msg = chunk.toString();
            process.stderr.write(msg);
            if (!!cb) {
                cb(msg);
            }
        });
        child.stdout.on("data", chunk => {
            let msg = prefix + chunk.toString();
            process.stdout.write(msg);
        });
    }
    else {
        child = cp.spawn(command, options, { detached: true, stdio: "inherit" });
        child.unref();
    }
    child.on("exit", code => {
        if (code !== 0) {
            logger.warn("child process exit with error, error code: %s, executed command: %s", code, command);
        }
        if (typeof cb === "function") {
            cb(code === 0 ? null : code);
        }
    });
}
//# sourceMappingURL=data:application/json;base64,