"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const starter = require("./starter");
const util = require("util");
const index_1 = require("../index");
const logger = require("pomelo-logger").getLogger("pomelo", __filename);
const crashLogger = require("pomelo-logger").getLogger("crash-log", __filename);
const adminLogger = require("pomelo-logger").getLogger("admin-log", __filename);
const admin = require("pomelo-admin");
class Master {
    constructor(app, opts) {
        this.app = app;
        this.masterInfo = app.master;
        this.registered = {};
        this.modules = [];
        opts = opts || {};
        opts.port = this.masterInfo.port;
        opts.env = this.app.get(index_1.RESERVED.ENV);
        this.closeWatcher = opts.closeWatcher;
        this.masterConsole = admin.createMasterConsole(opts);
    }
    start(cb) {
        index_1.moduleUtil.registerDefaultModules(true, this.app, this.closeWatcher);
        index_1.moduleUtil.loadModules(this, this.masterConsole);
        // start master console
        this.masterConsole.start((err) => {
            if (err) {
                process.exit(0);
            }
            index_1.moduleUtil.startModules(this.modules, (err) => {
                if (err) {
                    index_1.utils.invokeCallback(cb, err);
                    return;
                }
                if (this.app.get(index_1.RESERVED.MODE) !== index_1.RESERVED.STAND_ALONE) {
                    starter.runServers(this.app);
                }
                index_1.utils.invokeCallback(cb);
            });
        });
        this.masterConsole.on("error", (err) => {
            if (!!err) {
                logger.error("masterConsole encounters with error: " + err.stack);
                return;
            }
        });
        this.masterConsole.on("reconnect", (info) => {
            this.app.addServers([info]);
        });
        // monitor servers disconnect event
        this.masterConsole.on("disconnect", (id, type, info, reason) => {
            crashLogger.info(util.format("[%s],[%s],[%s],[%s]", type, id, Date.now(), reason || "disconnect"));
            let count = 0;
            let time = 0;
            let pingTimer = null;
            let server = this.app.getServerById(id);
            let stopFlags = this.app.get(index_1.RESERVED.STOP_SERVERS) || [];
            if (!!server &&
                (server[index_1.RESERVED.AUTO_RESTART] === "true" ||
                    server[index_1.RESERVED.RESTART_FORCE] === "true") &&
                stopFlags.indexOf(id) < 0) {
                let setTimer = (time) => {
                    pingTimer = setTimeout(() => {
                        index_1.utils.ping(server.host, flag => {
                            if (flag) {
                                handle();
                            }
                            else {
                                count++;
                                if (count > 3) {
                                    time = index_1.TIME.TIME_WAIT_MAX_PING;
                                }
                                else {
                                    time = index_1.TIME.TIME_WAIT_PING * count;
                                }
                                setTimer(time);
                            }
                        });
                    }, time);
                };
                setTimer(time);
                let handle = () => {
                    clearTimeout(pingTimer);
                    index_1.utils.checkPort(server, (status) => {
                        if (status === "error") {
                            index_1.utils.invokeCallback(cb, new Error("Check port command executed with error."));
                            return;
                        }
                        else if (status === "busy") {
                            if (!!server[index_1.RESERVED.RESTART_FORCE]) {
                                starter.kill([info.pid], [server]);
                            }
                            else {
                                index_1.utils.invokeCallback(cb, new Error("Port occupied already, check your server to add."));
                                return;
                            }
                        }
                        setTimeout(() => {
                            starter.run(this.app, server);
                        }, index_1.TIME.TIME_WAIT_STOP);
                    });
                };
            }
        });
        // monitor servers register event
        this.masterConsole.on("register", (record) => {
            starter.bindCpu(record.id, record.pid, record.host);
        });
        this.masterConsole.on("admin-log", (log, error) => {
            if (error) {
                adminLogger.error(JSON.stringify(log));
            }
            else {
                adminLogger.info(JSON.stringify(log));
            }
        });
    }
    stop(cb) {
        this.masterConsole.stop();
        process.nextTick(cb);
    }
}
exports.default = Master;
exports.Master = Master;
//# sourceMappingURL=data:application/json;base64,