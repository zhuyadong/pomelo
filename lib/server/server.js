"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
let logger = require("pomelo-logger").getLogger("pomelo", __filename);
const fs = require("fs");
const path = require("path");
const pathUtil = require("../util/pathUtil");
let Loader = require("pomelo-loader");
const utils = require("../util/utils");
let schedule = require("pomelo-scheduler");
const filterService_1 = require("../common/service/filterService");
const handlerService_1 = require("../common/service/handlerService");
const index_1 = require("../index");
const constants_1 = require("../util/constants");
const util_1 = require("util");
var State;
(function (State) {
    State[State["ST_INITED"] = 0] = "ST_INITED";
    State[State["ST_STARTED"] = 1] = "ST_STARTED";
    State[State["ST_STOPED"] = 2] = "ST_STOPED"; // server stoped
})(State || (State = {}));
class Server {
    constructor(app, opts) {
        this.app = app;
        this.opts = opts || {};
        this.globalFilterService = null;
        this.filterService = null;
        this.handlerService = null;
        this.crons = [];
        this.jobs = {};
        this.state = State.ST_INITED;
        app.event.on(index_1.events.ADD_CRONS, this.addCrons.bind(this));
        app.event.on(index_1.events.REMOVE_CRONS, this.removeCrons.bind(this));
    }
    start() {
        if (this.state > State.ST_INITED) {
            return;
        }
        this.globalFilterService = initFilter(true, this.app);
        this.filterService = initFilter(false, this.app);
        this.handlerService = initHandler(this.app, this.opts);
        this.cronHandlers = loadCronHandlers(this.app);
        loadCrons(this, this.app);
        this.state = State.ST_STARTED;
    }
    afterStart() {
        scheduleCrons(this, this.crons);
    }
    stop() {
        this.state = State.ST_STOPED;
    }
    globalHandle(msg, session, cb) {
        if (this.state !== State.ST_STARTED) {
            utils.invokeCallback(cb, new Error("server not started"));
            return;
        }
        let routeRecord = parseRoute(msg.route);
        if (!routeRecord) {
            utils.invokeCallback(cb, new Error(util_1.format("meet unknown route message %j", msg.route)));
            return;
        }
        let self = this;
        let dispatch = (err, resp, opts) => {
            if (err) {
                handleError(true, self, err, msg, session, resp, opts, (err, resp, opts) => {
                    response(true, self, err, msg, session, resp, opts, cb);
                });
                return;
            }
            if (self.app.serverType !== routeRecord.serverType) {
                doForward(self.app, msg, session, routeRecord, (err, resp, opts) => {
                    response(true, self, err, msg, session, resp, opts, cb);
                });
            }
            else {
                doHandle(self, msg, session, routeRecord, (err, resp, opts) => {
                    response(true, self, err, msg, session, resp, opts, cb);
                });
            }
        };
        beforeFilter(true, self, msg, session, dispatch);
    }
    handle(msg, session, cb) {
        if (this.state !== State.ST_STARTED) {
            cb(new Error("server not started"));
            return;
        }
        let routeRecord = parseRoute(msg.route);
        doHandle(this, msg, session, routeRecord, cb);
    }
    addCrons(crons) {
        this.cronHandlers = loadCronHandlers(this.app);
        for (let i = 0, l = crons.length; i < l; i++) {
            let cron = crons[i];
            checkAndAdd(cron, this.crons, this);
        }
        scheduleCrons(this, crons);
    }
    removeCrons(crons) {
        for (let i = 0, l = crons.length; i < l; i++) {
            let cron = crons[i];
            let id = cron.id;
            if (!!this.jobs[id]) {
                schedule.cancelJob(this.jobs[id]);
            }
            else {
                logger.warn("cron is not in application: %j", cron);
            }
        }
    }
}
exports.Server = Server;
function initFilter(isGlobal, app) {
    let service = new filterService_1.FilterService();
    let befores, afters;
    if (isGlobal) {
        befores = app.get(constants_1.KEYWORDS.GLOBAL_BEFORE_FILTER);
        afters = app.get(constants_1.KEYWORDS.GLOBAL_AFTER_FILTER);
    }
    else {
        befores = app.get(constants_1.KEYWORDS.BEFORE_FILTER);
        afters = app.get(constants_1.KEYWORDS.AFTER_FILTER);
    }
    let i, l;
    if (befores) {
        for (i = 0, l = befores.length; i < l; i++) {
            service.before(befores[i]);
        }
    }
    if (afters) {
        for (i = 0, l = afters.length; i < l; i++) {
            service.after(afters[i]);
        }
    }
    return service;
}
function initHandler(app, opts) {
    return new handlerService_1.HandlerService(app, opts);
}
function loadCronHandlers(app) {
    let p = pathUtil.getCronPath(app.base, app.serverType);
    if (p) {
        return Loader.load(p, app);
    }
}
function loadCrons(server, app) {
    let env = app.get(constants_1.RESERVED.ENV);
    let p = path.join(app.base, constants_1.FILEPATH.CRON);
    if (!fs.existsSync(p)) {
        p = path.join(app.base, constants_1.FILEPATH.CONFIG_DIR, env, path.basename(constants_1.FILEPATH.CRON));
        if (!fs.existsSync(p)) {
            return;
        }
    }
    app.loadConfigBaseApp(constants_1.RESERVED.CRONS, constants_1.FILEPATH.CRON);
    let crons = app.get(constants_1.RESERVED.CRONS);
    for (let serverType in crons) {
        if (app.serverType === serverType) {
            let list = crons[serverType];
            for (let i = 0; i < list.length; i++) {
                if (!list[i].serverId) {
                    checkAndAdd(list[i], server.crons, server);
                }
                else {
                    if (app.serverId === list[i].serverId) {
                        checkAndAdd(list[i], server.crons, server);
                    }
                }
            }
        }
    }
}
function beforeFilter(isGlobal, server, msg, session, cb) {
    let fm;
    if (isGlobal) {
        fm = server.globalFilterService;
    }
    else {
        fm = server.filterService;
    }
    if (fm) {
        fm.beforeFilter(msg, session, cb);
    }
    else {
        utils.invokeCallback(cb);
    }
}
function afterFilter(isGlobal, server, err, msg, session, resp, opts, cb) {
    let fm;
    if (isGlobal) {
        fm = server.globalFilterService;
    }
    else {
        fm = server.filterService;
    }
    if (fm) {
        if (isGlobal) {
            fm.afterFilter(err, msg, session, resp, () => {
                // do nothing
            });
        }
        else {
            fm.afterFilter(err, msg, session, resp, (err) => {
                cb(err, resp, opts);
            });
        }
    }
}
function handleError(isGlobal, server, err, msg, session, resp, opts, cb) {
    let handler;
    if (isGlobal) {
        handler = server.app.get(constants_1.RESERVED.GLOBAL_ERROR_HANDLER);
    }
    else {
        handler = server.app.get(constants_1.RESERVED.ERROR_HANDLER);
    }
    if (!handler) {
        logger.debug("no default error handler to resolve unknown exception. " + err.stack);
        utils.invokeCallback(cb, err, resp, opts);
    }
    else {
        if (handler.length === 5) {
            handler(err, msg, resp, session, cb);
        }
        else {
            handler(err, msg, resp, session, opts, cb);
        }
    }
}
function response(isGlobal, server, err, msg, session, resp, opts, cb) {
    if (isGlobal) {
        cb(err, resp, opts);
        // after filter should not interfere response
        afterFilter(isGlobal, server, err, msg, session, resp, opts, cb);
    }
    else {
        afterFilter(isGlobal, server, err, msg, session, resp, opts, cb);
    }
}
function parseRoute(route) {
    if (!route) {
        return null;
    }
    let ts = route.split(".");
    if (ts.length !== 3) {
        return null;
    }
    return {
        route: route,
        serverType: ts[0],
        handler: ts[1],
        method: ts[2]
    };
}
function doForward(app, msg, session, routeRecord, cb) {
    let finished = false;
    //should route to other servers
    try {
        app.sysrpc[routeRecord.serverType].msgRemote.forwardMessage(
        // app.sysrpc[routeRecord.serverType].msgRemote.forwardMessage2(
        session, msg, 
        // msg.oldRoute || msg.route,
        // msg.body,
        // msg.aesPassword,
        // msg.compressGzip,
        session.export(), (err, resp, opts) => {
            if (err) {
                logger.error("fail to process remote message:" + err.stack);
            }
            finished = true;
            utils.invokeCallback(cb, err, resp, opts);
        });
    }
    catch (err) {
        if (!finished) {
            logger.error(`[${app.serverId}] fail to forward message:` + err.stack);
            utils.invokeCallback(cb, err);
        }
    }
}
function doHandle(server, msg, session, routeRecord, cb) {
    let originMsg = msg;
    msg = msg.body || {};
    msg.__route__ = originMsg.route;
    let self = server;
    let handle = (err, resp, opts) => {
        if (err) {
            // error from before filter
            handleError(false, self, err, msg, session, resp, opts, (err, resp, opts) => {
                response(false, self, err, msg, session, resp, opts, cb);
            });
            return;
        }
        self.handlerService.handle(routeRecord, msg, session, (err, resp, opts) => {
            if (err) {
                //error from handler
                handleError(false, self, err, msg, session, resp, opts, (err, resp, opts) => {
                    response(false, self, err, msg, session, resp, opts, cb);
                });
                return;
            }
            response(false, self, err, msg, session, resp, opts, cb);
        });
    }; //end of handle
    beforeFilter(false, server, msg, session, handle);
}
function scheduleCrons(server, crons) {
    let handlers = server.cronHandlers;
    for (let i = 0; i < crons.length; i++) {
        let cronInfo = crons[i];
        let time = cronInfo.time;
        let action = cronInfo.action;
        let jobId = cronInfo.id;
        if (!time || !action || !jobId) {
            logger.error("cron miss necessary parameters: %j", cronInfo);
            continue;
        }
        if (action.indexOf(".") < 0) {
            logger.error("cron action is error format: %j", cronInfo);
            continue;
        }
        let cron = action.split(".")[0];
        let job = action.split(".")[1];
        let handler = handlers[cron];
        if (!handler) {
            logger.error("could not find cron: %j", cronInfo);
            continue;
        }
        if (typeof handler[job] !== "function") {
            logger.error("could not find cron job: %j, %s", cronInfo, job);
            continue;
        }
        let id = schedule.scheduleJob(time, handler[job].bind(handler));
        server.jobs[jobId] = id;
    }
}
function checkAndAdd(cron, crons, server) {
    if (!containCron(cron.id, crons)) {
        server.crons.push(cron);
    }
    else {
        logger.warn("cron is duplicated: %j", cron);
    }
}
function containCron(id, crons) {
    for (let i = 0, l = crons.length; i < l; i++) {
        if (id === crons[i].id) {
            return true;
        }
    }
    return false;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDdEUseUJBQTBCO0FBQzFCLDZCQUE4QjtBQUM5Qiw2Q0FBOEM7QUFDOUMsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3RDLHVDQUF3QztBQUN4QyxJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUUzQyxtRUFBZ0U7QUFDaEUscUVBSTBDO0FBRTFDLG9DQUFtRDtBQUNuRCxpREFBaUU7QUFFakUsK0JBQThCO0FBRTlCLElBQUssS0FJSjtBQUpELFdBQUssS0FBSztJQUNSLDJDQUFhLENBQUE7SUFDYiw2Q0FBYyxDQUFBO0lBQ2QsMkNBQWEsQ0FBQSxDQUFDLGdCQUFnQjtBQUNoQyxDQUFDLEVBSkksS0FBSyxLQUFMLEtBQUssUUFJVDtBQVdEO0lBU0UsWUFBcUIsR0FBZ0IsRUFBRSxJQUFVO1FBQTVCLFFBQUcsR0FBSCxHQUFHLENBQWE7UUFDbkMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxtQkFBbUIsR0FBUSxJQUFJLENBQUM7UUFDckMsSUFBSSxDQUFDLGFBQWEsR0FBUSxJQUFJLENBQUM7UUFDL0IsSUFBSSxDQUFDLGNBQWMsR0FBUSxJQUFJLENBQUM7UUFDaEMsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFFN0IsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsY0FBTSxDQUFDLFNBQVMsRUFB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Q0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUM3QyxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdkIsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNkLENBQUM7SUFDSCxDQUFDO0lBQ0QsTUFBTSxDQUFDLEtBQUssQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgbG9nZ2VyID0gcmVxdWlyZShcInBvbWVsby1sb2dnZXJcIikuZ2V0TG9nZ2VyKFwicG9tZWxvXCIsIF9fZmlsZW5hbWUpO1xyXG5pbXBvcnQgZnMgPSByZXF1aXJlKFwiZnNcIik7XHJcbmltcG9ydCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XHJcbmltcG9ydCBwYXRoVXRpbCA9IHJlcXVpcmUoXCIuLi91dGlsL3BhdGhVdGlsXCIpO1xyXG5sZXQgTG9hZGVyID0gcmVxdWlyZShcInBvbWVsby1sb2FkZXJcIik7XHJcbmltcG9ydCB1dGlscyA9IHJlcXVpcmUoXCIuLi91dGlsL3V0aWxzXCIpO1xyXG5sZXQgc2NoZWR1bGUgPSByZXF1aXJlKFwicG9tZWxvLXNjaGVkdWxlclwiKTtcclxuXHJcbmltcG9ydCB7IEZpbHRlclNlcnZpY2UgfSBmcm9tIFwiLi4vY29tbW9uL3NlcnZpY2UvZmlsdGVyU2VydmljZVwiO1xyXG5pbXBvcnQge1xyXG4gIEhhbmRsZXJTZXJ2aWNlLFxyXG4gIEhhbmRsZXJzTWFwLFxyXG4gIEhhbmRsZXJzXHJcbn0gZnJvbSBcIi4uL2NvbW1vbi9zZXJ2aWNlL2hhbmRsZXJTZXJ2aWNlXCI7XHJcbmltcG9ydCB7IEFwcGxpY2F0aW9uLCBDb21wb25lbnQsIENyb24gfSBmcm9tIFwiLi4vYXBwbGljYXRpb25cIjtcclxuaW1wb3J0IHsgZXZlbnRzLCBGcm9udGVuZFNlc3Npb24gfSBmcm9tIFwiLi4vaW5kZXhcIjtcclxuaW1wb3J0IHsgUkVTRVJWRUQsIEZJTEVQQVRILCBLRVlXT1JEUyB9IGZyb20gXCIuLi91dGlsL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBTZXNzaW9uIH0gZnJvbSBcIi4uL2NvbW1vbi9zZXJ2aWNlL3Nlc3Npb25TZXJ2aWNlXCI7XHJcbmltcG9ydCB7IGZvcm1hdCB9IGZyb20gXCJ1dGlsXCI7XHJcblxyXG5lbnVtIFN0YXRlIHtcclxuICBTVF9JTklURUQgPSAwLCAvLyBzZXJ2ZXIgaW5pdGVkXHJcbiAgU1RfU1RBUlRFRCA9IDEsIC8vIHNlcnZlciBzdGFydGVkXHJcbiAgU1RfU1RPUEVEID0gMiAvLyBzZXJ2ZXIgc3RvcGVkXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUm91dGVSZWNvcmQge1xyXG4gIHJvdXRlOiBzdHJpbmc7XHJcbiAgc2VydmVyVHlwZTogc3RyaW5nO1xyXG4gIGhhbmRsZXI6IHN0cmluZztcclxuICBtZXRob2Q6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgSm9iTWFwID0geyBbaWR4OiBzdHJpbmddOiBhbnkgfTtcclxuXHJcbmV4cG9ydCBjbGFzcyBTZXJ2ZXIge1xyXG4gIHJlYWRvbmx5IGNyb25zOiBDcm9uW107XHJcbiAgcmVhZG9ubHkgam9iczogSm9iTWFwO1xyXG4gIHJlYWRvbmx5IGNyb25IYW5kbGVyczogSGFuZGxlcnM7XHJcbiAgcmVhZG9ubHkgZ2xvYmFsRmlsdGVyU2VydmljZTogRmlsdGVyU2VydmljZTtcclxuICByZWFkb25seSBmaWx0ZXJTZXJ2aWNlOiBGaWx0ZXJTZXJ2aWNlO1xyXG4gIHJlYWRvbmx5IGhhbmRsZXJTZXJ2aWNlOiBIYW5kbGVyU2VydmljZTtcclxuICBwcml2YXRlIG9wdHM6IGFueTtcclxuICBwcml2YXRlIHN0YXRlOiBTdGF0ZTtcclxuICBjb25zdHJ1Y3RvcihyZWFkb25seSBhcHA6IEFwcGxpY2F0aW9uLCBvcHRzPzogYW55KSB7XHJcbiAgICB0aGlzLm9wdHMgPSBvcHRzIHx8IHt9O1xyXG4gICAgdGhpcy5nbG9iYWxGaWx0ZXJTZXJ2aWNlID0gPGFueT5udWxsO1xyXG4gICAgdGhpcy5maWx0ZXJTZXJ2aWNlID0gPGFueT5udWxsO1xyXG4gICAgdGhpcy5oYW5kbGVyU2VydmljZSA9IDxhbnk+bnVsbDtcclxuICAgIHRoaXMuY3JvbnMgPSBbXTtcclxuICAgIHRoaXMuam9icyA9IHt9O1xyXG4gICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlNUX0lOSVRFRDtcclxuXHJcbiAgICBhcHAuZXZlbnQub24oZXZlbnRzLkFERF9DUk9OUywgdGhpcy5hZGRDcm9ucy5iaW5kKHRoaXMpKTtcclxuICAgIGFwcC5ldmVudC5vbihldmVudHMuUkVNT1ZFX0NST05TLCB0aGlzLnJlbW92ZUNyb25zLmJpbmQodGhpcykpO1xyXG4gIH1cclxuICBzdGFydCgpIHtcclxuICAgIGlmICh0aGlzLnN0YXRlID4gU3RhdGUuU1RfSU5JVEVEKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmdsb2JhbEZpbHRlclNlcnZpY2UhID0gaW5pdEZpbHRlcih0cnVlLCB0aGlzLmFwcCk7XHJcbiAgICB0aGlzLmZpbHRlclNlcnZpY2UhID0gaW5pdEZpbHRlcihmYWxzZSwgdGhpcy5hcHApO1xyXG4gICAgdGhpcy5oYW5kbGVyU2VydmljZSEgPSBpbml0SGFuZGxlcih0aGlzLmFwcCwgdGhpcy5vcHRzKTtcclxuICAgIHRoaXMuY3JvbkhhbmRsZXJzISA9IGxvYWRDcm9uSGFuZGxlcnModGhpcy5hcHApO1xyXG4gICAgbG9hZENyb25zKHRoaXMsIHRoaXMuYXBwKTtcclxuICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TVF9TVEFSVEVEO1xyXG4gIH1cclxuICBhZnRlclN0YXJ0KCkge1xyXG4gICAgc2NoZWR1bGVDcm9ucyh0aGlzLCB0aGlzLmNyb25zKTtcclxuICB9XHJcbiAgc3RvcCgpIHtcclxuICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TVF9TVE9QRUQ7XHJcbiAgfVxyXG4gIGdsb2JhbEhhbmRsZShtc2c6IGFueSwgc2Vzc2lvbjogRnJvbnRlbmRTZXNzaW9uLCBjYj86IEZ1bmN0aW9uKSB7XHJcbiAgICBpZiAodGhpcy5zdGF0ZSAhPT0gU3RhdGUuU1RfU1RBUlRFRCkge1xyXG4gICAgICB1dGlscy5pbnZva2VDYWxsYmFjayhjYiEsIG5ldyBFcnJvcihcInNlcnZlciBub3Qgc3RhcnRlZFwiKSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcm91dGVSZWNvcmQgPSBwYXJzZVJvdXRlKG1zZy5yb3V0ZSk7XHJcbiAgICBpZiAoIXJvdXRlUmVjb3JkKSB7XHJcbiAgICAgIHV0aWxzLmludm9rZUNhbGxiYWNrKFxyXG4gICAgICAgIGNiISxcclxuICAgICAgICBuZXcgRXJyb3IoZm9ybWF0KFwibWVldCB1bmtub3duIHJvdXRlIG1lc3NhZ2UgJWpcIiwgbXNnLnJvdXRlKSlcclxuICAgICAgKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgIGxldCBkaXNwYXRjaCA9IChlcnI6IGFueSwgcmVzcDogYW55LCBvcHRzOiBhbnkpID0+IHtcclxuICAgICAgaWYgKGVycikge1xyXG4gICAgICAgIGhhbmRsZUVycm9yKFxyXG4gICAgICAgICAgdHJ1ZSxcclxuICAgICAgICAgIHNlbGYsXHJcbiAgICAgICAgICBlcnIsXHJcbiAgICAgICAgICBtc2csXHJcbiAgICAgICAgICBzZXNzaW9uLFxyXG4gICAgICAgICAgcmVzcCxcclxuICAgICAgICAgIG9wdHMsXHJcbiAgICAgICAgICAoZXJyOiBhbnksIHJlc3A6IGFueSwgb3B0czogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHJlc3BvbnNlKHRydWUsIHNlbGYsIGVyciwgbXNnLCBzZXNzaW9uLCByZXNwLCBvcHRzLCBjYiEpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoc2VsZi5hcHAuc2VydmVyVHlwZSAhPT0gcm91dGVSZWNvcmQhLnNlcnZlclR5cGUpIHtcclxuICAgICAgICBkb0ZvcndhcmQoXHJcbiAgICAgICAgICBzZWxmLmFwcCxcclxuICAgICAgICAgIG1zZyxcclxuICAgICAgICAgIHNlc3Npb24sXHJcbiAgICAgICAgICByb3V0ZVJlY29yZCEsXHJcbiAgICAgICAgICAoZXJyOiBhbnksIHJlc3A6IGFueSwgb3B0czogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHJlc3BvbnNlKHRydWUsIHNlbGYsIGVyciwgbXNnLCBzZXNzaW9uLCByZXNwLCBvcHRzLCBjYiEpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZG9IYW5kbGUoXHJcbiAgICAgICAgICBzZWxmLFxyXG4gICAgICAgICAgbXNnLFxyXG4gICAgICAgICAgc2Vzc2lvbixcclxuICAgICAgICAgIHJvdXRlUmVjb3JkISxcclxuICAgICAgICAgIChlcnI6IGFueSwgcmVzcDogYW55LCBvcHRzOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgcmVzcG9uc2UodHJ1ZSwgc2VsZiwgZXJyLCBtc2csIHNlc3Npb24sIHJlc3AsIG9wdHMsIGNiISk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIGJlZm9yZUZpbHRlcih0cnVlLCBzZWxmLCBtc2csIHNlc3Npb24sIGRpc3BhdGNoKTtcclxuICB9XHJcblxyXG4gIGhhbmRsZShtc2c6IGFueSwgc2Vzc2lvbjogRnJvbnRlbmRTZXNzaW9uLCBjYjogRnVuY3Rpb24pIHtcclxuICAgIGlmICh0aGlzLnN0YXRlICE9PSBTdGF0ZS5TVF9TVEFSVEVEKSB7XHJcbiAgICAgIGNiKG5ldyBFcnJvcihcInNlcnZlciBub3Qgc3RhcnRlZFwiKSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcm91dGVSZWNvcmQgPSBwYXJzZVJvdXRlKG1zZy5yb3V0ZSk7XHJcbiAgICBkb0hhbmRsZSh0aGlzLCBtc2csIHNlc3Npb24sIHJvdXRlUmVjb3JkISwgY2IpO1xyXG4gIH1cclxuXHJcbiAgYWRkQ3JvbnMoY3JvbnM6IENyb25bXSkge1xyXG4gICAgdGhpcy5jcm9uSGFuZGxlcnMhID0gbG9hZENyb25IYW5kbGVycyh0aGlzLmFwcCk7XHJcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGNyb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICBsZXQgY3JvbiA9IGNyb25zW2ldO1xyXG4gICAgICBjaGVja0FuZEFkZChjcm9uLCB0aGlzLmNyb25zLCB0aGlzKTtcclxuICAgIH1cclxuICAgIHNjaGVkdWxlQ3JvbnModGhpcywgY3JvbnMpO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlQ3JvbnMoY3JvbnM6IENyb25bXSkge1xyXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBjcm9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgbGV0IGNyb24gPSBjcm9uc1tpXTtcclxuICAgICAgbGV0IGlkID0gY3Jvbi5pZDtcclxuICAgICAgaWYgKCEhdGhpcy5qb2JzW2lkXSkge1xyXG4gICAgICAgIHNjaGVkdWxlLmNhbmNlbEpvYih0aGlzLmpvYnNbaWRdKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsb2dnZXIud2FybihcImNyb24gaXMgbm90IGluIGFwcGxpY2F0aW9uOiAlalwiLCBjcm9uKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdEZpbHRlcihpc0dsb2JhbDogYm9vbGVhbiwgYXBwOiBBcHBsaWNhdGlvbikge1xyXG4gIGxldCBzZXJ2aWNlID0gbmV3IEZpbHRlclNlcnZpY2UoKTtcclxuICBsZXQgYmVmb3JlcywgYWZ0ZXJzO1xyXG5cclxuICBpZiAoaXNHbG9iYWwpIHtcclxuICAgIGJlZm9yZXMgPSBhcHAuZ2V0KEtFWVdPUkRTLkdMT0JBTF9CRUZPUkVfRklMVEVSKTtcclxuICAgIGFmdGVycyA9IGFwcC5nZXQoS0VZV09SRFMuR0xPQkFMX0FGVEVSX0ZJTFRFUik7XHJcbiAgfSBlbHNlIHtcclxuICAgIGJlZm9yZXMgPSBhcHAuZ2V0KEtFWVdPUkRTLkJFRk9SRV9GSUxURVIpO1xyXG4gICAgYWZ0ZXJzID0gYXBwLmdldChLRVlXT1JEUy5BRlRFUl9GSUxURVIpO1xyXG4gIH1cclxuXHJcbiAgbGV0IGksIGw7XHJcbiAgaWYgKGJlZm9yZXMpIHtcclxuICAgIGZvciAoaSA9IDAsIGwgPSBiZWZvcmVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICBzZXJ2aWNlLmJlZm9yZShiZWZvcmVzW2ldKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmIChhZnRlcnMpIHtcclxuICAgIGZvciAoaSA9IDAsIGwgPSBhZnRlcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgIHNlcnZpY2UuYWZ0ZXIoYWZ0ZXJzW2ldKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBzZXJ2aWNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0SGFuZGxlcihhcHA6IEFwcGxpY2F0aW9uLCBvcHRzPzogYW55KSB7XHJcbiAgcmV0dXJuIG5ldyBIYW5kbGVyU2VydmljZShhcHAsIG9wdHMpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBsb2FkQ3JvbkhhbmRsZXJzKGFwcDogQXBwbGljYXRpb24pIHtcclxuICBsZXQgcCA9IHBhdGhVdGlsLmdldENyb25QYXRoKGFwcC5iYXNlLCBhcHAuc2VydmVyVHlwZSk7XHJcbiAgaWYgKHApIHtcclxuICAgIHJldHVybiBMb2FkZXIubG9hZChwLCBhcHApO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gbG9hZENyb25zKHNlcnZlcjogU2VydmVyLCBhcHA6IEFwcGxpY2F0aW9uKSB7XHJcbiAgbGV0IGVudiA9IGFwcC5nZXQoUkVTRVJWRUQuRU5WKTtcclxuICBsZXQgcCA9IHBhdGguam9pbihhcHAuYmFzZSwgRklMRVBBVEguQ1JPTik7XHJcbiAgaWYgKCFmcy5leGlzdHNTeW5jKHApKSB7XHJcbiAgICBwID0gcGF0aC5qb2luKFxyXG4gICAgICBhcHAuYmFzZSxcclxuICAgICAgRklMRVBBVEguQ09ORklHX0RJUixcclxuICAgICAgZW52LFxyXG4gICAgICBwYXRoLmJhc2VuYW1lKEZJTEVQQVRILkNST04pXHJcbiAgICApO1xyXG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKHApKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICB9XHJcbiAgYXBwLmxvYWRDb25maWdCYXNlQXBwKFJFU0VSVkVELkNST05TLCBGSUxFUEFUSC5DUk9OKTtcclxuICBsZXQgY3JvbnMgPSBhcHAuZ2V0KFJFU0VSVkVELkNST05TKTtcclxuICBmb3IgKGxldCBzZXJ2ZXJUeXBlIGluIGNyb25zKSB7XHJcbiAgICBpZiAoYXBwLnNlcnZlclR5cGUgPT09IHNlcnZlclR5cGUpIHtcclxuICAgICAgbGV0IGxpc3QgPSBjcm9uc1tzZXJ2ZXJUeXBlXTtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKCFsaXN0W2ldLnNlcnZlcklkKSB7XHJcbiAgICAgICAgICBjaGVja0FuZEFkZChsaXN0W2ldLCBzZXJ2ZXIuY3JvbnMsIHNlcnZlcik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmIChhcHAuc2VydmVySWQgPT09IGxpc3RbaV0uc2VydmVySWQpIHtcclxuICAgICAgICAgICAgY2hlY2tBbmRBZGQobGlzdFtpXSwgc2VydmVyLmNyb25zLCBzZXJ2ZXIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gYmVmb3JlRmlsdGVyKFxyXG4gIGlzR2xvYmFsOiBib29sZWFuLFxyXG4gIHNlcnZlcjogU2VydmVyLFxyXG4gIG1zZzogYW55LFxyXG4gIHNlc3Npb246IEZyb250ZW5kU2Vzc2lvbixcclxuICBjYj86IEZ1bmN0aW9uXHJcbikge1xyXG4gIGxldCBmbTtcclxuICBpZiAoaXNHbG9iYWwpIHtcclxuICAgIGZtID0gc2VydmVyLmdsb2JhbEZpbHRlclNlcnZpY2U7XHJcbiAgfSBlbHNlIHtcclxuICAgIGZtID0gc2VydmVyLmZpbHRlclNlcnZpY2U7XHJcbiAgfVxyXG4gIGlmIChmbSkge1xyXG4gICAgZm0uYmVmb3JlRmlsdGVyKG1zZywgc2Vzc2lvbiwgY2IhKTtcclxuICB9IGVsc2Uge1xyXG4gICAgdXRpbHMuaW52b2tlQ2FsbGJhY2soY2IhKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFmdGVyRmlsdGVyKFxyXG4gIGlzR2xvYmFsOiBib29sZWFuLFxyXG4gIHNlcnZlcjogU2VydmVyLFxyXG4gIGVycjogYW55LFxyXG4gIG1zZzogYW55LFxyXG4gIHNlc3Npb246IEZyb250ZW5kU2Vzc2lvbixcclxuICByZXNwOiBhbnksXHJcbiAgb3B0czogYW55LFxyXG4gIGNiOiBGdW5jdGlvblxyXG4pIHtcclxuICBsZXQgZm07XHJcbiAgaWYgKGlzR2xvYmFsKSB7XHJcbiAgICBmbSA9IHNlcnZlci5nbG9iYWxGaWx0ZXJTZXJ2aWNlO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBmbSA9IHNlcnZlci5maWx0ZXJTZXJ2aWNlO1xyXG4gIH1cclxuICBpZiAoZm0pIHtcclxuICAgIGlmIChpc0dsb2JhbCkge1xyXG4gICAgICBmbS5hZnRlckZpbHRlcihlcnIsIG1zZywgc2Vzc2lvbiwgcmVzcCwgKCkgPT4ge1xyXG4gICAgICAgIC8vIGRvIG5vdGhpbmdcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBmbS5hZnRlckZpbHRlcihlcnIsIG1zZywgc2Vzc2lvbiwgcmVzcCwgKGVycjogYW55KSA9PiB7XHJcbiAgICAgICAgY2IoZXJyLCByZXNwLCBvcHRzKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVFcnJvcihcclxuICBpc0dsb2JhbDogYm9vbGVhbixcclxuICBzZXJ2ZXI6IFNlcnZlcixcclxuICBlcnI6IGFueSxcclxuICBtc2c6IGFueSxcclxuICBzZXNzaW9uOiBGcm9udGVuZFNlc3Npb24sXHJcbiAgcmVzcDogYW55LFxyXG4gIG9wdHM6IGFueSxcclxuICBjYjogRnVuY3Rpb25cclxuKSB7XHJcbiAgbGV0IGhhbmRsZXI7XHJcbiAgaWYgKGlzR2xvYmFsKSB7XHJcbiAgICBoYW5kbGVyID0gc2VydmVyLmFwcC5nZXQoUkVTRVJWRUQuR0xPQkFMX0VSUk9SX0hBTkRMRVIpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBoYW5kbGVyID0gc2VydmVyLmFwcC5nZXQoUkVTRVJWRUQuRVJST1JfSEFORExFUik7XHJcbiAgfVxyXG4gIGlmICghaGFuZGxlcikge1xyXG4gICAgbG9nZ2VyLmRlYnVnKFxyXG4gICAgICBcIm5vIGRlZmF1bHQgZXJyb3IgaGFuZGxlciB0byByZXNvbHZlIHVua25vd24gZXhjZXB0aW9uLiBcIiArIGVyci5zdGFja1xyXG4gICAgKTtcclxuICAgIHV0aWxzLmludm9rZUNhbGxiYWNrKGNiLCBlcnIsIHJlc3AsIG9wdHMpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBpZiAoaGFuZGxlci5sZW5ndGggPT09IDUpIHtcclxuICAgICAgaGFuZGxlcihlcnIsIG1zZywgcmVzcCwgc2Vzc2lvbiwgY2IpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaGFuZGxlcihlcnIsIG1zZywgcmVzcCwgc2Vzc2lvbiwgb3B0cywgY2IpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcmVzcG9uc2UoXHJcbiAgaXNHbG9iYWw6IGJvb2xlYW4sXHJcbiAgc2VydmVyOiBTZXJ2ZXIsXHJcbiAgZXJyOiBhbnksXHJcbiAgbXNnOiBhbnksXHJcbiAgc2Vzc2lvbjogRnJvbnRlbmRTZXNzaW9uLFxyXG4gIHJlc3A6IGFueSxcclxuICBvcHRzOiBhbnksXHJcbiAgY2I6IEZ1bmN0aW9uXHJcbikge1xyXG4gIGlmIChpc0dsb2JhbCkge1xyXG4gICAgY2IoZXJyLCByZXNwLCBvcHRzKTtcclxuICAgIC8vIGFmdGVyIGZpbHRlciBzaG91bGQgbm90IGludGVyZmVyZSByZXNwb25zZVxyXG4gICAgYWZ0ZXJGaWx0ZXIoaXNHbG9iYWwsIHNlcnZlciwgZXJyLCBtc2csIHNlc3Npb24sIHJlc3AsIG9wdHMsIGNiKTtcclxuICB9IGVsc2Uge1xyXG4gICAgYWZ0ZXJGaWx0ZXIoaXNHbG9iYWwsIHNlcnZlciwgZXJyLCBtc2csIHNlc3Npb24sIHJlc3AsIG9wdHMsIGNiKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnNlUm91dGUocm91dGU6IHN0cmluZykge1xyXG4gIGlmICghcm91dGUpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuICBsZXQgdHMgPSByb3V0ZS5zcGxpdChcIi5cIik7XHJcbiAgaWYgKHRzLmxlbmd0aCAhPT0gMykge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgcm91dGU6IHJvdXRlLFxyXG4gICAgc2VydmVyVHlwZTogdHNbMF0sXHJcbiAgICBoYW5kbGVyOiB0c1sxXSxcclxuICAgIG1ldGhvZDogdHNbMl1cclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBkb0ZvcndhcmQoXHJcbiAgYXBwOiBBcHBsaWNhdGlvbixcclxuICBtc2c6IGFueSxcclxuICBzZXNzaW9uOiBGcm9udGVuZFNlc3Npb24sXHJcbiAgcm91dGVSZWNvcmQ6IFJvdXRlUmVjb3JkLFxyXG4gIGNiPzogRnVuY3Rpb25cclxuKSB7XHJcbiAgbGV0IGZpbmlzaGVkID0gZmFsc2U7XHJcbiAgLy9zaG91bGQgcm91dGUgdG8gb3RoZXIgc2VydmVyc1xyXG4gIHRyeSB7XHJcbiAgICBhcHAuc3lzcnBjW3JvdXRlUmVjb3JkLnNlcnZlclR5cGVdLm1zZ1JlbW90ZS5mb3J3YXJkTWVzc2FnZShcclxuICAgICAgLy8gYXBwLnN5c3JwY1tyb3V0ZVJlY29yZC5zZXJ2ZXJUeXBlXS5tc2dSZW1vdGUuZm9yd2FyZE1lc3NhZ2UyKFxyXG4gICAgICBzZXNzaW9uLFxyXG4gICAgICBtc2csXHJcbiAgICAgIC8vIG1zZy5vbGRSb3V0ZSB8fCBtc2cucm91dGUsXHJcbiAgICAgIC8vIG1zZy5ib2R5LFxyXG4gICAgICAvLyBtc2cuYWVzUGFzc3dvcmQsXHJcbiAgICAgIC8vIG1zZy5jb21wcmVzc0d6aXAsXHJcbiAgICAgIHNlc3Npb24uZXhwb3J0KCksXHJcbiAgICAgIChlcnI6IGFueSwgcmVzcDogYW55LCBvcHRzOiBhbnkpID0+IHtcclxuICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICBsb2dnZXIuZXJyb3IoXCJmYWlsIHRvIHByb2Nlc3MgcmVtb3RlIG1lc3NhZ2U6XCIgKyBlcnIuc3RhY2spO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5pc2hlZCA9IHRydWU7XHJcbiAgICAgICAgdXRpbHMuaW52b2tlQ2FsbGJhY2soY2IhLCBlcnIsIHJlc3AsIG9wdHMpO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH0gY2F0Y2ggKGVycikge1xyXG4gICAgaWYgKCFmaW5pc2hlZCkge1xyXG4gICAgICBsb2dnZXIuZXJyb3IoYFske2FwcC5zZXJ2ZXJJZH1dIGZhaWwgdG8gZm9yd2FyZCBtZXNzYWdlOmAgKyBlcnIuc3RhY2spO1xyXG4gICAgICB1dGlscy5pbnZva2VDYWxsYmFjayhjYiEsIGVycik7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkb0hhbmRsZShcclxuICBzZXJ2ZXI6IFNlcnZlcixcclxuICBtc2c6IGFueSxcclxuICBzZXNzaW9uOiBGcm9udGVuZFNlc3Npb24sXHJcbiAgcm91dGVSZWNvcmQ6IFJvdXRlUmVjb3JkLFxyXG4gIGNiPzogRnVuY3Rpb25cclxuKSB7XHJcbiAgbGV0IG9yaWdpbk1zZyA9IG1zZztcclxuICBtc2cgPSBtc2cuYm9keSB8fCB7fTtcclxuICBtc2cuX19yb3V0ZV9fID0gb3JpZ2luTXNnLnJvdXRlO1xyXG5cclxuICBsZXQgc2VsZiA9IHNlcnZlcjtcclxuXHJcbiAgbGV0IGhhbmRsZSA9IChlcnI6IGFueSwgcmVzcDogYW55LCBvcHRzOiBhbnkpID0+IHtcclxuICAgIGlmIChlcnIpIHtcclxuICAgICAgLy8gZXJyb3IgZnJvbSBiZWZvcmUgZmlsdGVyXHJcbiAgICAgIGhhbmRsZUVycm9yKFxyXG4gICAgICAgIGZhbHNlLFxyXG4gICAgICAgIHNlbGYsXHJcbiAgICAgICAgZXJyLFxyXG4gICAgICAgIG1zZyxcclxuICAgICAgICBzZXNzaW9uLFxyXG4gICAgICAgIHJlc3AsXHJcbiAgICAgICAgb3B0cyxcclxuICAgICAgICAoZXJyOiBhbnksIHJlc3A6IGFueSwgb3B0czogYW55KSA9PiB7XHJcbiAgICAgICAgICByZXNwb25zZShmYWxzZSwgc2VsZiwgZXJyLCBtc2csIHNlc3Npb24sIHJlc3AsIG9wdHMsIGNiISk7XHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZi5oYW5kbGVyU2VydmljZS5oYW5kbGUoXHJcbiAgICAgIHJvdXRlUmVjb3JkLFxyXG4gICAgICBtc2csXHJcbiAgICAgIHNlc3Npb24sXHJcbiAgICAgIChlcnI6IGFueSwgcmVzcDogYW55LCBvcHRzOiBhbnkpID0+IHtcclxuICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAvL2Vycm9yIGZyb20gaGFuZGxlclxyXG4gICAgICAgICAgaGFuZGxlRXJyb3IoXHJcbiAgICAgICAgICAgIGZhbHNlLFxyXG4gICAgICAgICAgICBzZWxmLFxyXG4gICAgICAgICAgICBlcnIsXHJcbiAgICAgICAgICAgIG1zZyxcclxuICAgICAgICAgICAgc2Vzc2lvbixcclxuICAgICAgICAgICAgcmVzcCxcclxuICAgICAgICAgICAgb3B0cyxcclxuICAgICAgICAgICAgKGVycjogYW55LCByZXNwOiBhbnksIG9wdHM6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgIHJlc3BvbnNlKGZhbHNlLCBzZWxmLCBlcnIsIG1zZywgc2Vzc2lvbiwgcmVzcCwgb3B0cywgY2IhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlc3BvbnNlKGZhbHNlLCBzZWxmLCBlcnIsIG1zZywgc2Vzc2lvbiwgcmVzcCwgb3B0cywgY2IhKTtcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9OyAvL2VuZCBvZiBoYW5kbGVcclxuXHJcbiAgYmVmb3JlRmlsdGVyKGZhbHNlLCBzZXJ2ZXIsIG1zZywgc2Vzc2lvbiwgaGFuZGxlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2NoZWR1bGVDcm9ucyhzZXJ2ZXI6IFNlcnZlciwgY3JvbnM6IENyb25bXSkge1xyXG4gIGxldCBoYW5kbGVycyA9IHNlcnZlci5jcm9uSGFuZGxlcnM7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjcm9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgbGV0IGNyb25JbmZvID0gY3JvbnNbaV07XHJcbiAgICBsZXQgdGltZSA9IGNyb25JbmZvLnRpbWU7XHJcbiAgICBsZXQgYWN0aW9uID0gY3JvbkluZm8uYWN0aW9uO1xyXG4gICAgbGV0IGpvYklkID0gY3JvbkluZm8uaWQ7XHJcblxyXG4gICAgaWYgKCF0aW1lIHx8ICFhY3Rpb24gfHwgIWpvYklkKSB7XHJcbiAgICAgIGxvZ2dlci5lcnJvcihcImNyb24gbWlzcyBuZWNlc3NhcnkgcGFyYW1ldGVyczogJWpcIiwgY3JvbkluZm8pO1xyXG4gICAgICBjb250aW51ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYWN0aW9uLmluZGV4T2YoXCIuXCIpIDwgMCkge1xyXG4gICAgICBsb2dnZXIuZXJyb3IoXCJjcm9uIGFjdGlvbiBpcyBlcnJvciBmb3JtYXQ6ICVqXCIsIGNyb25JbmZvKTtcclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGNyb24gPSBhY3Rpb24uc3BsaXQoXCIuXCIpWzBdO1xyXG4gICAgbGV0IGpvYiA9IGFjdGlvbi5zcGxpdChcIi5cIilbMV07XHJcbiAgICBsZXQgaGFuZGxlciA9IGhhbmRsZXJzW2Nyb25dO1xyXG5cclxuICAgIGlmICghaGFuZGxlcikge1xyXG4gICAgICBsb2dnZXIuZXJyb3IoXCJjb3VsZCBub3QgZmluZCBjcm9uOiAlalwiLCBjcm9uSW5mbyk7XHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YgaGFuZGxlcltqb2JdICE9PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgbG9nZ2VyLmVycm9yKFwiY291bGQgbm90IGZpbmQgY3JvbiBqb2I6ICVqLCAlc1wiLCBjcm9uSW5mbywgam9iKTtcclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGlkID0gc2NoZWR1bGUuc2NoZWR1bGVKb2IodGltZSwgaGFuZGxlcltqb2JdLmJpbmQoaGFuZGxlcikpO1xyXG4gICAgc2VydmVyLmpvYnNbam9iSWRdID0gaWQ7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja0FuZEFkZChjcm9uOiBDcm9uLCBjcm9uczogQ3JvbltdLCBzZXJ2ZXI6IFNlcnZlcikge1xyXG4gIGlmICghY29udGFpbkNyb24oY3Jvbi5pZCwgY3JvbnMpKSB7XHJcbiAgICBzZXJ2ZXIuY3JvbnMucHVzaChjcm9uKTtcclxuICB9IGVsc2Uge1xyXG4gICAgbG9nZ2VyLndhcm4oXCJjcm9uIGlzIGR1cGxpY2F0ZWQ6ICVqXCIsIGNyb24pO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY29udGFpbkNyb24oaWQ6IG51bWJlciwgY3JvbnM6IENyb25bXSkge1xyXG4gIGZvciAobGV0IGkgPSAwLCBsID0gY3JvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICBpZiAoaWQgPT09IGNyb25zW2ldLmlkKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gZmFsc2U7XHJcbn1cclxuIl19